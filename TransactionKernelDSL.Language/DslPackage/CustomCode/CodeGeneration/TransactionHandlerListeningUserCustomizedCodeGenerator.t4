<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ parameter name="delimiter" type="System.String" #>
<#@ parameter name="path" type="System.String" #>
<#@ TrnxDsl processor="TrnxDslDirectiveProcessor" requires="fileName='Test.TrnxDsl'" #>
<#@ import namespace="System.IO" #>
<#
      if(ValidateModel(this.TransactionModel))
    { 
        string className = null; 
        // When you change the DSL Definition, some of the code below may not work.
        foreach(TransactionLayer l in this.TransactionModel.TransactionLayers)
        {
            foreach (TransactionHandler h in l.TransactionHandlers)
            {                
                className = "TL"+l.Level+"_"+l.Name.Replace(" ","")+ "_"+h.Name.Replace(" ","")+"_Handler";
                if(h.InputTransactionEngine != null)
                {
                    if(InputEngineStage_HasCustomCode(h) == true)
                    {
                                string layerLevelPath = path + "\\TL"+l.Level;
                                if(Directory.Exists(layerLevelPath) == false) 
                                {
                                    Directory.CreateDirectory(layerLevelPath);
                                }
        
                                string layerPath = layerLevelPath + "\\"+l.Name.Replace(" ","");
                                if(Directory.Exists(layerPath) == false) 
                                {
                                    Directory.CreateDirectory(layerPath);
                                }

                                string customCodeLayerPath = layerPath + "\\CustomCode";
                                if(Directory.Exists(customCodeLayerPath) == false) 
                                {
                                    Directory.CreateDirectory(customCodeLayerPath);
                                }

#>
	<#=                            string.Format(delimiter,"TL"+l.Level+"\\"+l.Name.Replace(" ","")+"\\CustomCode\\"+ className+"_UserCustomizedCode") #>
	using System;
	using System.Collections.Generic;
	using System.Text;
    using TransactionKernelDSL.Framework.V1;
    using log4net.Config;
    using log4net;
    using System.Threading;

namespace <#=                            this.TransactionModel.Namespace #>
{

    /// <summary>
    /// User-customized helpers for Listenable stage methods 
    /// </summary>
    /// <remarks>
    /// Generated on <#=                            DateTime.Now.ToString() #>
    /// </remarks>
	<#=                            ClassDefinitionGenerator(h,className) #>
	{    
                    <#
                        switch(h.InputTransactionEngine.Type)
                        {
                              case InputEngineType.TimeTriggeredInputEngine:
                                #>

                               #region ITransactionHandlerListenable User-Customized Members

                                /// <summary>                 
                                /// This method must be implemented in order to retrieve and validate data from an AbstractTransactionParserStructure,
                                /// within internal AbstractTransactionParser object, passed by the input engine. Once data is validated, it shall be
                                /// saved on an valid AbstractTransactionContext object within this transaction, so it can be shared between other methods and layers.
                                /// </summary>
                                /// <returns>TRUE if data was retrieved and validated OK, otherwise FALSE</returns>
                                public bool GetRequirement_UC()
                                {
                                    // Uncomment this line if you want to use default behaviour.
                                    // return GetRequirement();

                                    throw new NotImplementedException("Implementation left for GetRequirement_UC() in <#=                            className #>");
                                }
                                #endregion       
<#
                              break;
                              default:
                                #>
                                 #region ITransactionHandlerListenable User-Customized Members
                                /// <summary>                 
                                /// This method must be implemented in order to retrieve and validate data from an AbstractTransactionParserStructure,
                                /// within internal AbstractTransactionParser object, passed by the input engine. Once data is validated, it shall be
                                /// saved on an valid AbstractTransactionContext object within this transaction, so it can be shared between other methods and layers.
                                /// </summary>
                                /// <returns>TRUE if data was retrieved and validated OK, otherwise FALSE</returns>
                                public bool GetRequirement_UC()
                                {
                                    // Uncomment this line if you want to use default behaviour.
                                    // return GetRequirement();

                                    throw new NotImplementedException("Implementation left for GetRequirement_UC() in <#=                            className #>");
                                }
                                /// <summary>                   
                                /// This method must be implemented in order to build a valid response from an AbstractTransactionContext object within
                                /// this transaction, to an AbstractTransactionParserStructure within the internal Parser object.
                                /// </summary>
                                /// <returns>TRUE if a valid response was built, otherwise FALSE</returns>
                                public bool BuildResponse_UC()
                                {
                                    // Uncomment this line if you want to use default behaviour.
                                    // return BuildResponse();

                                    throw new NotImplementedException("Implementation left for BuildResponse_UC() in <#=                            className #>");
                                }

                                /// <summary>                   
                                /// This method must be implemented in order to eventually send the response to the connected client. This method
                                /// has the final decission regarding to whether sending or not a reply, checking internal statuses or values from upper layers, for instance.
                                /// </summary>
                                /// <returns>TRUE if a reply coudl be sent, otherwise FALSE</returns>
                                public bool Reply_UC()
                                {
                                    // Uncomment this line if you want to use default behaviour.
                                    // return Reply();

                                    throw new NotImplementedException("Implementation left for Reply_UC() in <#=                            className #>");
                                }
                                 #endregion     
<#
                                break;
                        }
 #>
                   

                                  
	}
}
<#    
                    }
                }            
            }
        }
    }
#>
<#+
    private bool ValidateModel(TransactionModel m)
    {
        return (!String.IsNullOrEmpty(m.Name)) && (!String.IsNullOrEmpty(m.Namespace)) && (m.InstanceId > 0);
    }
#>
<#+ 
   private bool InputEngineStage_HasCustomCode(ModelElement m)
    {
        foreach(DomainRoleInfo d in m.GetDomainClass().LocalDomainRolesPlayed)
        {
            if(d.DisplayName == "Target Input Engine Transaction Handler")
            {
                return (d.GetElementLinks(m)[0] as TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers).HasCustomCode;

            }
        }

        return false;
    }
#>
<#+
    private string ClassDefinitionGenerator(TransactionHandler h, string className)
    {
        string result= "public partial class "+className+": AbstractTransactionHandler";

        if(h.InputTransactionEngine != null)
        {
            result += ",ITransactionHandlerListenable";
        }
        if(h.ForwarderTransactionHandlers.Count > 0 || h.OutputTransactionEngine != null || h.OutputTransactionWebService != null)
        {
            result += ",ITransactionHandlerForwardable";
        }
        if(h.MaintenanceTransactionHandler != null)
        {
            result += ",ITransactionHandlerMaintenanceable";
        }
        if(h.TransactionSQLServerDataSources.Count > 0)
        {
            result += ",ITransactionHandlerPersistable";
        }

        return result;
    }

 #>