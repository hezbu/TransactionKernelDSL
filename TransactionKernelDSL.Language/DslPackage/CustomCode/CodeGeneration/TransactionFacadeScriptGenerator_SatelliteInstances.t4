<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ parameter name="delimiter" type="System.String" #>
<#@ parameter name="path" type="System.String" #>
<#@ import namespace="System.Diagnostics" #>
<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ TrnxDsl processor="TrnxDslDirectiveProcessor" requires="fileName='Test.TrnxDsl'" #>
<#@ import namespace="System.IO" #>
<#
    if(ValidateModel(this.TransactionModel))
    { 
       
     
        string scriptsPath = path + "\\Scripts";
        if(Directory.Exists(scriptsPath) == false) 
        {
            Directory.CreateDirectory(scriptsPath);
        }

        foreach(int satelliteInstance in GetSatelliteInstances(this.TransactionModel))
        {

        string scriptName= this.TransactionModel.Name.Replace(" ","") + "Facade_Script_Instance"+satelliteInstance.ToString();
        #>
            <#=                    string.Format(delimiter,"Scripts\\"+scriptName) #>
            USE [<#= this.TransactionModel.DatabaseInitialCatalog #>]
            GO
        <#=                    ConfigTableGenerator() #>
        <#=                    EnvironmentVariableGenerator(this.TransactionModel, satelliteInstance) #>
        <#
        if(this.TransactionModel.GetValueImplementationType == PersistableSourceType.SQLServerDatabase)
        {
 #>
            IF (EXISTS (SELECT * FROM sysobjects where name='Sp_GetValue'))
            BEGIN
	            DROP PROCEDURE Sp_GetValue
            end
            GO		

            -- =============================================
            -- Author:		<TransactionKernelDSL>
            -- Create date: <#= DateTime.Now.Day.ToString()+"-"+DateTime.Now.Month.ToString()+"-"+DateTime.Now.Year.ToString() #>
            -- Description:	<Obtiene un valor de una tabla de configuracion>
            -- =============================================
            CREATE PROCEDURE [Sp_GetValue]
            (
	            @cfg_instancia int = 0,
	            @cfg_seccion varchar(100),
	            @cfg_clave varchar(100) = NULL
            )
            AS

            IF @cfg_clave IS NULL
            BEGIN

		            SELECT cfg_numero, cfg_cadena
		            FROM CONFIGURACION with (nolock)
		            WHERE cfg_instancia = @cfg_instancia
		            AND cfg_seccion = @cfg_seccion		
            END
            ELSE
            BEGIN

		            SELECT cfg_numero, cfg_cadena
		            FROM CONFIGURACION with (nolock)
		            WHERE cfg_instancia = @cfg_instancia
		            AND cfg_seccion = @cfg_seccion
		            AND cfg_clave = @cfg_clave


            END
            
            GO
      
        <#
        }
        if(this.TransactionModel.SequenceFactoryImplementationType == PersistableSourceType.SQLServerDatabase)
            {
            #>
         
            IF OBJECT_ID('SequenceFactories') IS NULL
            BEGIN
            CREATE TABLE [SequenceFactories](
	            [SequenceFactoryId] [int] IDENTITY(1,1) NOT NULL,
	            [LastNumber] [int] NOT NULL,
	            [InstanceId] [int] NOT NULL,
	            [MaxNumber] [int] NOT NULL
            ) ON [PRIMARY]
            END

            GO
      
            IF (EXISTS (SELECT * FROM sysobjects where name='Sp_SequenceFactory'))
            BEGIN
	            DROP PROCEDURE Sp_SequenceFactory
            end
            GO		

            -- =============================================
            -- Author:		<TransactionKernelDSL>
            -- Create date: <#=                    DateTime.Now.Day.ToString()+"-"+DateTime.Now.Month.ToString()+"-"+DateTime.Now.Year.ToString() #>
            -- Description:	<Genera un secuenciador para cada componente del sistema>
            -- =============================================
            CREATE PROCEDURE [dbo].[Sp_SequenceFactory]
			             ( @instanceId		    int
			             )
            AS
            BEGIN
			            DECLARE @varNewNumber int, @varMaxNumber int

			            BEGIN TRANSACTION

			            UPDATE SequenceFactories
			            SET @varNewNumber = LastNumber = LastNumber + 1, @varMaxNumber = MaxNumber
			            WHERE instanceId = @instanceId

			            if(@varNewNumber > @varMaxNumber)
			            BEGIN
				            UPDATE SequenceFactories
				            SET @varNewNumber = LastNumber = 1
				            WHERE instanceId = @instanceId
			            END

			            SELECT @varNewNumber

	            COMMIT TRANSACTION

            END

            GO

            IF NOT EXISTS (SELECT * FROM SequenceFactories
            WHERE instanceId = <#=                    satelliteInstance #>)
            BEGIN
		            INSERT INTO [SequenceFactories]
				               ([LastNumber]
				               ,[InstanceId]
				               ,[MaxNumber])
			             VALUES
				               (1
				               ,<#=                    satelliteInstance #>
				               ,999999)
            END
            
            GO
      
        <#=                    FacadeConfigValuesGenerator(satelliteInstance) #>
        <#
            }
        }
    }
#>
<#+
    private string EnvironmentVariableGenerator(TransactionModel m, int instId)
    {
        string result= "";
        if(m.TransactionEnvironmentLayer != null)
        {
            foreach(TransactionEnvironmentSQLServerVariable v in m.TransactionEnvironmentLayer.TransactionEnvironmentSQLServerVariables)
            {
                result += "IF NOT EXISTS (SELECT cfg_instancia FROM CONFIGURACION WHERE cfg_seccion = '"+this.TransactionModel.Name.Replace(" ","")+".General' and cfg_clave = '"+m.Name.Replace(" ","")+"_"+v.Name.Replace(" ","")+"' and cfg_instancia = "+instId.ToString()+") \r\n\t";
                result += "BEGIN \r\n\t";
                result += "INSERT INTO [CONFIGURACION] \r\n\t";
                result += "  ([cfg_instancia] \r\n\t";
                result += "  ,[cfg_seccion] \r\n\t";
                result += "  ,[cfg_clave] \r\n\t";
                result += "  ,[cfg_numero] \r\n\t";
                result += "  ,[cfg_cadena] \r\n\t";
                result += "  ,[cfg_descripcion]) \r\n\t";
                result += " VALUES \r\n\t";
                result += " ("+instId.ToString()+"\r\n\t";
                result += " ,'"+this.TransactionModel.Name.Replace(" ","")+".General'\r\n\t";
                result += " ,'"+m.Name.Replace(" ","")+"_"+v.Name.Replace(" ","")+"'\r\n\t";                    
                result += " ,NULL\r\n\t";                    
                result += " ,'"+v.DefaultValue+"'\r\n\t";                    
                result += " ,'Environment variable')\r\n\t";        
                result += "END \r\n\t";  
          
            }
        }
        return result;
    }
 #>
<#+
    private List<int> GetSatelliteInstances(TransactionModel m)
    {
        List<int> list= new List<int>();
        if (String.IsNullOrEmpty(m.SatelliteInstances) == false)
        {
            foreach (string s in m.SatelliteInstances.Split(new char[] { '|' }))
            {
                int instanceTest = 0;
                if (Int32.TryParse(s, out instanceTest) == false)
                {
                    return null;
                }
                else
                {
                    list.Add(instanceTest);
                }
            }

            return list;
        }
        else return null;
    }
 #>
<#+
    private bool ValidateModel(TransactionModel m)
    {
        return (!String.IsNullOrEmpty(m.Name)) && (!String.IsNullOrEmpty(m.Namespace)) && (GetSatelliteInstances(m) != null) && (m.InstanceId > 0);
    }
 #>
<#+
    private string ConfigTableGenerator()
    {
        string result= "";
        
        result+= " IF OBJECT_ID('CONFIGURACION') IS NULL \r\n\t";
        result+= " BEGIN \r\n\t";
        result+= " CREATE TABLE [dbo].[CONFIGURACION]( \r\n\t";
        result+= " [cfg_instancia] [int] NOT NULL DEFAULT ((0)), \r\n\t";
        result+= "  [cfg_seccion] [varchar](100) NOT NULL, \r\n\t";
        result+= "  [cfg_clave] [varchar](100) NOT NULL, \r\n\t";
        result+= "  [cfg_numero] [int] NULL, \r\n\t";
        result+= "  [cfg_cadena] [varchar](1000) NULL, \r\n\t";
        result+= "  [cfg_descripcion] [varchar](255) NULL, \r\n\t";
        result+= "  CONSTRAINT [XPKCONFIGURACION] PRIMARY KEY CLUSTERED  \r\n\t";
        result+= "  ( \r\n\t";
        result+= "  [cfg_instancia] ASC, \r\n\t";
        result+= "  [cfg_seccion] ASC, \r\n\t";
        result+= "  [cfg_clave] ASC \r\n\t";
        result+= "  ) \r\n\t";
        result+= "  WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] \r\n\t";
        result+= "  ) ON [PRIMARY] \r\n\t";
        result+= "  END \r\n\t";
      
        return result;
    }
 #>
<#+
    private string FacadeConfigValuesGenerator(int instId)
    {
        string result = "";

        result += "IF NOT EXISTS (SELECT cfg_instancia FROM CONFIGURACION WHERE cfg_seccion = '"+this.TransactionModel.Name.Replace(" ","")+".General' and cfg_clave = 'TelnetLoggerOn' and cfg_instancia = "+instId.ToString()+") \r\n\t";
        result += "BEGIN \r\n\t";
        result += "INSERT INTO [CONFIGURACION] \r\n\t";
        result += "  ([cfg_instancia] \r\n\t";
        result += "  ,[cfg_seccion] \r\n\t";
        result += "  ,[cfg_clave] \r\n\t";
        result += "  ,[cfg_numero] \r\n\t";
        result += "  ,[cfg_cadena] \r\n\t";
        result += "  ,[cfg_descripcion]) \r\n\t";
        result += " VALUES \r\n\t";
        result += " ("+instId.ToString()+"\r\n\t";
        result += " ,'"+this.TransactionModel.Name.Replace(" ","")+".General'\r\n\t";
        result += " ,'TelnetLoggerOn'\r\n\t";                    
        result += " ,NULL\r\n\t";                    
        result += " ,'False'\r\n\t";                    
        result += " ,'Enables a telnet logger on port 231"+this.TransactionModel.InstanceId.ToString().PadLeft(2,'0')+"')\r\n\t";        
        result += "END \r\n\t";  

        result += "IF NOT EXISTS (SELECT cfg_instancia FROM CONFIGURACION WHERE cfg_seccion = '"+this.TransactionModel.Name.Replace(" ","")+".General' and cfg_clave = 'LogDirectory' and cfg_instancia = "+instId.ToString()+") \r\n\t";
        result += "BEGIN \r\n\t";
        result += "INSERT INTO [CONFIGURACION] \r\n\t";
        result += "  ([cfg_instancia] \r\n\t";
        result += "  ,[cfg_seccion] \r\n\t";
        result += "  ,[cfg_clave] \r\n\t";
        result += "  ,[cfg_numero] \r\n\t";
        result += "  ,[cfg_cadena] \r\n\t";
        result += "  ,[cfg_descripcion]) \r\n\t";
        result += " VALUES \r\n\t";
        result += " ("+instId.ToString()+"\r\n\t";
        result += " ,'"+this.TransactionModel.Name.Replace(" ","")+".General'\r\n\t";
        result += " ,'LogDirectory'\r\n\t";                    
        result += " ,NULL\r\n\t";                    
        result += " ,'C:\\Logs\\"+this.TransactionModel.Name.Replace(" ","")+"'\r\n\t";                    
        result += " ,'Directory where logger will be writing to')\r\n\t";        
        result += "END \r\n\t";  

        result += "IF NOT EXISTS (SELECT cfg_instancia FROM CONFIGURACION WHERE cfg_seccion = '"+this.TransactionModel.Name.Replace(" ","")+".General' and cfg_clave = 'LogPrefix' and cfg_instancia = "+instId.ToString()+") \r\n\t";
        result += "BEGIN \r\n\t";
        result += "INSERT INTO [CONFIGURACION] \r\n\t";
        result += "  ([cfg_instancia] \r\n\t";
        result += "  ,[cfg_seccion] \r\n\t";
        result += "  ,[cfg_clave] \r\n\t";
        result += "  ,[cfg_numero] \r\n\t";
        result += "  ,[cfg_cadena] \r\n\t";
        result += "  ,[cfg_descripcion]) \r\n\t";
        result += " VALUES \r\n\t";
        result += " ("+instId.ToString()+"\r\n\t";
        result += " ,'"+this.TransactionModel.Name.Replace(" ","")+".General'\r\n\t";
        result += " ,'LogPrefix'\r\n\t";                    
        result += " ,NULL\r\n\t";                    
        result += " ,'"+this.TransactionModel.Name.Replace(" ","")+"MainLogger'\r\n\t";                    
        result += " ,'Prefix of MainLogger files')\r\n\t";        
        result += "END \r\n\t";  

        return result;
    }
 #>

