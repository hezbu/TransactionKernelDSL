<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ parameter name="delimiter" type="System.String" #>
<#@ parameter name="path" type="System.String" #>
<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ TrnxDsl processor="TrnxDslDirectiveProcessor" requires="fileName='Test.TrnxDsl'" #>
<#@ import namespace="System.IO" #>
<#
    if(ValidateModel(this.TransactionModel))
    { 
        string className = null; 
        // When you change the DSL Definition, some of the code below may not work.
        foreach(TransactionLayer l in this.TransactionModel.TransactionLayers)
        {
            foreach (InputTransactionEngine e in l.InputTransactionEngines)
            {
                if(e.Parser == ParserType.PropietaryParser)
                {
                    string layerLevelPath = path + "\\TL"+l.Level;
                    if(Directory.Exists(layerLevelPath) == false) 
                    {
                        Directory.CreateDirectory(layerLevelPath);
                    }
        
                    string layerPath = layerLevelPath + "\\"+l.Name.Replace(" ","");
                    if(Directory.Exists(layerPath) == false) 
                    {
                        Directory.CreateDirectory(layerPath);
                    }

                    className = "TL"+l.Level+"_"+l.Name.Replace(" ","")+ "_"+e.Name.Replace(" ","")+"_ParserStream";

                    #>
                    <#=                    string.Format(delimiter,"TL"+l.Level+"\\"+l.Name.Replace(" ","")+"\\CustomCode\\"+className+"_UC") #>
                    using System;
	                using System.Collections.Generic;
	                using System.Text;
                    using TransactionKernelDSL.Framework.V1;
                    using log4net.Config;
                    using log4net;
                    using System.Threading;
                    namespace <#=                    this.TransactionModel.Namespace #>
                    {

                        /// <summary>
                        /// A transactional parser stream named <#=                    className #>
                        /// </summary>
                        /// <remarks>
                        /// Generated on <#=                    DateTime.Now.ToString() #>
                        /// </remarks>
                        public partial class <#=                    className #>: AbstractTransactionParserStream
	                    {
                            private void SetupStream_UC()
                            {
                                throw new NotImplementedException("Please define any parser stream's user setup here, or erase this exception");

                                return;
                            } 

                            public override string ToString()
                            {
                                throw new NotImplementedException("Please define <#=                    className #>.ToString() to expose inner fields to other objects");
                            }
                        }
                    }
<#
                    
                }
            }
            //---------------------------------------------------------------------------------------
            //---------------------------------------------------------------------------------------
            //---------------------------------------------------------------------------------------
            //---------------------------------------------------------------------------------------
            foreach (OutputTransactionEngine e in l.OutputTransactionEngines)
            {
                if(e.Parser == ParserType.PropietaryParser)
                {
                    string layerLevelPath = path + "\\TL"+l.Level;
                    if(Directory.Exists(layerLevelPath) == false) 
                    {
                        Directory.CreateDirectory(layerLevelPath);
                    }
        
                    string layerPath = layerLevelPath + "\\"+l.Name.Replace(" ","");
                    if  (Directory.Exists(layerPath) == false) 
                    {
                        Directory.CreateDirectory(layerPath);
                    }

                    className = "TL"+l.Level+"_"+l.Name.Replace(" ","")+ "_"+e.Name.Replace(" ","")+"_ParserStream";
                    #>	
    <#=                    string.Format(delimiter,"TL"+l.Level+"\\"+l.Name.Replace(" ","")+"\\CustomCode\\"+className+"_UC") #>
                    using System;
	                using System.Collections.Generic;
	                using System.Text;
                    using TransactionKernelDSL.Framework.V1;
                    using log4net.Config;
                    using log4net;
                    using System.Threading;
                    namespace <#=                    this.TransactionModel.Namespace #>
                    {

                        /// <summary>
                        /// A transactional parser stream named <#=                    className #>
                        /// </summary>
                        /// <remarks>
                        /// Generated on <#=                    DateTime.Now.ToString() #>
                        /// </remarks>
                        public partial class <#=                    className #>: AbstractTransactionParserStream
	                    {
                            private void SetupStream_UC()
                            {
                                throw new NotImplementedException("Please define any parser stream's user setup here, or erase this exception");

                                return;
                            } 

                            public override string ToString()
                            {
                                throw new NotImplementedException("Please define <#=                    className #>.ToString() to expose inner fields to other objects");
                            }
                        }
                    }
                    <#
                }    
            }
        }
    }
#>
<#+
    private bool ValidateModel(TransactionModel m)
    {
        return (!String.IsNullOrEmpty(m.Name)) && (!String.IsNullOrEmpty(m.Namespace)) && (m.InstanceId > 0);
    }
 #>
