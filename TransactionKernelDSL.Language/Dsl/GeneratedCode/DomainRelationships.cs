//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionHandlerReferencesForwarderTransactionHandlers
	/// Links one handler to another in a routing or forwarding way.
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2a5a3857-51b3-4cd6-ab52-203102839ce3")]
	public partial class TransactionHandlerReferencesForwarderTransactionHandlers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionHandlerReferencesForwarderTransactionHandlers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a5a3857, 0x51b3, 0x4cd6, 0xab, 0x52, 0x20, 0x31, 0x02, 0x83, 0x9c, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionHandlerReferencesForwarderTransactionHandlers link in the same Partition as the given TransactionHandler
		/// </summary>
		/// <param name="source">TransactionHandler to use as the source of the relationship.</param>
		/// <param name="target">TransactionHandler to use as the target of the relationship.</param>
		public TransactionHandlerReferencesForwarderTransactionHandlers(TransactionHandler source, TransactionHandler target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionHandlerReferencesForwarderTransactionHandlers.SourceForwardingTransactionHandlerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionHandlerReferencesForwarderTransactionHandlers.TargetForwardingTransactionHandlerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesForwarderTransactionHandlers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesForwarderTransactionHandlers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesForwarderTransactionHandlers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesForwarderTransactionHandlers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceForwardingTransactionHandler domain role code
		
		/// <summary>
		/// SourceForwardingTransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceForwardingTransactionHandlerDomainRoleId = new global::System.Guid(0x4a7421f1, 0xc31b, 0x4039, 0xbc, 0x5e, 0x71, 0xd9, 0xb0, 0xd6, 0x88, 0x5f);
		
		/// <summary>
		/// DomainRole SourceForwardingTransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SourceForwardingTransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SourceForwardingTransactionHandler.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SourceForwardingTransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ForwarderTransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SourceForwardingTransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a7421f1-c31b-4039-bc5e-71d9b0d6885f")]
		public virtual TransactionHandler SourceForwardingTransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceForwardingTransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceForwardingTransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BackwardTransactionHandlers of a TransactionHandler
		/// <summary>
		/// Gets a list of BackwardTransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetBackwardTransactionHandlers(TransactionHandler element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, TargetForwardingTransactionHandlerDomainRoleId);
		}
		#endregion
		#region TargetForwardingTransactionHandler domain role code
		
		/// <summary>
		/// TargetForwardingTransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetForwardingTransactionHandlerDomainRoleId = new global::System.Guid(0xdf4f91de, 0x36bf, 0x4da7, 0x8f, 0x03, 0x4e, 0xbb, 0xd7, 0x4d, 0x44, 0x26);
		
		/// <summary>
		/// DomainRole TargetForwardingTransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/TargetForwardingTransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/TargetForwardingTransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BackwardTransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/TargetForwardingTransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("df4f91de-36bf-4da7-8f03-4ebbd74d4426")]
		public virtual TransactionHandler TargetForwardingTransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetForwardingTransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetForwardingTransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForwarderTransactionHandlers of a TransactionHandler
		/// <summary>
		/// Gets a list of ForwarderTransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetForwarderTransactionHandlers(TransactionHandler element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, SourceForwardingTransactionHandlerDomainRoleId);
		}
		#endregion
		#region IsRoutingLink domain property code
		
		/// <summary>
		/// IsRoutingLink domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsRoutingLinkDomainPropertyId = new global::System.Guid(0x788c4c10, 0xe4e4, 0x4f7f, 0x9e, 0x9c, 0x98, 0x7f, 0x79, 0x9e, 0x6d, 0xf2);
		
		/// <summary>
		/// Storage for IsRoutingLink
		/// </summary>
		private global::System.Boolean isRoutingLinkPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsRoutingLink domain property.
		/// If this link is in Routing Mode, it means source handler might eventually
		/// forward to target handler, through a routing algorithm. If it isn't a Routing
		/// Link, it means source and target handlers are always linked, and links ar
		/// ordered by Sequence Order
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/IsRoutingLink.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/IsRoutingLink.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/IsRoutingLink.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("788c4c10-e4e4-4f7f-9e9c-987f799e6df2")]
		public global::System.Boolean IsRoutingLink
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isRoutingLinkPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsRoutingLinkPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandlerReferencesForwarderTransactionHandlers.IsRoutingLink domain property.
		/// </summary>
		internal sealed partial class IsRoutingLinkPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandlerReferencesForwarderTransactionHandlers, global::System.Boolean>
		{
			private IsRoutingLinkPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandlerReferencesForwarderTransactionHandlers.IsRoutingLink domain property value handler.
			/// </summary>
			public static readonly IsRoutingLinkPropertyHandler Instance = new IsRoutingLinkPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandlerReferencesForwarderTransactionHandlers.IsRoutingLink domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsRoutingLinkDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(TransactionHandlerReferencesForwarderTransactionHandlers element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isRoutingLinkPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandlerReferencesForwarderTransactionHandlers element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isRoutingLinkPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SequenceOrder domain property code
		
		/// <summary>
		/// SequenceOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SequenceOrderDomainPropertyId = new global::System.Guid(0xd8f0cf4a, 0x4b03, 0x47bd, 0xaa, 0x07, 0x08, 0x21, 0x90, 0x57, 0x27, 0x0b);
		
		/// <summary>
		/// Storage for SequenceOrder
		/// </summary>
		private global::System.Int16 sequenceOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SequenceOrder domain property.
		/// Number which means the order in that the forwarding handler linked here will be
		/// instantiated, within a group of others routing handlers
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SequenceOrder.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SequenceOrder.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers/SequenceOrder.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d8f0cf4a-4b03-47bd-aa07-08219057270b")]
		public global::System.Int16 SequenceOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sequenceOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SequenceOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandlerReferencesForwarderTransactionHandlers.SequenceOrder domain property.
		/// </summary>
		internal sealed partial class SequenceOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandlerReferencesForwarderTransactionHandlers, global::System.Int16>
		{
			private SequenceOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandlerReferencesForwarderTransactionHandlers.SequenceOrder domain property value handler.
			/// </summary>
			public static readonly SequenceOrderPropertyHandler Instance = new SequenceOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandlerReferencesForwarderTransactionHandlers.SequenceOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SequenceOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(TransactionHandlerReferencesForwarderTransactionHandlers element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sequenceOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandlerReferencesForwarderTransactionHandlers element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sequenceOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceForwardingTransactionHandler link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesForwarderTransactionHandlers links to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers> GetLinksToForwarderTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.TransactionHandler sourceForwardingTransactionHandlerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers>(sourceForwardingTransactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.SourceForwardingTransactionHandlerDomainRoleId);
		}
		#endregion
		#region TargetForwardingTransactionHandler link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesForwarderTransactionHandlers links to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers> GetLinksToBackwardTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.TransactionHandler targetForwardingTransactionHandlerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers>(targetForwardingTransactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.TargetForwardingTransactionHandlerDomainRoleId);
		}
		#endregion
		#region TransactionHandlerReferencesForwarderTransactionHandlers instance accessors
		
		/// <summary>
		/// Get any TransactionHandlerReferencesForwarderTransactionHandlers links between a given TransactionHandler and a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.SourceForwardingTransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers link in links )
			{
				if ( target.Equals(link.TargetForwardingTransactionHandler) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionHandlerReferencesForwarderTransactionHandlers link between a given TransactionHandlerand a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers GetLink( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.SourceForwardingTransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers link in links )
			{
				if ( target.Equals(link.TargetForwardingTransactionHandler) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionModelHasTransactionLayers
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("01623d21-e7e5-4815-89a7-ecd8b9ec9cfc")]
	public partial class TransactionModelHasTransactionLayers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionModelHasTransactionLayers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01623d21, 0xe7e5, 0x4815, 0x89, 0xa7, 0xec, 0xd8, 0xb9, 0xec, 0x9c, 0xfc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionModelHasTransactionLayers link in the same Partition as the given TransactionModel
		/// </summary>
		/// <param name="source">TransactionModel to use as the source of the relationship.</param>
		/// <param name="target">TransactionLayer to use as the target of the relationship.</param>
		public TransactionModelHasTransactionLayers(TransactionModel source, TransactionLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionModelHasTransactionLayers.TransactionModelDomainRoleId, source), new DslModeling::RoleAssignment(TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionModelHasTransactionLayers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionModelHasTransactionLayers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionModelHasTransactionLayers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionModelHasTransactionLayers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionModel domain role code
		
		/// <summary>
		/// TransactionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionModelDomainRoleId = new global::System.Guid(0x317ce9b0, 0xaf3f, 0x4386, 0x84, 0xea, 0xad, 0x99, 0x49, 0xa4, 0xe4, 0x00);
		
		/// <summary>
		/// DomainRole TransactionModel
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModel
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers/TransactionModel.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers/TransactionModel.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionLayers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers/TransactionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("317ce9b0-af3f-4386-84ea-ad9949a4e400")]
		public virtual TransactionModel TransactionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionModel of a TransactionLayer
		/// <summary>
		/// Gets TransactionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionModel GetTransactionModel(TransactionLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionLayerDomainRoleId) as TransactionModel;
		}
		
		/// <summary>
		/// Sets TransactionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionModel(TransactionLayer element, TransactionModel newTransactionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionLayerDomainRoleId, newTransactionModel);
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0x05730fa1, 0x9470, 0x4c53, 0xbb, 0x18, 0x95, 0x03, 0x1d, 0xd8, 0x11, 0x69);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionModel", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers/TransactionLayer.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("05730fa1-9470-4c53-bb18-95031dd81169")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayers of a TransactionModel
		/// <summary>
		/// Gets a list of TransactionLayers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionLayer> GetTransactionLayers(TransactionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionLayer>, TransactionLayer>(element, TransactionModelDomainRoleId);
		}
		#endregion
		#region TransactionModel link accessor
		/// <summary>
		/// Get the list of TransactionModelHasTransactionLayers links to a TransactionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers> GetLinksToTransactionLayers ( global::TransactionKernelDSL.Framework.Language.TransactionModel transactionModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers>(transactionModelInstance, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModelDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the TransactionModelHasTransactionLayers link to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers GetLinkToTransactionModel (global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionModelHasTransactionLayers instance accessors
		
		/// <summary>
		/// Get any TransactionModelHasTransactionLayers links between a given TransactionModel and a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionModel source, global::TransactionKernelDSL.Framework.Language.TransactionLayer target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers>(source, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModelDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers link in links )
			{
				if ( target.Equals(link.TransactionLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionModelHasTransactionLayers link between a given TransactionModeland a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers GetLink( global::TransactionKernelDSL.Framework.Language.TransactionModel source, global::TransactionKernelDSL.Framework.Language.TransactionLayer target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers>(source, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModelDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers link in links )
			{
				if ( target.Equals(link.TransactionLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasTransactionHandlers
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0b224db5-ade6-44ad-a893-677db8290b84")]
	public partial class TransactionLayerHasTransactionHandlers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasTransactionHandlers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b224db5, 0xade6, 0x44ad, 0xa8, 0x93, 0x67, 0x7d, 0xb8, 0x29, 0x0b, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasTransactionHandlers link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">TransactionHandler to use as the target of the relationship.</param>
		public TransactionLayerHasTransactionHandlers(TransactionLayer source, TransactionHandler target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTransactionHandlers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTransactionHandlers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTransactionHandlers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTransactionHandlers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0x31a27721, 0xb491, 0x4274, 0xaa, 0x82, 0xda, 0x4e, 0xde, 0xdd, 0xe1, 0xea);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("31a27721-b491-4274-aa82-da4ededde1ea")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a TransactionHandler
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(TransactionHandler element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionHandlerDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(TransactionHandler element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionHandlerDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region TransactionHandler domain role code
		
		/// <summary>
		/// TransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionHandlerDomainRoleId = new global::System.Guid(0x64188ad5, 0x0c64, 0x4e21, 0xbc, 0x39, 0x25, 0x0e, 0x45, 0x8d, 0xd1, 0x05);
		
		/// <summary>
		/// DomainRole TransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers/TransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers/TransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers/TransactionHandler.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("64188ad5-0c64-4e21-bc39-250e458dd105")]
		public virtual TransactionHandler TransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionHandlers of a TransactionLayer
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetTransactionHandlers(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasTransactionHandlers links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers> GetLinksToTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionHandler link accessor
		/// <summary>
		/// Get the TransactionLayerHasTransactionHandlers link to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.TransactionHandler transactionHandlerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers>(transactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionHandler not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasTransactionHandlers instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasTransactionHandlers links between a given TransactionLayer and a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers link in links )
			{
				if ( target.Equals(link.TransactionHandler) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasTransactionHandlers link between a given TransactionLayerand a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers link in links )
			{
				if ( target.Equals(link.TransactionHandler) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionHandlerReferencesMaintenanceTransactionHandler
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0f73908b-1a45-48ec-a84f-c6c0b59c1f64")]
	public partial class TransactionHandlerReferencesMaintenanceTransactionHandler : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionHandlerReferencesMaintenanceTransactionHandler domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f73908b, 0x1a45, 0x48ec, 0xa8, 0x4f, 0xc6, 0xc0, 0xb5, 0x9c, 0x1f, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionHandlerReferencesMaintenanceTransactionHandler link in the same Partition as the given TransactionHandler
		/// </summary>
		/// <param name="source">TransactionHandler to use as the source of the relationship.</param>
		/// <param name="target">TransactionHandler to use as the target of the relationship.</param>
		public TransactionHandlerReferencesMaintenanceTransactionHandler(TransactionHandler source, TransactionHandler target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionHandlerReferencesMaintenanceTransactionHandler.TargetMaintenanceTransactionHandlerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesMaintenanceTransactionHandler(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesMaintenanceTransactionHandler(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesMaintenanceTransactionHandler(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesMaintenanceTransactionHandler(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceMaintenanceTransactionHandler domain role code
		
		/// <summary>
		/// SourceMaintenanceTransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceMaintenanceTransactionHandlerDomainRoleId = new global::System.Guid(0x3e10d7df, 0x069d, 0x402b, 0xbb, 0x99, 0x8f, 0x9c, 0xb4, 0x82, 0xbe, 0x5d);
		
		/// <summary>
		/// DomainRole SourceMaintenanceTransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/SourceMaintenanceTransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/SourceMaintenanceTransactionHandler.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/SourceMaintenanceTransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MaintenanceTransactionHandler", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/SourceMaintenanceTransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3e10d7df-069d-402b-bb99-8f9cb482be5d")]
		public virtual TransactionHandler SourceMaintenanceTransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceMaintenanceTransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceMaintenanceTransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CallerTransactionHandlers of a TransactionHandler
		/// <summary>
		/// Gets a list of CallerTransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetCallerTransactionHandlers(TransactionHandler element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, TargetMaintenanceTransactionHandlerDomainRoleId);
		}
		#endregion
		#region TargetMaintenanceTransactionHandler domain role code
		
		/// <summary>
		/// TargetMaintenanceTransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetMaintenanceTransactionHandlerDomainRoleId = new global::System.Guid(0x9544f998, 0x2983, 0x4cb0, 0x87, 0x0b, 0x83, 0x66, 0x4e, 0x11, 0x5a, 0xa3);
		
		/// <summary>
		/// DomainRole TargetMaintenanceTransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.TargetMaintenanceTransactionHandler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/TargetMaintenanceTransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/TargetMaintenanceTransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CallerTransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/TargetMaintenanceTransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9544f998-2983-4cb0-870b-83664e115aa3")]
		public virtual TransactionHandler TargetMaintenanceTransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetMaintenanceTransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetMaintenanceTransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MaintenanceTransactionHandler of a TransactionHandler
		/// <summary>
		/// Gets MaintenanceTransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionHandler GetMaintenanceTransactionHandler(TransactionHandler element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceMaintenanceTransactionHandlerDomainRoleId) as TransactionHandler;
		}
		
		/// <summary>
		/// Sets MaintenanceTransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMaintenanceTransactionHandler(TransactionHandler element, TransactionHandler newTargetMaintenanceTransactionHandler)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceMaintenanceTransactionHandlerDomainRoleId, newTargetMaintenanceTransactionHandler);
		}
		#endregion
		#region HasCustomCode domain property code
		
		/// <summary>
		/// HasCustomCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasCustomCodeDomainPropertyId = new global::System.Guid(0x97abbacd, 0x248c, 0x4b6f, 0x85, 0x1c, 0xe1, 0x72, 0x80, 0xc8, 0x04, 0xc3);
		
		/// <summary>
		/// Storage for HasCustomCode
		/// </summary>
		private global::System.Boolean hasCustomCodePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasCustomCode domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.Has Custom Code
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/HasCustomCode.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler/HasCustomCode.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("97abbacd-248c-4b6f-851c-e17280c804c3")]
		public global::System.Boolean HasCustomCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasCustomCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasCustomCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandlerReferencesMaintenanceTransactionHandler.HasCustomCode domain property.
		/// </summary>
		internal sealed partial class HasCustomCodePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandlerReferencesMaintenanceTransactionHandler, global::System.Boolean>
		{
			private HasCustomCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandlerReferencesMaintenanceTransactionHandler.HasCustomCode domain property value handler.
			/// </summary>
			public static readonly HasCustomCodePropertyHandler Instance = new HasCustomCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandlerReferencesMaintenanceTransactionHandler.HasCustomCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasCustomCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(TransactionHandlerReferencesMaintenanceTransactionHandler element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasCustomCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandlerReferencesMaintenanceTransactionHandler element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasCustomCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceMaintenanceTransactionHandler link accessor
		/// <summary>
		/// Get the TransactionHandlerReferencesMaintenanceTransactionHandler link to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler GetLinkToMaintenanceTransactionHandler (global::TransactionKernelDSL.Framework.Language.TransactionHandler sourceMaintenanceTransactionHandlerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler>(sourceMaintenanceTransactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceMaintenanceTransactionHandler not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetMaintenanceTransactionHandler link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesMaintenanceTransactionHandler links to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler> GetLinksToCallerTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.TransactionHandler targetMaintenanceTransactionHandlerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler>(targetMaintenanceTransactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.TargetMaintenanceTransactionHandlerDomainRoleId);
		}
		#endregion
		#region TransactionHandlerReferencesMaintenanceTransactionHandler instance accessors
		
		/// <summary>
		/// Get any TransactionHandlerReferencesMaintenanceTransactionHandler links between a given TransactionHandler and a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler link in links )
			{
				if ( target.Equals(link.TargetMaintenanceTransactionHandler) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionHandlerReferencesMaintenanceTransactionHandler link between a given TransactionHandlerand a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler GetLink( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler link in links )
			{
				if ( target.Equals(link.TargetMaintenanceTransactionHandler) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship InputTransactionEngineReferencesTransactionHandlers
	/// Description for
	/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cccaedc8-5942-46f0-895b-eed583dcd8ac")]
	public partial class InputTransactionEngineReferencesTransactionHandlers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InputTransactionEngineReferencesTransactionHandlers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcccaedc8, 0x5942, 0x46f0, 0x89, 0x5b, 0xee, 0xd5, 0x83, 0xdc, 0xd8, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InputTransactionEngineReferencesTransactionHandlers link in the same Partition as the given InputTransactionEngine
		/// </summary>
		/// <param name="source">InputTransactionEngine to use as the source of the relationship.</param>
		/// <param name="target">TransactionHandler to use as the target of the relationship.</param>
		public InputTransactionEngineReferencesTransactionHandlers(InputTransactionEngine source, TransactionHandler target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngineDomainRoleId, source), new DslModeling::RoleAssignment(InputTransactionEngineReferencesTransactionHandlers.TransactionHandlerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InputTransactionEngineReferencesTransactionHandlers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InputTransactionEngineReferencesTransactionHandlers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InputTransactionEngineReferencesTransactionHandlers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InputTransactionEngineReferencesTransactionHandlers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InputTransactionEngine domain role code
		
		/// <summary>
		/// InputTransactionEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputTransactionEngineDomainRoleId = new global::System.Guid(0x0b15726d, 0x41ce, 0x4124, 0xae, 0x0c, 0x9f, 0x9a, 0x4e, 0x61, 0x28, 0xfb);
		
		/// <summary>
		/// DomainRole InputTransactionEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/InputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/InputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/InputTransactionEngine.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0b15726d-41ce-4124-ae0c-9f9a4e6128fb")]
		public virtual InputTransactionEngine InputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InputTransactionEngine)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputTransactionEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputTransactionEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputTransactionEngine of a TransactionHandler
		/// <summary>
		/// Gets InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InputTransactionEngine GetInputTransactionEngine(TransactionHandler element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionHandlerDomainRoleId) as InputTransactionEngine;
		}
		
		/// <summary>
		/// Sets InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputTransactionEngine(TransactionHandler element, InputTransactionEngine newInputTransactionEngine)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionHandlerDomainRoleId, newInputTransactionEngine);
		}
		#endregion
		#region TransactionHandler domain role code
		
		/// <summary>
		/// TransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionHandlerDomainRoleId = new global::System.Guid(0x015ed648, 0x8b9c, 0x4ed0, 0xad, 0x86, 0x72, 0x2e, 0x80, 0x52, 0xaf, 0xcf);
		
		/// <summary>
		/// DomainRole TransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.TransactionHandler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/TransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/TransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InputTransactionEngine", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/TransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("015ed648-8b9c-4ed0-ad86-722e8052afcf")]
		public virtual TransactionHandler TransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionHandlers of a InputTransactionEngine
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetTransactionHandlers(InputTransactionEngine element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, InputTransactionEngineDomainRoleId);
		}
		#endregion
		#region HasCustomCode domain property code
		
		/// <summary>
		/// HasCustomCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasCustomCodeDomainPropertyId = new global::System.Guid(0x162b9a19, 0x9103, 0x4582, 0xbf, 0x74, 0x4c, 0xf2, 0x9c, 0x0a, 0x8b, 0x06);
		
		/// <summary>
		/// Storage for HasCustomCode
		/// </summary>
		private global::System.Boolean hasCustomCodePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of HasCustomCode domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.Has Custom Code
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/HasCustomCode.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers/HasCustomCode.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("162b9a19-9103-4582-bf74-4cf29c0a8b06")]
		public global::System.Boolean HasCustomCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasCustomCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasCustomCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InputTransactionEngineReferencesTransactionHandlers.HasCustomCode domain property.
		/// </summary>
		internal sealed partial class HasCustomCodePropertyHandler : DslModeling::DomainPropertyValueHandler<InputTransactionEngineReferencesTransactionHandlers, global::System.Boolean>
		{
			private HasCustomCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InputTransactionEngineReferencesTransactionHandlers.HasCustomCode domain property value handler.
			/// </summary>
			public static readonly HasCustomCodePropertyHandler Instance = new HasCustomCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InputTransactionEngineReferencesTransactionHandlers.HasCustomCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasCustomCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(InputTransactionEngineReferencesTransactionHandlers element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasCustomCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InputTransactionEngineReferencesTransactionHandlers element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasCustomCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InputTransactionEngine link accessor
		/// <summary>
		/// Get the list of InputTransactionEngineReferencesTransactionHandlers links to a InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers> GetLinksToTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.InputTransactionEngine inputTransactionEngineInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers>(inputTransactionEngineInstance, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngineDomainRoleId);
		}
		#endregion
		#region TransactionHandler link accessor
		/// <summary>
		/// Get the InputTransactionEngineReferencesTransactionHandlers link to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers GetLinkToInputTransactionEngine (global::TransactionKernelDSL.Framework.Language.TransactionHandler transactionHandlerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers>(transactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.TransactionHandlerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionHandler not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InputTransactionEngineReferencesTransactionHandlers instance accessors
		
		/// <summary>
		/// Get any InputTransactionEngineReferencesTransactionHandlers links between a given InputTransactionEngine and a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers> GetLinks( global::TransactionKernelDSL.Framework.Language.InputTransactionEngine source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers>(source, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers link in links )
			{
				if ( target.Equals(link.TransactionHandler) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InputTransactionEngineReferencesTransactionHandlers link between a given InputTransactionEngineand a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers GetLink( global::TransactionKernelDSL.Framework.Language.InputTransactionEngine source, global::TransactionKernelDSL.Framework.Language.TransactionHandler target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers>(source, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers link in links )
			{
				if ( target.Equals(link.TransactionHandler) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionHandlerReferencesOutputTransactionEngine
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e084a22f-54fa-46e2-bfe1-0771ffb5ecc1")]
	public partial class TransactionHandlerReferencesOutputTransactionEngine : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionHandlerReferencesOutputTransactionEngine domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe084a22f, 0x54fa, 0x46e2, 0xbf, 0xe1, 0x07, 0x71, 0xff, 0xb5, 0xec, 0xc1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionHandlerReferencesOutputTransactionEngine link in the same Partition as the given TransactionHandler
		/// </summary>
		/// <param name="source">TransactionHandler to use as the source of the relationship.</param>
		/// <param name="target">OutputTransactionEngine to use as the target of the relationship.</param>
		public TransactionHandlerReferencesOutputTransactionEngine(TransactionHandler source, OutputTransactionEngine target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId, source), new DslModeling::RoleAssignment(TransactionHandlerReferencesOutputTransactionEngine.OutputTransactionEngineDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesOutputTransactionEngine(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesOutputTransactionEngine(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesOutputTransactionEngine(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesOutputTransactionEngine(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceTransactionHandlerOutputEngine domain role code
		
		/// <summary>
		/// SourceTransactionHandlerOutputEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceTransactionHandlerOutputEngineDomainRoleId = new global::System.Guid(0x7eb79f19, 0x34dd, 0x4e64, 0x91, 0xda, 0xc7, 0x5f, 0x3d, 0xcf, 0xab, 0x2b);
		
		/// <summary>
		/// DomainRole SourceTransactionHandlerOutputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/SourceTransactionHandlerOutputEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/SourceTransactionHandlerOutputEngine.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/SourceTransactionHandlerOutputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OutputTransactionEngine", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/SourceTransactionHandlerOutputEngine.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7eb79f19-34dd-4e64-91da-c75f3dcfab2b")]
		public virtual TransactionHandler SourceTransactionHandlerOutputEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceTransactionHandlerOutputEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceTransactionHandlerOutputEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceTransactionHandlerOutputEngines of a OutputTransactionEngine
		/// <summary>
		/// Gets a list of SourceTransactionHandlerOutputEngines.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetSourceTransactionHandlerOutputEngines(OutputTransactionEngine element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, OutputTransactionEngineDomainRoleId);
		}
		#endregion
		#region OutputTransactionEngine domain role code
		
		/// <summary>
		/// OutputTransactionEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutputTransactionEngineDomainRoleId = new global::System.Guid(0xad3abf00, 0x963c, 0x40ae, 0xae, 0x83, 0xa6, 0xb1, 0x6c, 0x65, 0x88, 0xac);
		
		/// <summary>
		/// DomainRole OutputTransactionEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.OutputTransactionEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/OutputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/OutputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceTransactionHandlerOutputEngines", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/OutputTransactionEngine.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ad3abf00-963c-40ae-ae83-a6b16c6588ac")]
		public virtual OutputTransactionEngine OutputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutputTransactionEngine)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutputTransactionEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutputTransactionEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutputTransactionEngine of a TransactionHandler
		/// <summary>
		/// Gets OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OutputTransactionEngine GetOutputTransactionEngine(TransactionHandler element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceTransactionHandlerOutputEngineDomainRoleId) as OutputTransactionEngine;
		}
		
		/// <summary>
		/// Sets OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOutputTransactionEngine(TransactionHandler element, OutputTransactionEngine newOutputTransactionEngine)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceTransactionHandlerOutputEngineDomainRoleId, newOutputTransactionEngine);
		}
		#endregion
		#region HasCustomCode domain property code
		
		/// <summary>
		/// HasCustomCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasCustomCodeDomainPropertyId = new global::System.Guid(0x5d5e6595, 0x0eee, 0x4b1d, 0x95, 0x5d, 0xfd, 0xab, 0x51, 0x1c, 0x37, 0x7f);
		
		/// <summary>
		/// Storage for HasCustomCode
		/// </summary>
		private global::System.Boolean hasCustomCodePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of HasCustomCode domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.Has Custom Code
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/HasCustomCode.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine/HasCustomCode.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("5d5e6595-0eee-4b1d-955d-fdab511c377f")]
		public global::System.Boolean HasCustomCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasCustomCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasCustomCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandlerReferencesOutputTransactionEngine.HasCustomCode domain property.
		/// </summary>
		internal sealed partial class HasCustomCodePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandlerReferencesOutputTransactionEngine, global::System.Boolean>
		{
			private HasCustomCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandlerReferencesOutputTransactionEngine.HasCustomCode domain property value handler.
			/// </summary>
			public static readonly HasCustomCodePropertyHandler Instance = new HasCustomCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandlerReferencesOutputTransactionEngine.HasCustomCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasCustomCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(TransactionHandlerReferencesOutputTransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasCustomCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandlerReferencesOutputTransactionEngine element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasCustomCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceTransactionHandlerOutputEngine link accessor
		/// <summary>
		/// Get the TransactionHandlerReferencesOutputTransactionEngine link to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine GetLinkToOutputTransactionEngine (global::TransactionKernelDSL.Framework.Language.TransactionHandler sourceTransactionHandlerOutputEngineInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine>(sourceTransactionHandlerOutputEngineInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceTransactionHandlerOutputEngine not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OutputTransactionEngine link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesOutputTransactionEngine links to a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine> GetLinksToSourceTransactionHandlerOutputEngines ( global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine outputTransactionEngineInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine>(outputTransactionEngineInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.OutputTransactionEngineDomainRoleId);
		}
		#endregion
		#region TransactionHandlerReferencesOutputTransactionEngine instance accessors
		
		/// <summary>
		/// Get any TransactionHandlerReferencesOutputTransactionEngine links between a given TransactionHandler and a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine link in links )
			{
				if ( target.Equals(link.OutputTransactionEngine) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionHandlerReferencesOutputTransactionEngine link between a given TransactionHandlerand a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine GetLink( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine link in links )
			{
				if ( target.Equals(link.OutputTransactionEngine) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasInputTransactionEngines
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("12f6c104-81bf-4114-a454-8b3835ff524c")]
	public partial class TransactionLayerHasInputTransactionEngines : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasInputTransactionEngines domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12f6c104, 0x81bf, 0x4114, 0xa4, 0x54, 0x8b, 0x38, 0x35, 0xff, 0x52, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasInputTransactionEngines link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">InputTransactionEngine to use as the target of the relationship.</param>
		public TransactionLayerHasInputTransactionEngines(TransactionLayer source, InputTransactionEngine target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasInputTransactionEngines(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasInputTransactionEngines(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasInputTransactionEngines(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasInputTransactionEngines(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0x03b75e3d, 0x9092, 0x4baa, 0x88, 0xbc, 0x80, 0xde, 0x61, 0xd4, 0xe8, 0x31);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputTransactionEngines", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("03b75e3d-9092-4baa-88bc-80de61d4e831")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a InputTransactionEngine
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(InputTransactionEngine element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputTransactionEngineDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(InputTransactionEngine element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputTransactionEngineDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region InputTransactionEngine domain role code
		
		/// <summary>
		/// InputTransactionEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputTransactionEngineDomainRoleId = new global::System.Guid(0xdb3737e8, 0x7f67, 0x4dc7, 0x87, 0xbe, 0x05, 0x47, 0x2b, 0x47, 0x4e, 0x1d);
		
		/// <summary>
		/// DomainRole InputTransactionEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines/InputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines/InputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines/InputTransactionEngine.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("db3737e8-7f67-4dc7-87be-05472b474e1d")]
		public virtual InputTransactionEngine InputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InputTransactionEngine)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputTransactionEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputTransactionEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputTransactionEngines of a TransactionLayer
		/// <summary>
		/// Gets a list of InputTransactionEngines.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InputTransactionEngine> GetInputTransactionEngines(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InputTransactionEngine>, InputTransactionEngine>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasInputTransactionEngines links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines> GetLinksToInputTransactionEngines ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId);
		}
		#endregion
		#region InputTransactionEngine link accessor
		/// <summary>
		/// Get the TransactionLayerHasInputTransactionEngines link to a InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.InputTransactionEngine inputTransactionEngineInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines>(inputTransactionEngineInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InputTransactionEngine not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasInputTransactionEngines instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasInputTransactionEngines links between a given TransactionLayer and a InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.InputTransactionEngine target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines link in links )
			{
				if ( target.Equals(link.InputTransactionEngine) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasInputTransactionEngines link between a given TransactionLayerand a InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.InputTransactionEngine target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines link in links )
			{
				if ( target.Equals(link.InputTransactionEngine) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasOutputTransactionEngines
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("023c4cae-9fbb-4d06-8671-e0171677125e")]
	public partial class TransactionLayerHasOutputTransactionEngines : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasOutputTransactionEngines domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x023c4cae, 0x9fbb, 0x4d06, 0x86, 0x71, 0xe0, 0x17, 0x16, 0x77, 0x12, 0x5e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasOutputTransactionEngines link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">OutputTransactionEngine to use as the target of the relationship.</param>
		public TransactionLayerHasOutputTransactionEngines(TransactionLayer source, OutputTransactionEngine target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasOutputTransactionEngines(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasOutputTransactionEngines(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasOutputTransactionEngines(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasOutputTransactionEngines(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0xcc940ffa, 0x9e43, 0x4506, 0x85, 0xa0, 0x87, 0x85, 0x70, 0x3c, 0x71, 0xc6);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OutputTransactionEngines", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc940ffa-9e43-4506-85a0-8785703c71c6")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a OutputTransactionEngine
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(OutputTransactionEngine element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OutputTransactionEngineDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(OutputTransactionEngine element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OutputTransactionEngineDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region OutputTransactionEngine domain role code
		
		/// <summary>
		/// OutputTransactionEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutputTransactionEngineDomainRoleId = new global::System.Guid(0xbad54e51, 0xb71b, 0x4756, 0x84, 0xae, 0xaa, 0x76, 0x37, 0xee, 0x34, 0x91);
		
		/// <summary>
		/// DomainRole OutputTransactionEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines/OutputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines/OutputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines/OutputTransactionEngine.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bad54e51-b71b-4756-84ae-aa7637ee3491")]
		public virtual OutputTransactionEngine OutputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutputTransactionEngine)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutputTransactionEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutputTransactionEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutputTransactionEngines of a TransactionLayer
		/// <summary>
		/// Gets a list of OutputTransactionEngines.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutputTransactionEngine> GetOutputTransactionEngines(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<OutputTransactionEngine>, OutputTransactionEngine>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasOutputTransactionEngines links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines> GetLinksToOutputTransactionEngines ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId);
		}
		#endregion
		#region OutputTransactionEngine link accessor
		/// <summary>
		/// Get the TransactionLayerHasOutputTransactionEngines link to a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine outputTransactionEngineInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines>(outputTransactionEngineInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OutputTransactionEngine not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasOutputTransactionEngines instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasOutputTransactionEngines links between a given TransactionLayer and a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines link in links )
			{
				if ( target.Equals(link.OutputTransactionEngine) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasOutputTransactionEngines link between a given TransactionLayerand a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines link in links )
			{
				if ( target.Equals(link.OutputTransactionEngine) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionHandlerReferencesTransactionSQLServerDataSources
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("110b305f-f948-4bfc-a003-6f5f2e02dbad")]
	public partial class TransactionHandlerReferencesTransactionSQLServerDataSources : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionHandlerReferencesTransactionSQLServerDataSources domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x110b305f, 0xf948, 0x4bfc, 0xa0, 0x03, 0x6f, 0x5f, 0x2e, 0x02, 0xdb, 0xad);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionHandlerReferencesTransactionSQLServerDataSources link in the same Partition as the given TransactionHandler
		/// </summary>
		/// <param name="source">TransactionHandler to use as the source of the relationship.</param>
		/// <param name="target">TransactionSQLServerDataSource to use as the target of the relationship.</param>
		public TransactionHandlerReferencesTransactionSQLServerDataSources(TransactionHandler source, TransactionSQLServerDataSource target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandlerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesTransactionSQLServerDataSources(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesTransactionSQLServerDataSources(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesTransactionSQLServerDataSources(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesTransactionSQLServerDataSources(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionHandler domain role code
		
		/// <summary>
		/// TransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionHandlerDomainRoleId = new global::System.Guid(0x151e78c2, 0xc756, 0x4158, 0x80, 0x06, 0xe0, 0x71, 0xfc, 0x67, 0x8c, 0xc5);
		
		/// <summary>
		/// DomainRole TransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionHandler.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionSQLServerDataSources", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("151e78c2-c756-4158-8006-e071fc678cc5")]
		public virtual TransactionHandler TransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionHandlers of a TransactionSQLServerDataSource
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetTransactionHandlers(TransactionSQLServerDataSource element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, TransactionSQLServerDataSourceDomainRoleId);
		}
		#endregion
		#region TransactionSQLServerDataSource domain role code
		
		/// <summary>
		/// TransactionSQLServerDataSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSQLServerDataSourceDomainRoleId = new global::System.Guid(0xa688c010, 0x4246, 0x47ac, 0xb4, 0x23, 0x3f, 0x7e, 0x94, 0xa2, 0x21, 0x3e);
		
		/// <summary>
		/// DomainRole TransactionSQLServerDataSource
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionSQLServerDataSource
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionSQLServerDataSource.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionSQLServerDataSource.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/TransactionSQLServerDataSource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a688c010-4246-47ac-b423-3f7e94a2213e")]
		public virtual TransactionSQLServerDataSource TransactionSQLServerDataSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSQLServerDataSource)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSQLServerDataSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSQLServerDataSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSQLServerDataSources of a TransactionHandler
		/// <summary>
		/// Gets a list of TransactionSQLServerDataSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionSQLServerDataSource> GetTransactionSQLServerDataSources(TransactionHandler element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionSQLServerDataSource>, TransactionSQLServerDataSource>(element, TransactionHandlerDomainRoleId);
		}
		#endregion
		#region HasCustomCode domain property code
		
		/// <summary>
		/// HasCustomCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasCustomCodeDomainPropertyId = new global::System.Guid(0xfdb98bcc, 0x0bfd, 0x481d, 0xbe, 0x66, 0x62, 0x6e, 0x93, 0x4d, 0xde, 0xda);
		
		/// <summary>
		/// Storage for HasCustomCode
		/// </summary>
		private global::System.Boolean hasCustomCodePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of HasCustomCode domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.Has Custom Code
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/HasCustomCode.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources/HasCustomCode.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("fdb98bcc-0bfd-481d-be66-626e934ddeda")]
		public global::System.Boolean HasCustomCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasCustomCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasCustomCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandlerReferencesTransactionSQLServerDataSources.HasCustomCode domain property.
		/// </summary>
		internal sealed partial class HasCustomCodePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandlerReferencesTransactionSQLServerDataSources, global::System.Boolean>
		{
			private HasCustomCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandlerReferencesTransactionSQLServerDataSources.HasCustomCode domain property value handler.
			/// </summary>
			public static readonly HasCustomCodePropertyHandler Instance = new HasCustomCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandlerReferencesTransactionSQLServerDataSources.HasCustomCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasCustomCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(TransactionHandlerReferencesTransactionSQLServerDataSources element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasCustomCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandlerReferencesTransactionSQLServerDataSources element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasCustomCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionHandler link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesTransactionSQLServerDataSources links to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources> GetLinksToTransactionSQLServerDataSources ( global::TransactionKernelDSL.Framework.Language.TransactionHandler transactionHandlerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources>(transactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandlerDomainRoleId);
		}
		#endregion
		#region TransactionSQLServerDataSource link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesTransactionSQLServerDataSources links to a TransactionSQLServerDataSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources> GetLinksToTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource transactionSQLServerDataSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources>(transactionSQLServerDataSourceInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId);
		}
		#endregion
		#region TransactionHandlerReferencesTransactionSQLServerDataSources instance accessors
		
		/// <summary>
		/// Get any TransactionHandlerReferencesTransactionSQLServerDataSources links between a given TransactionHandler and a TransactionSQLServerDataSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources link in links )
			{
				if ( target.Equals(link.TransactionSQLServerDataSource) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasTransactionSQLServerDataSources
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8aa7ecc6-b997-4cd7-9ae1-ca07ad816586")]
	public partial class TransactionLayerHasTransactionSQLServerDataSources : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasTransactionSQLServerDataSources domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8aa7ecc6, 0xb997, 0x4cd7, 0x9a, 0xe1, 0xca, 0x07, 0xad, 0x81, 0x65, 0x86);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasTransactionSQLServerDataSources link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">TransactionSQLServerDataSource to use as the target of the relationship.</param>
		public TransactionLayerHasTransactionSQLServerDataSources(TransactionLayer source, TransactionSQLServerDataSource target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTransactionSQLServerDataSources(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTransactionSQLServerDataSources(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTransactionSQLServerDataSources(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTransactionSQLServerDataSources(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0x5008847b, 0x86ef, 0x43de, 0x84, 0xe7, 0xfd, 0x1f, 0xef, 0x41, 0x25, 0x6d);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionSQLServerDataSources", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5008847b-86ef-43de-84e7-fd1fef41256d")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a TransactionSQLServerDataSource
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(TransactionSQLServerDataSource element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionSQLServerDataSourceDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(TransactionSQLServerDataSource element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionSQLServerDataSourceDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region TransactionSQLServerDataSource domain role code
		
		/// <summary>
		/// TransactionSQLServerDataSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSQLServerDataSourceDomainRoleId = new global::System.Guid(0x32ee472c, 0xf988, 0x4580, 0xaf, 0xe9, 0xc9, 0x0e, 0x57, 0x5e, 0x23, 0xca);
		
		/// <summary>
		/// DomainRole TransactionSQLServerDataSource
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSource
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources/TransactionSQLServerDataSource.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources/TransactionSQLServerDataSource.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources/TransactionSQLServerDataSource.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("32ee472c-f988-4580-afe9-c90e575e23ca")]
		public virtual TransactionSQLServerDataSource TransactionSQLServerDataSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSQLServerDataSource)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSQLServerDataSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSQLServerDataSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSQLServerDataSources of a TransactionLayer
		/// <summary>
		/// Gets a list of TransactionSQLServerDataSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionSQLServerDataSource> GetTransactionSQLServerDataSources(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionSQLServerDataSource>, TransactionSQLServerDataSource>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasTransactionSQLServerDataSources links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources> GetLinksToTransactionSQLServerDataSources ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionSQLServerDataSource link accessor
		/// <summary>
		/// Get the TransactionLayerHasTransactionSQLServerDataSources link to a TransactionSQLServerDataSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource transactionSQLServerDataSourceInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources>(transactionSQLServerDataSourceInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionSQLServerDataSource not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasTransactionSQLServerDataSources instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasTransactionSQLServerDataSources links between a given TransactionLayer and a TransactionSQLServerDataSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources link in links )
			{
				if ( target.Equals(link.TransactionSQLServerDataSource) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasTransactionSQLServerDataSources link between a given TransactionLayerand a TransactionSQLServerDataSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources link in links )
			{
				if ( target.Equals(link.TransactionSQLServerDataSource) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasOutputTransactionWebServices
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ed9fffc4-4b08-4381-8f64-fcecb297f97e")]
	public partial class TransactionLayerHasOutputTransactionWebServices : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasOutputTransactionWebServices domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xed9fffc4, 0x4b08, 0x4381, 0x8f, 0x64, 0xfc, 0xec, 0xb2, 0x97, 0xf9, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasOutputTransactionWebServices link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">OutputTransactionWebService to use as the target of the relationship.</param>
		public TransactionLayerHasOutputTransactionWebServices(TransactionLayer source, OutputTransactionWebService target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasOutputTransactionWebServices(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasOutputTransactionWebServices(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasOutputTransactionWebServices(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasOutputTransactionWebServices(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0xaf96257e, 0x2001, 0x4903, 0x87, 0xdd, 0x18, 0xd0, 0xf7, 0x83, 0xf4, 0xf2);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OutputTransactionWebServices", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("af96257e-2001-4903-87dd-18d0f783f4f2")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a OutputTransactionWebService
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(OutputTransactionWebService element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OutputTransactionWebServiceDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(OutputTransactionWebService element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OutputTransactionWebServiceDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region OutputTransactionWebService domain role code
		
		/// <summary>
		/// OutputTransactionWebService domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutputTransactionWebServiceDomainRoleId = new global::System.Guid(0x88c3806d, 0x6c7f, 0x4463, 0xac, 0xb6, 0x40, 0xcb, 0x7a, 0x78, 0x72, 0x1f);
		
		/// <summary>
		/// DomainRole OutputTransactionWebService
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebService
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices/OutputTransactionWebService.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices/OutputTransactionWebService.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices/OutputTransactionWebService.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("88c3806d-6c7f-4463-acb6-40cb7a78721f")]
		public virtual OutputTransactionWebService OutputTransactionWebService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutputTransactionWebService)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutputTransactionWebServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutputTransactionWebServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutputTransactionWebServices of a TransactionLayer
		/// <summary>
		/// Gets a list of OutputTransactionWebServices.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutputTransactionWebService> GetOutputTransactionWebServices(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<OutputTransactionWebService>, OutputTransactionWebService>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasOutputTransactionWebServices links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices> GetLinksToOutputTransactionWebServices ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId);
		}
		#endregion
		#region OutputTransactionWebService link accessor
		/// <summary>
		/// Get the TransactionLayerHasOutputTransactionWebServices link to a OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService outputTransactionWebServiceInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices>(outputTransactionWebServiceInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OutputTransactionWebService not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasOutputTransactionWebServices instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasOutputTransactionWebServices links between a given TransactionLayer and a OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices link in links )
			{
				if ( target.Equals(link.OutputTransactionWebService) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasOutputTransactionWebServices link between a given TransactionLayerand a OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices link in links )
			{
				if ( target.Equals(link.OutputTransactionWebService) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionHandlerReferencesOutputTransactionWebService
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1394d0c1-06dc-4e67-a9fa-01e7f1b18516")]
	public partial class TransactionHandlerReferencesOutputTransactionWebService : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionHandlerReferencesOutputTransactionWebService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1394d0c1, 0x06dc, 0x4e67, 0xa9, 0xfa, 0x01, 0xe7, 0xf1, 0xb1, 0x85, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionHandlerReferencesOutputTransactionWebService link in the same Partition as the given TransactionHandler
		/// </summary>
		/// <param name="source">TransactionHandler to use as the source of the relationship.</param>
		/// <param name="target">OutputTransactionWebService to use as the target of the relationship.</param>
		public TransactionHandlerReferencesOutputTransactionWebService(TransactionHandler source, OutputTransactionWebService target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionHandlerReferencesOutputTransactionWebService.OutputTransactionWebServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesOutputTransactionWebService(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesOutputTransactionWebService(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionHandlerReferencesOutputTransactionWebService(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionHandlerReferencesOutputTransactionWebService(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionHandler domain role code
		
		/// <summary>
		/// TransactionHandler domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionHandlerDomainRoleId = new global::System.Guid(0xae0f8b82, 0xd56a, 0x4e5d, 0x95, 0x31, 0x6a, 0x05, 0x7b, 0xf0, 0x7c, 0x6e);
		
		/// <summary>
		/// DomainRole TransactionHandler
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/TransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/TransactionHandler.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/TransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OutputTransactionWebService", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/TransactionHandler.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ae0f8b82-d56a-4e5d-9531-6a057bf07c6e")]
		public virtual TransactionHandler TransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionHandler)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionHandlerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionHandlerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionHandlers of a OutputTransactionWebService
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionHandler> GetTransactionHandlers(OutputTransactionWebService element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(element, OutputTransactionWebServiceDomainRoleId);
		}
		#endregion
		#region OutputTransactionWebService domain role code
		
		/// <summary>
		/// OutputTransactionWebService domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutputTransactionWebServiceDomainRoleId = new global::System.Guid(0xa1a9e913, 0x4b26, 0x4686, 0x8a, 0x25, 0x12, 0xb1, 0x65, 0xdc, 0x8a, 0xd7);
		
		/// <summary>
		/// DomainRole OutputTransactionWebService
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.OutputTransactionWebService
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/OutputTransactionWebService.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/OutputTransactionWebService.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionHandlers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService/OutputTransactionWebService.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a1a9e913-4b26-4686-8a25-12b165dc8ad7")]
		public virtual OutputTransactionWebService OutputTransactionWebService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutputTransactionWebService)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutputTransactionWebServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutputTransactionWebServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutputTransactionWebService of a TransactionHandler
		/// <summary>
		/// Gets OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OutputTransactionWebService GetOutputTransactionWebService(TransactionHandler element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionHandlerDomainRoleId) as OutputTransactionWebService;
		}
		
		/// <summary>
		/// Sets OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOutputTransactionWebService(TransactionHandler element, OutputTransactionWebService newOutputTransactionWebService)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionHandlerDomainRoleId, newOutputTransactionWebService);
		}
		#endregion
		#region TransactionHandler link accessor
		/// <summary>
		/// Get the TransactionHandlerReferencesOutputTransactionWebService link to a TransactionHandler.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService GetLinkToOutputTransactionWebService (global::TransactionKernelDSL.Framework.Language.TransactionHandler transactionHandlerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService>(transactionHandlerInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionHandler not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OutputTransactionWebService link accessor
		/// <summary>
		/// Get the list of TransactionHandlerReferencesOutputTransactionWebService links to a OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService> GetLinksToTransactionHandlers ( global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService outputTransactionWebServiceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService>(outputTransactionWebServiceInstance, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.OutputTransactionWebServiceDomainRoleId);
		}
		#endregion
		#region TransactionHandlerReferencesOutputTransactionWebService instance accessors
		
		/// <summary>
		/// Get any TransactionHandlerReferencesOutputTransactionWebService links between a given TransactionHandler and a OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService link in links )
			{
				if ( target.Equals(link.OutputTransactionWebService) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionHandlerReferencesOutputTransactionWebService link between a given TransactionHandlerand a OutputTransactionWebService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService GetLink( global::TransactionKernelDSL.Framework.Language.TransactionHandler source, global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService>(source, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService link in links )
			{
				if ( target.Equals(link.OutputTransactionWebService) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasTimeTriggers
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("abe4a254-3688-442d-ba87-ee0eb3449bbc")]
	public partial class TransactionLayerHasTimeTriggers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasTimeTriggers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xabe4a254, 0x3688, 0x442d, 0xba, 0x87, 0xee, 0x0e, 0xb3, 0x44, 0x9b, 0xbc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasTimeTriggers link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">TimeTrigger to use as the target of the relationship.</param>
		public TransactionLayerHasTimeTriggers(TransactionLayer source, TimeTrigger target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTimeTriggers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTimeTriggers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTimeTriggers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTimeTriggers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0x0dcb324c, 0x5588, 0x41c4, 0x92, 0xc2, 0x2c, 0xc3, 0x99, 0xa7, 0x31, 0x17);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TimeTriggers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0dcb324c-5588-41c4-92c2-2cc399a73117")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a TimeTrigger
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(TimeTrigger element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TimeTriggerDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(TimeTrigger element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TimeTriggerDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region TimeTrigger domain role code
		
		/// <summary>
		/// TimeTrigger domain role Id.
		/// </summary>
		public static readonly global::System.Guid TimeTriggerDomainRoleId = new global::System.Guid(0x5f8ecdd1, 0x80df, 0x45c5, 0x9f, 0x0e, 0x1b, 0x9e, 0x75, 0x93, 0x27, 0xc5);
		
		/// <summary>
		/// DomainRole TimeTrigger
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTrigger
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers/TimeTrigger.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers/TimeTrigger.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers/TimeTrigger.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5f8ecdd1-80df-45c5-9f0e-1b9e759327c5")]
		public virtual TimeTrigger TimeTrigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TimeTrigger)DslModeling::DomainRoleInfo.GetRolePlayer(this, TimeTriggerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TimeTriggerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TimeTriggers of a TransactionLayer
		/// <summary>
		/// Gets a list of TimeTriggers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TimeTrigger> GetTimeTriggers(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TimeTrigger>, TimeTrigger>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasTimeTriggers links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers> GetLinksToTimeTriggers ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId);
		}
		#endregion
		#region TimeTrigger link accessor
		/// <summary>
		/// Get the TransactionLayerHasTimeTriggers link to a TimeTrigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.TimeTrigger timeTriggerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers>(timeTriggerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TimeTrigger not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasTimeTriggers instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasTimeTriggers links between a given TransactionLayer and a TimeTrigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TimeTrigger target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers link in links )
			{
				if ( target.Equals(link.TimeTrigger) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasTimeTriggers link between a given TransactionLayerand a TimeTrigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TimeTrigger target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers link in links )
			{
				if ( target.Equals(link.TimeTrigger) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship InputTransactionEngineReferencesTimeTriggers
	/// Description for
	/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("795c1576-3149-448c-b732-c23da59085f3")]
	public partial class InputTransactionEngineReferencesTimeTriggers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InputTransactionEngineReferencesTimeTriggers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x795c1576, 0x3149, 0x448c, 0xb7, 0x32, 0xc2, 0x3d, 0xa5, 0x90, 0x85, 0xf3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InputTransactionEngineReferencesTimeTriggers link in the same Partition as the given InputTransactionEngine
		/// </summary>
		/// <param name="source">InputTransactionEngine to use as the source of the relationship.</param>
		/// <param name="target">TimeTrigger to use as the target of the relationship.</param>
		public InputTransactionEngineReferencesTimeTriggers(InputTransactionEngine source, TimeTrigger target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InputTransactionEngineReferencesTimeTriggers.InputTransactionEngineDomainRoleId, source), new DslModeling::RoleAssignment(InputTransactionEngineReferencesTimeTriggers.TimeTriggerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InputTransactionEngineReferencesTimeTriggers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InputTransactionEngineReferencesTimeTriggers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InputTransactionEngineReferencesTimeTriggers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InputTransactionEngineReferencesTimeTriggers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InputTransactionEngine domain role code
		
		/// <summary>
		/// InputTransactionEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputTransactionEngineDomainRoleId = new global::System.Guid(0xf1408161, 0xb7ed, 0x4f0f, 0xa5, 0xf0, 0xd0, 0xae, 0xe5, 0x6c, 0x96, 0x69);
		
		/// <summary>
		/// DomainRole InputTransactionEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.InputTransactionEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers/InputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers/InputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TimeTriggers", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers/InputTransactionEngine.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f1408161-b7ed-4f0f-a5f0-d0aee56c9669")]
		public virtual InputTransactionEngine InputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InputTransactionEngine)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputTransactionEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputTransactionEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputTransactionEngine of a TimeTrigger
		/// <summary>
		/// Gets InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InputTransactionEngine GetInputTransactionEngine(TimeTrigger element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TimeTriggerDomainRoleId) as InputTransactionEngine;
		}
		
		/// <summary>
		/// Sets InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputTransactionEngine(TimeTrigger element, InputTransactionEngine newInputTransactionEngine)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TimeTriggerDomainRoleId, newInputTransactionEngine);
		}
		#endregion
		#region TimeTrigger domain role code
		
		/// <summary>
		/// TimeTrigger domain role Id.
		/// </summary>
		public static readonly global::System.Guid TimeTriggerDomainRoleId = new global::System.Guid(0xdea9cd39, 0x64d8, 0x4e03, 0x98, 0x41, 0x77, 0x21, 0x6b, 0xdd, 0x3b, 0x40);
		
		/// <summary>
		/// DomainRole TimeTrigger
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.TimeTrigger
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers/TimeTrigger.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers/TimeTrigger.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InputTransactionEngine", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers/TimeTrigger.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dea9cd39-64d8-4e03-9841-77216bdd3b40")]
		public virtual TimeTrigger TimeTrigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TimeTrigger)DslModeling::DomainRoleInfo.GetRolePlayer(this, TimeTriggerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TimeTriggerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TimeTriggers of a InputTransactionEngine
		/// <summary>
		/// Gets a list of TimeTriggers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TimeTrigger> GetTimeTriggers(InputTransactionEngine element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TimeTrigger>, TimeTrigger>(element, InputTransactionEngineDomainRoleId);
		}
		#endregion
		#region InputTransactionEngine link accessor
		/// <summary>
		/// Get the list of InputTransactionEngineReferencesTimeTriggers links to a InputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers> GetLinksToTimeTriggers ( global::TransactionKernelDSL.Framework.Language.InputTransactionEngine inputTransactionEngineInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers>(inputTransactionEngineInstance, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.InputTransactionEngineDomainRoleId);
		}
		#endregion
		#region TimeTrigger link accessor
		/// <summary>
		/// Get the InputTransactionEngineReferencesTimeTriggers link to a TimeTrigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers GetLinkToInputTransactionEngine (global::TransactionKernelDSL.Framework.Language.TimeTrigger timeTriggerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers>(timeTriggerInstance, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.TimeTriggerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TimeTrigger not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InputTransactionEngineReferencesTimeTriggers instance accessors
		
		/// <summary>
		/// Get any InputTransactionEngineReferencesTimeTriggers links between a given InputTransactionEngine and a TimeTrigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers> GetLinks( global::TransactionKernelDSL.Framework.Language.InputTransactionEngine source, global::TransactionKernelDSL.Framework.Language.TimeTrigger target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers>(source, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.InputTransactionEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers link in links )
			{
				if ( target.Equals(link.TimeTrigger) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InputTransactionEngineReferencesTimeTriggers link between a given InputTransactionEngineand a TimeTrigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers GetLink( global::TransactionKernelDSL.Framework.Language.InputTransactionEngine source, global::TransactionKernelDSL.Framework.Language.TimeTrigger target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers>(source, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.InputTransactionEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers link in links )
			{
				if ( target.Equals(link.TimeTrigger) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship OutputTransactionEngineReferencesTransactionDataSourceSupport
	/// Description for
	/// TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b3a2fd9f-378b-4392-a38e-897114ac8418")]
	public partial class OutputTransactionEngineReferencesTransactionDataSourceSupport : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OutputTransactionEngineReferencesTransactionDataSourceSupport domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3a2fd9f, 0x378b, 0x4392, 0xa3, 0x8e, 0x89, 0x71, 0x14, 0xac, 0x84, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OutputTransactionEngineReferencesTransactionDataSourceSupport link in the same Partition as the given OutputTransactionEngine
		/// </summary>
		/// <param name="source">OutputTransactionEngine to use as the source of the relationship.</param>
		/// <param name="target">TransactionDataSourceSupport to use as the target of the relationship.</param>
		public OutputTransactionEngineReferencesTransactionDataSourceSupport(OutputTransactionEngine source, TransactionDataSourceSupport target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId, source), new DslModeling::RoleAssignment(OutputTransactionEngineReferencesTransactionDataSourceSupport.TransactionDataSourceSupportDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OutputTransactionEngineReferencesTransactionDataSourceSupport(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OutputTransactionEngineReferencesTransactionDataSourceSupport(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OutputTransactionEngineReferencesTransactionDataSourceSupport(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OutputTransactionEngineReferencesTransactionDataSourceSupport(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OutputTransactionEngine domain role code
		
		/// <summary>
		/// OutputTransactionEngine domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutputTransactionEngineDomainRoleId = new global::System.Guid(0x63efd2f7, 0xde8b, 0x4af7, 0x83, 0x09, 0xe4, 0x12, 0x4e, 0x7c, 0x3e, 0xd4);
		
		/// <summary>
		/// DomainRole OutputTransactionEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngine
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport/OutputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport/OutputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionDataSourceSupport", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport/OutputTransactionEngine.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("63efd2f7-de8b-4af7-8309-e4124e7c3ed4")]
		public virtual OutputTransactionEngine OutputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutputTransactionEngine)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutputTransactionEngineDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutputTransactionEngineDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutputTransactionEngines of a TransactionDataSourceSupport
		/// <summary>
		/// Gets a list of OutputTransactionEngines.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutputTransactionEngine> GetOutputTransactionEngines(TransactionDataSourceSupport element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<OutputTransactionEngine>, OutputTransactionEngine>(element, TransactionDataSourceSupportDomainRoleId);
		}
		#endregion
		#region TransactionDataSourceSupport domain role code
		
		/// <summary>
		/// TransactionDataSourceSupport domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionDataSourceSupportDomainRoleId = new global::System.Guid(0x534151b2, 0x8a4b, 0x41a4, 0xa2, 0xd6, 0x90, 0x75, 0x34, 0x31, 0x34, 0x46);
		
		/// <summary>
		/// DomainRole TransactionDataSourceSupport
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.TransactionDataSourceSupport
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport/TransactionDataSourceSupport.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport/TransactionDataSourceSupport.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OutputTransactionEngines", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport/TransactionDataSourceSupport.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("534151b2-8a4b-41a4-a2d6-907534313446")]
		public virtual TransactionDataSourceSupport TransactionDataSourceSupport
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionDataSourceSupport)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionDataSourceSupportDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionDataSourceSupportDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionDataSourceSupport of a OutputTransactionEngine
		/// <summary>
		/// Gets TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionDataSourceSupport GetTransactionDataSourceSupport(OutputTransactionEngine element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OutputTransactionEngineDomainRoleId) as TransactionDataSourceSupport;
		}
		
		/// <summary>
		/// Sets TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionDataSourceSupport(OutputTransactionEngine element, TransactionDataSourceSupport newTransactionDataSourceSupport)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OutputTransactionEngineDomainRoleId, newTransactionDataSourceSupport);
		}
		#endregion
		#region OutputTransactionEngine link accessor
		/// <summary>
		/// Get the OutputTransactionEngineReferencesTransactionDataSourceSupport link to a OutputTransactionEngine.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport GetLinkToTransactionDataSourceSupport (global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine outputTransactionEngineInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport>(outputTransactionEngineInstance, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OutputTransactionEngine not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionDataSourceSupport link accessor
		/// <summary>
		/// Get the list of OutputTransactionEngineReferencesTransactionDataSourceSupport links to a TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport> GetLinksToOutputTransactionEngines ( global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport transactionDataSourceSupportInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport>(transactionDataSourceSupportInstance, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.TransactionDataSourceSupportDomainRoleId);
		}
		#endregion
		#region OutputTransactionEngineReferencesTransactionDataSourceSupport instance accessors
		
		/// <summary>
		/// Get any OutputTransactionEngineReferencesTransactionDataSourceSupport links between a given OutputTransactionEngine and a TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport> GetLinks( global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine source, global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport>(source, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport link in links )
			{
				if ( target.Equals(link.TransactionDataSourceSupport) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OutputTransactionEngineReferencesTransactionDataSourceSupport link between a given OutputTransactionEngineand a TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport GetLink( global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine source, global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport>(source, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport link in links )
			{
				if ( target.Equals(link.TransactionDataSourceSupport) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionLayerHasTransactionDataSourceSupports
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f520fd62-a80f-4068-b724-32295ca35954")]
	public partial class TransactionLayerHasTransactionDataSourceSupports : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionLayerHasTransactionDataSourceSupports domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf520fd62, 0xa80f, 0x4068, 0xb7, 0x24, 0x32, 0x29, 0x5c, 0xa3, 0x59, 0x54);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionLayerHasTransactionDataSourceSupports link in the same Partition as the given TransactionLayer
		/// </summary>
		/// <param name="source">TransactionLayer to use as the source of the relationship.</param>
		/// <param name="target">TransactionDataSourceSupport to use as the target of the relationship.</param>
		public TransactionLayerHasTransactionDataSourceSupports(TransactionLayer source, TransactionDataSourceSupport target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTransactionDataSourceSupports(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTransactionDataSourceSupports(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionLayerHasTransactionDataSourceSupports(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionLayerHasTransactionDataSourceSupports(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer domain role code
		
		/// <summary>
		/// TransactionLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionLayerDomainRoleId = new global::System.Guid(0x8a764b2c, 0x8e3b, 0x4bdf, 0xa0, 0x2e, 0x9d, 0x88, 0xb4, 0xe5, 0x8a, 0x04);
		
		/// <summary>
		/// DomainRole TransactionLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports/TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports/TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionDataSourceSupports", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports/TransactionLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a764b2c-8e3b-4bdf-a02e-9d88b4e58a04")]
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionLayer of a TransactionDataSourceSupport
		/// <summary>
		/// Gets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionLayer GetTransactionLayer(TransactionDataSourceSupport element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionDataSourceSupportDomainRoleId) as TransactionLayer;
		}
		
		/// <summary>
		/// Sets TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionLayer(TransactionDataSourceSupport element, TransactionLayer newTransactionLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionDataSourceSupportDomainRoleId, newTransactionLayer);
		}
		#endregion
		#region TransactionDataSourceSupport domain role code
		
		/// <summary>
		/// TransactionDataSourceSupport domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionDataSourceSupportDomainRoleId = new global::System.Guid(0x14ae6c59, 0x8809, 0x45d6, 0xa7, 0x2c, 0xf2, 0xd7, 0x65, 0x62, 0x3a, 0xff);
		
		/// <summary>
		/// DomainRole TransactionDataSourceSupport
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupport
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports/TransactionDataSourceSupport.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports/TransactionDataSourceSupport.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports/TransactionDataSourceSupport.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("14ae6c59-8809-45d6-a72c-f2d765623aff")]
		public virtual TransactionDataSourceSupport TransactionDataSourceSupport
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionDataSourceSupport)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionDataSourceSupportDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionDataSourceSupportDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionDataSourceSupports of a TransactionLayer
		/// <summary>
		/// Gets a list of TransactionDataSourceSupports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionDataSourceSupport> GetTransactionDataSourceSupports(TransactionLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionDataSourceSupport>, TransactionDataSourceSupport>(element, TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionLayer link accessor
		/// <summary>
		/// Get the list of TransactionLayerHasTransactionDataSourceSupports links to a TransactionLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports> GetLinksToTransactionDataSourceSupports ( global::TransactionKernelDSL.Framework.Language.TransactionLayer transactionLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports>(transactionLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId);
		}
		#endregion
		#region TransactionDataSourceSupport link accessor
		/// <summary>
		/// Get the TransactionLayerHasTransactionDataSourceSupports link to a TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports GetLinkToTransactionLayer (global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport transactionDataSourceSupportInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports>(transactionDataSourceSupportInstance, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionDataSourceSupport not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionLayerHasTransactionDataSourceSupports instance accessors
		
		/// <summary>
		/// Get any TransactionLayerHasTransactionDataSourceSupports links between a given TransactionLayer and a TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports link in links )
			{
				if ( target.Equals(link.TransactionDataSourceSupport) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionLayerHasTransactionDataSourceSupports link between a given TransactionLayerand a TransactionDataSourceSupport.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports GetLink( global::TransactionKernelDSL.Framework.Language.TransactionLayer source, global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports>(source, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports link in links )
			{
				if ( target.Equals(link.TransactionDataSourceSupport) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionModelHasTransactionEnvironmentLayer
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b978f96a-2d52-4ebb-8878-b9e3c458db78")]
	public partial class TransactionModelHasTransactionEnvironmentLayer : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionModelHasTransactionEnvironmentLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb978f96a, 0x2d52, 0x4ebb, 0x88, 0x78, 0xb9, 0xe3, 0xc4, 0x58, 0xdb, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionModelHasTransactionEnvironmentLayer link in the same Partition as the given TransactionModel
		/// </summary>
		/// <param name="source">TransactionModel to use as the source of the relationship.</param>
		/// <param name="target">TransactionEnvironmentLayer to use as the target of the relationship.</param>
		public TransactionModelHasTransactionEnvironmentLayer(TransactionModel source, TransactionEnvironmentLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId, source), new DslModeling::RoleAssignment(TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionModelHasTransactionEnvironmentLayer(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionModelHasTransactionEnvironmentLayer(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionModelHasTransactionEnvironmentLayer(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionModelHasTransactionEnvironmentLayer(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionModel domain role code
		
		/// <summary>
		/// TransactionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionModelDomainRoleId = new global::System.Guid(0x5fa6734a, 0x0e0f, 0x4114, 0xa1, 0xca, 0x8a, 0x21, 0x3e, 0xa1, 0x79, 0xe0);
		
		/// <summary>
		/// DomainRole TransactionModel
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModel
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer/TransactionModel.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer/TransactionModel.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionEnvironmentLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer/TransactionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5fa6734a-0e0f-4114-a1ca-8a213ea179e0")]
		public virtual TransactionModel TransactionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionModel of a TransactionEnvironmentLayer
		/// <summary>
		/// Gets TransactionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionModel GetTransactionModel(TransactionEnvironmentLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionEnvironmentLayerDomainRoleId) as TransactionModel;
		}
		
		/// <summary>
		/// Sets TransactionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionModel(TransactionEnvironmentLayer element, TransactionModel newTransactionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionEnvironmentLayerDomainRoleId, newTransactionModel);
		}
		#endregion
		#region TransactionEnvironmentLayer domain role code
		
		/// <summary>
		/// TransactionEnvironmentLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionEnvironmentLayerDomainRoleId = new global::System.Guid(0x3585639e, 0x15a0, 0x4ba1, 0x9b, 0x8b, 0x11, 0xe3, 0x8d, 0x13, 0xdf, 0xe5);
		
		/// <summary>
		/// DomainRole TransactionEnvironmentLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer/TransactionEnvironmentLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer/TransactionEnvironmentLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionModel", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer/TransactionEnvironmentLayer.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3585639e-15a0-4ba1-9b8b-11e38d13dfe5")]
		public virtual TransactionEnvironmentLayer TransactionEnvironmentLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionEnvironmentLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionEnvironmentLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionEnvironmentLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionEnvironmentLayer of a TransactionModel
		/// <summary>
		/// Gets TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionEnvironmentLayer GetTransactionEnvironmentLayer(TransactionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionModelDomainRoleId) as TransactionEnvironmentLayer;
		}
		
		/// <summary>
		/// Sets TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionEnvironmentLayer(TransactionModel element, TransactionEnvironmentLayer newTransactionEnvironmentLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionModelDomainRoleId, newTransactionEnvironmentLayer);
		}
		#endregion
		#region TransactionModel link accessor
		/// <summary>
		/// Get the TransactionModelHasTransactionEnvironmentLayer link to a TransactionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer GetLinkToTransactionEnvironmentLayer (global::TransactionKernelDSL.Framework.Language.TransactionModel transactionModelInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer>(transactionModelInstance, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionEnvironmentLayer link accessor
		/// <summary>
		/// Get the TransactionModelHasTransactionEnvironmentLayer link to a TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer GetLinkToTransactionModel (global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer transactionEnvironmentLayerInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer>(transactionEnvironmentLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionEnvironmentLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionModelHasTransactionEnvironmentLayer instance accessors
		
		/// <summary>
		/// Get any TransactionModelHasTransactionEnvironmentLayer links between a given TransactionModel and a TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionModel source, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer>(source, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer link in links )
			{
				if ( target.Equals(link.TransactionEnvironmentLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionModelHasTransactionEnvironmentLayer link between a given TransactionModeland a TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer GetLink( global::TransactionKernelDSL.Framework.Language.TransactionModel source, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer>(source, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer link in links )
			{
				if ( target.Equals(link.TransactionEnvironmentLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainRelationship TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a838994a-0199-40c5-a309-12a3465abb14")]
	public partial class TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa838994a, 0x0199, 0x40c5, 0xa3, 0x09, 0x12, 0xa3, 0x46, 0x5a, 0xbb, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables link in the same Partition as the given TransactionEnvironmentLayer
		/// </summary>
		/// <param name="source">TransactionEnvironmentLayer to use as the source of the relationship.</param>
		/// <param name="target">TransactionEnvironmentSQLServerVariable to use as the target of the relationship.</param>
		public TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables(TransactionEnvironmentLayer source, TransactionEnvironmentSQLServerVariable target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId, source), new DslModeling::RoleAssignment(TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionEnvironmentLayer domain role code
		
		/// <summary>
		/// TransactionEnvironmentLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionEnvironmentLayerDomainRoleId = new global::System.Guid(0x134be3b8, 0xf7d3, 0x4230, 0x96, 0x6a, 0xcc, 0xd0, 0xf9, 0x76, 0x7e, 0xc0);
		
		/// <summary>
		/// DomainRole TransactionEnvironmentLayer
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayer
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables/TransactionEnvironmentLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables/TransactionEnvironmentLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionEnvironmentSQLServerVariables", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables/TransactionEnvironmentLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("134be3b8-f7d3-4230-966a-ccd0f9767ec0")]
		public virtual TransactionEnvironmentLayer TransactionEnvironmentLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionEnvironmentLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionEnvironmentLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionEnvironmentLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionEnvironmentLayer of a TransactionEnvironmentSQLServerVariable
		/// <summary>
		/// Gets TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionEnvironmentLayer GetTransactionEnvironmentLayer(TransactionEnvironmentSQLServerVariable element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionEnvironmentSQLServerVariableDomainRoleId) as TransactionEnvironmentLayer;
		}
		
		/// <summary>
		/// Sets TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionEnvironmentLayer(TransactionEnvironmentSQLServerVariable element, TransactionEnvironmentLayer newTransactionEnvironmentLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionEnvironmentSQLServerVariableDomainRoleId, newTransactionEnvironmentLayer);
		}
		#endregion
		#region TransactionEnvironmentSQLServerVariable domain role code
		
		/// <summary>
		/// TransactionEnvironmentSQLServerVariable domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionEnvironmentSQLServerVariableDomainRoleId = new global::System.Guid(0x6ab5bc1d, 0xfff9, 0x4444, 0x9d, 0xf8, 0x54, 0xd3, 0xef, 0x5d, 0xcc, 0x3d);
		
		/// <summary>
		/// DomainRole TransactionEnvironmentSQLServerVariable
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariable
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables/TransactionEnvironmentSQLServerVariable.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables/TransactionEnvironmentSQLServerVariable.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionEnvironmentLayer", PropertyDisplayNameKey="TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables/TransactionEnvironmentSQLServerVariable.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6ab5bc1d-fff9-4444-9df8-54d3ef5dcc3d")]
		public virtual TransactionEnvironmentSQLServerVariable TransactionEnvironmentSQLServerVariable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionEnvironmentSQLServerVariable)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionEnvironmentSQLServerVariableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionEnvironmentSQLServerVariableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionEnvironmentSQLServerVariables of a TransactionEnvironmentLayer
		/// <summary>
		/// Gets a list of TransactionEnvironmentSQLServerVariables.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionEnvironmentSQLServerVariable> GetTransactionEnvironmentSQLServerVariables(TransactionEnvironmentLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionEnvironmentSQLServerVariable>, TransactionEnvironmentSQLServerVariable>(element, TransactionEnvironmentLayerDomainRoleId);
		}
		#endregion
		#region TransactionEnvironmentLayer link accessor
		/// <summary>
		/// Get the list of TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables links to a TransactionEnvironmentLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables> GetLinksToTransactionEnvironmentSQLServerVariables ( global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer transactionEnvironmentLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables>(transactionEnvironmentLayerInstance, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId);
		}
		#endregion
		#region TransactionEnvironmentSQLServerVariable link accessor
		/// <summary>
		/// Get the TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables link to a TransactionEnvironmentSQLServerVariable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables GetLinkToTransactionEnvironmentLayer (global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable transactionEnvironmentSQLServerVariableInstance)
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables>(transactionEnvironmentSQLServerVariableInstance, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionEnvironmentSQLServerVariable not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables instance accessors
		
		/// <summary>
		/// Get any TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables links between a given TransactionEnvironmentLayer and a TransactionEnvironmentSQLServerVariable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables> GetLinks( global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer source, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable target )
		{
			global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables> outLinks = new global::System.Collections.Generic.List<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables>();
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables>(source, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables link in links )
			{
				if ( target.Equals(link.TransactionEnvironmentSQLServerVariable) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables link between a given TransactionEnvironmentLayerand a TransactionEnvironmentSQLServerVariable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables GetLink( global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer source, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable target )
		{
			global::System.Collections.Generic.IList<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables>(source, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId);
			foreach ( global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables link in links )
			{
				if ( target.Equals(link.TransactionEnvironmentSQLServerVariable) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
