//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainModel TrnxDslDomainModel
	/// Transaction Kernel DSL
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TrnxDslDomainModel.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TrnxDslDomainModel.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("93da2ac6-c95d-4f6b-ba78-30531b1e1250")]
	public partial class TrnxDslDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// TrnxDslDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x93da2ac6, 0xc95d, 0x4f6b, 0xba, 0x78, 0x30, 0x53, 0x1b, 0x1e, 0x12, 0x50);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public TrnxDslDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(TransactionModel),
				typeof(TransactionHandler),
				typeof(TransactionLayer),
				typeof(InputTransactionEngine),
				typeof(OutputTransactionEngine),
				typeof(TransactionEngine),
				typeof(TransactionSQLServerDataSource),
				typeof(TransactionDataSource),
				typeof(TransactionWebService),
				typeof(OutputTransactionWebService),
				typeof(TimeTrigger),
				typeof(TransactionDataSourceSupport),
				typeof(TransactionEnvironmentLayer),
				typeof(TransactionEnvironmentSQLServerVariable),
				typeof(TransactionHandlerReferencesForwarderTransactionHandlers),
				typeof(TransactionModelHasTransactionLayers),
				typeof(TransactionLayerHasTransactionHandlers),
				typeof(TransactionHandlerReferencesMaintenanceTransactionHandler),
				typeof(InputTransactionEngineReferencesTransactionHandlers),
				typeof(TransactionHandlerReferencesOutputTransactionEngine),
				typeof(TransactionLayerHasInputTransactionEngines),
				typeof(TransactionLayerHasOutputTransactionEngines),
				typeof(TransactionHandlerReferencesTransactionSQLServerDataSources),
				typeof(TransactionLayerHasTransactionSQLServerDataSources),
				typeof(TransactionLayerHasOutputTransactionWebServices),
				typeof(TransactionHandlerReferencesOutputTransactionWebService),
				typeof(TransactionLayerHasTimeTriggers),
				typeof(InputTransactionEngineReferencesTimeTriggers),
				typeof(OutputTransactionEngineReferencesTransactionDataSourceSupport),
				typeof(TransactionLayerHasTransactionDataSourceSupports),
				typeof(TransactionModelHasTransactionEnvironmentLayer),
				typeof(TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables),
				typeof(TrnxDslDiagram),
				typeof(TransactionHandlerForwardingLinkConnector),
				typeof(OutputTransactionEngineReferencesTransactionHandlersLinkConnector),
				typeof(TransactionHandlerMaintenanceLinkConnector),
				typeof(TransactionSQLServerDataSourceLinkConnector),
				typeof(InputTransactionEngineReferencesTransactionHandlersLinkConnector),
				typeof(OutputTransactionWebServiceLinkConnector),
				typeof(TimeTriggerLinkConnector),
				typeof(TransactionDataSourceSupportForOutputEngineLink),
				typeof(TransactionLayerSwimLane),
				typeof(TransactionEnvironmentLayerSwimLane),
				typeof(TransactionHandlerShape),
				typeof(TransactionDataSourceShape),
				typeof(OutputTransactionWebServiceShape),
				typeof(TimeTriggerShape),
				typeof(TransactionDataSourceSupportShape),
				typeof(TransactionEnvironmentSQLServerVariableShape),
				typeof(InputTransactionEngineShape),
				typeof(OutputTransactionEngineShape),
				typeof(TimeTriggerImageShape),
				typeof(global::TransactionKernelDSL.Framework.Language.FixUpDiagram),
				typeof(global::TransactionKernelDSL.Framework.Language.DecoratorPropertyChanged),
				typeof(global::TransactionKernelDSL.Framework.Language.ConnectorRolePlayerChanged),
				typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemAddRule),
				typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemDeleteRule),
				typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemRolePlayerChangeRule),
				typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(TransactionModel), "Name", TransactionModel.NameDomainPropertyId, typeof(TransactionModel.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "InstanceId", TransactionModel.InstanceIdDomainPropertyId, typeof(TransactionModel.InstanceIdPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "Namespace", TransactionModel.NamespaceDomainPropertyId, typeof(TransactionModel.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "GetValueImplementationType", TransactionModel.GetValueImplementationTypeDomainPropertyId, typeof(TransactionModel.GetValueImplementationTypePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "SequenceFactoryImplementationType", TransactionModel.SequenceFactoryImplementationTypeDomainPropertyId, typeof(TransactionModel.SequenceFactoryImplementationTypePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "DatabaseServerInstance", TransactionModel.DatabaseServerInstanceDomainPropertyId, typeof(TransactionModel.DatabaseServerInstancePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "DatabaseInitialCatalog", TransactionModel.DatabaseInitialCatalogDomainPropertyId, typeof(TransactionModel.DatabaseInitialCatalogPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "DatabaseUser", TransactionModel.DatabaseUserDomainPropertyId, typeof(TransactionModel.DatabaseUserPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "DatabasePassword", TransactionModel.DatabasePasswordDomainPropertyId, typeof(TransactionModel.DatabasePasswordPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "SatelliteInstances", TransactionModel.SatelliteInstancesDomainPropertyId, typeof(TransactionModel.SatelliteInstancesPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionModel), "ScriptVersion", TransactionModel.ScriptVersionDomainPropertyId, typeof(TransactionModel.ScriptVersionPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandler), "Name", TransactionHandler.NameDomainPropertyId, typeof(TransactionHandler.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandler), "TransactionId", TransactionHandler.TransactionIdDomainPropertyId, typeof(TransactionHandler.TransactionIdPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandler), "LoggerName", TransactionHandler.LoggerNameDomainPropertyId, typeof(TransactionHandler.LoggerNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionLayer), "Name", TransactionLayer.NameDomainPropertyId, typeof(TransactionLayer.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionLayer), "Level", TransactionLayer.LevelDomainPropertyId, typeof(TransactionLayer.LevelPropertyHandler)),
				new DomainMemberInfo(typeof(InputTransactionEngine), "HasUnitTests", InputTransactionEngine.HasUnitTestsDomainPropertyId, typeof(InputTransactionEngine.HasUnitTestsPropertyHandler)),
				new DomainMemberInfo(typeof(InputTransactionEngine), "Type", InputTransactionEngine.TypeDomainPropertyId, typeof(InputTransactionEngine.TypePropertyHandler)),
				new DomainMemberInfo(typeof(InputTransactionEngine), "GeneratesSequenceNumber", InputTransactionEngine.GeneratesSequenceNumberDomainPropertyId, typeof(InputTransactionEngine.GeneratesSequenceNumberPropertyHandler)),
				new DomainMemberInfo(typeof(OutputTransactionEngine), "Type", OutputTransactionEngine.TypeDomainPropertyId, typeof(OutputTransactionEngine.TypePropertyHandler)),
				new DomainMemberInfo(typeof(OutputTransactionEngine), "EngineLoggerName", OutputTransactionEngine.EngineLoggerNameDomainPropertyId, typeof(OutputTransactionEngine.EngineLoggerNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEngine), "Name", TransactionEngine.NameDomainPropertyId, typeof(TransactionEngine.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEngine), "AutoStarts", TransactionEngine.AutoStartsDomainPropertyId, typeof(TransactionEngine.AutoStartsPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEngine), "Parser", TransactionEngine.ParserDomainPropertyId, typeof(TransactionEngine.ParserPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEngine), "ParserSectionName", TransactionEngine.ParserSectionNameDomainPropertyId, typeof(TransactionEngine.ParserSectionNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEngine), "LoggerName", TransactionEngine.LoggerNameDomainPropertyId, typeof(TransactionEngine.LoggerNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEngine), "ParserLoggerName", TransactionEngine.ParserLoggerNameDomainPropertyId, typeof(TransactionEngine.ParserLoggerNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSQLServerDataSource), "InstanceName", TransactionSQLServerDataSource.InstanceNameDomainPropertyId, typeof(TransactionSQLServerDataSource.InstanceNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSQLServerDataSource), "DatabaseName", TransactionSQLServerDataSource.DatabaseNameDomainPropertyId, typeof(TransactionSQLServerDataSource.DatabaseNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSQLServerDataSource), "ConnectionString", TransactionSQLServerDataSource.ConnectionStringDomainPropertyId, typeof(TransactionSQLServerDataSource.ConnectionStringPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSQLServerDataSource), "StoredProcedure", TransactionSQLServerDataSource.StoredProcedureDomainPropertyId, typeof(TransactionSQLServerDataSource.StoredProcedurePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSQLServerDataSource), "ExecutedOnStage", TransactionSQLServerDataSource.ExecutedOnStageDomainPropertyId, typeof(TransactionSQLServerDataSource.ExecutedOnStagePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionDataSource), "Name", TransactionDataSource.NameDomainPropertyId, typeof(TransactionDataSource.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionDataSource), "StepOrder", TransactionDataSource.StepOrderDomainPropertyId, typeof(TransactionDataSource.StepOrderPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionWebService), "Name", TransactionWebService.NameDomainPropertyId, typeof(TransactionWebService.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionWebService), "WebServiceClassName", TransactionWebService.WebServiceClassNameDomainPropertyId, typeof(TransactionWebService.WebServiceClassNamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionWebService), "Url", TransactionWebService.UrlDomainPropertyId, typeof(TransactionWebService.UrlPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionWebService), "ArchitecturalPattern", TransactionWebService.ArchitecturalPatternDomainPropertyId, typeof(TransactionWebService.ArchitecturalPatternPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionWebService), "Technology", TransactionWebService.TechnologyDomainPropertyId, typeof(TransactionWebService.TechnologyPropertyHandler)),
				new DomainMemberInfo(typeof(TimeTrigger), "Name", TimeTrigger.NameDomainPropertyId, typeof(TimeTrigger.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionDataSourceSupport), "Name", TransactionDataSourceSupport.NameDomainPropertyId, typeof(TransactionDataSourceSupport.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionDataSourceSupport), "SupportType", TransactionDataSourceSupport.SupportTypeDomainPropertyId, typeof(TransactionDataSourceSupport.SupportTypePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEnvironmentLayer), "Name", TransactionEnvironmentLayer.NameDomainPropertyId, typeof(TransactionEnvironmentLayer.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEnvironmentSQLServerVariable), "Name", TransactionEnvironmentSQLServerVariable.NameDomainPropertyId, typeof(TransactionEnvironmentSQLServerVariable.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionEnvironmentSQLServerVariable), "DefaultValue", TransactionEnvironmentSQLServerVariable.DefaultValueDomainPropertyId, typeof(TransactionEnvironmentSQLServerVariable.DefaultValuePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandlerReferencesForwarderTransactionHandlers), "IsRoutingLink", TransactionHandlerReferencesForwarderTransactionHandlers.IsRoutingLinkDomainPropertyId, typeof(TransactionHandlerReferencesForwarderTransactionHandlers.IsRoutingLinkPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandlerReferencesForwarderTransactionHandlers), "SequenceOrder", TransactionHandlerReferencesForwarderTransactionHandlers.SequenceOrderDomainPropertyId, typeof(TransactionHandlerReferencesForwarderTransactionHandlers.SequenceOrderPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandlerReferencesMaintenanceTransactionHandler), "HasCustomCode", TransactionHandlerReferencesMaintenanceTransactionHandler.HasCustomCodeDomainPropertyId, typeof(TransactionHandlerReferencesMaintenanceTransactionHandler.HasCustomCodePropertyHandler)),
				new DomainMemberInfo(typeof(InputTransactionEngineReferencesTransactionHandlers), "HasCustomCode", InputTransactionEngineReferencesTransactionHandlers.HasCustomCodeDomainPropertyId, typeof(InputTransactionEngineReferencesTransactionHandlers.HasCustomCodePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandlerReferencesOutputTransactionEngine), "HasCustomCode", TransactionHandlerReferencesOutputTransactionEngine.HasCustomCodeDomainPropertyId, typeof(TransactionHandlerReferencesOutputTransactionEngine.HasCustomCodePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionHandlerReferencesTransactionSQLServerDataSources), "HasCustomCode", TransactionHandlerReferencesTransactionSQLServerDataSources.HasCustomCodeDomainPropertyId, typeof(TransactionHandlerReferencesTransactionSQLServerDataSources.HasCustomCodePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesForwarderTransactionHandlers), "SourceForwardingTransactionHandler", TransactionHandlerReferencesForwarderTransactionHandlers.SourceForwardingTransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesForwarderTransactionHandlers), "TargetForwardingTransactionHandler", TransactionHandlerReferencesForwarderTransactionHandlers.TargetForwardingTransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionModelHasTransactionLayers), "TransactionModel", TransactionModelHasTransactionLayers.TransactionModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionModelHasTransactionLayers), "TransactionLayer", TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTransactionHandlers), "TransactionLayer", TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTransactionHandlers), "TransactionHandler", TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesMaintenanceTransactionHandler), "SourceMaintenanceTransactionHandler", TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesMaintenanceTransactionHandler), "TargetMaintenanceTransactionHandler", TransactionHandlerReferencesMaintenanceTransactionHandler.TargetMaintenanceTransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(InputTransactionEngineReferencesTransactionHandlers), "InputTransactionEngine", InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(InputTransactionEngineReferencesTransactionHandlers), "TransactionHandler", InputTransactionEngineReferencesTransactionHandlers.TransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesOutputTransactionEngine), "SourceTransactionHandlerOutputEngine", TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesOutputTransactionEngine), "OutputTransactionEngine", TransactionHandlerReferencesOutputTransactionEngine.OutputTransactionEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasInputTransactionEngines), "TransactionLayer", TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasInputTransactionEngines), "InputTransactionEngine", TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasOutputTransactionEngines), "TransactionLayer", TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasOutputTransactionEngines), "OutputTransactionEngine", TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesTransactionSQLServerDataSources), "TransactionHandler", TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesTransactionSQLServerDataSources), "TransactionSQLServerDataSource", TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTransactionSQLServerDataSources), "TransactionLayer", TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTransactionSQLServerDataSources), "TransactionSQLServerDataSource", TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasOutputTransactionWebServices), "TransactionLayer", TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasOutputTransactionWebServices), "OutputTransactionWebService", TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesOutputTransactionWebService), "TransactionHandler", TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionHandlerReferencesOutputTransactionWebService), "OutputTransactionWebService", TransactionHandlerReferencesOutputTransactionWebService.OutputTransactionWebServiceDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTimeTriggers), "TransactionLayer", TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTimeTriggers), "TimeTrigger", TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId),
				new DomainRolePlayerInfo(typeof(InputTransactionEngineReferencesTimeTriggers), "InputTransactionEngine", InputTransactionEngineReferencesTimeTriggers.InputTransactionEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(InputTransactionEngineReferencesTimeTriggers), "TimeTrigger", InputTransactionEngineReferencesTimeTriggers.TimeTriggerDomainRoleId),
				new DomainRolePlayerInfo(typeof(OutputTransactionEngineReferencesTransactionDataSourceSupport), "OutputTransactionEngine", OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId),
				new DomainRolePlayerInfo(typeof(OutputTransactionEngineReferencesTransactionDataSourceSupport), "TransactionDataSourceSupport", OutputTransactionEngineReferencesTransactionDataSourceSupport.TransactionDataSourceSupportDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTransactionDataSourceSupports), "TransactionLayer", TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionLayerHasTransactionDataSourceSupports), "TransactionDataSourceSupport", TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionModelHasTransactionEnvironmentLayer), "TransactionModel", TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionModelHasTransactionEnvironmentLayer), "TransactionEnvironmentLayer", TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables), "TransactionEnvironmentLayer", TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables), "TransactionEnvironmentSQLServerVariable", TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(34);
				createElementMap.Add(typeof(TransactionModel), 0);
				createElementMap.Add(typeof(TransactionHandler), 1);
				createElementMap.Add(typeof(TransactionLayer), 2);
				createElementMap.Add(typeof(InputTransactionEngine), 3);
				createElementMap.Add(typeof(OutputTransactionEngine), 4);
				createElementMap.Add(typeof(TransactionEngine), 5);
				createElementMap.Add(typeof(TransactionSQLServerDataSource), 6);
				createElementMap.Add(typeof(TransactionDataSource), 7);
				createElementMap.Add(typeof(TransactionWebService), 8);
				createElementMap.Add(typeof(OutputTransactionWebService), 9);
				createElementMap.Add(typeof(TimeTrigger), 10);
				createElementMap.Add(typeof(TransactionDataSourceSupport), 11);
				createElementMap.Add(typeof(TransactionEnvironmentLayer), 12);
				createElementMap.Add(typeof(TransactionEnvironmentSQLServerVariable), 13);
				createElementMap.Add(typeof(TrnxDslDiagram), 14);
				createElementMap.Add(typeof(TransactionHandlerForwardingLinkConnector), 15);
				createElementMap.Add(typeof(OutputTransactionEngineReferencesTransactionHandlersLinkConnector), 16);
				createElementMap.Add(typeof(TransactionHandlerMaintenanceLinkConnector), 17);
				createElementMap.Add(typeof(TransactionSQLServerDataSourceLinkConnector), 18);
				createElementMap.Add(typeof(InputTransactionEngineReferencesTransactionHandlersLinkConnector), 19);
				createElementMap.Add(typeof(OutputTransactionWebServiceLinkConnector), 20);
				createElementMap.Add(typeof(TimeTriggerLinkConnector), 21);
				createElementMap.Add(typeof(TransactionDataSourceSupportForOutputEngineLink), 22);
				createElementMap.Add(typeof(TransactionLayerSwimLane), 23);
				createElementMap.Add(typeof(TransactionEnvironmentLayerSwimLane), 24);
				createElementMap.Add(typeof(TransactionHandlerShape), 25);
				createElementMap.Add(typeof(TransactionDataSourceShape), 26);
				createElementMap.Add(typeof(OutputTransactionWebServiceShape), 27);
				createElementMap.Add(typeof(TimeTriggerShape), 28);
				createElementMap.Add(typeof(TransactionDataSourceSupportShape), 29);
				createElementMap.Add(typeof(TransactionEnvironmentSQLServerVariableShape), 30);
				createElementMap.Add(typeof(InputTransactionEngineShape), 31);
				createElementMap.Add(typeof(OutputTransactionEngineShape), 32);
				createElementMap.Add(typeof(TimeTriggerImageShape), 33);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new TransactionModel(partition, propertyAssignments);
				case 1: return new TransactionHandler(partition, propertyAssignments);
				case 2: return new TransactionLayer(partition, propertyAssignments);
				case 3: return new InputTransactionEngine(partition, propertyAssignments);
				case 4: return new OutputTransactionEngine(partition, propertyAssignments);
				case 5: return new TransactionEngine(partition, propertyAssignments);
				case 6: return new TransactionSQLServerDataSource(partition, propertyAssignments);
				case 7: return new TransactionDataSource(partition, propertyAssignments);
				case 8: return new TransactionWebService(partition, propertyAssignments);
				case 9: return new OutputTransactionWebService(partition, propertyAssignments);
				case 10: return new TimeTrigger(partition, propertyAssignments);
				case 11: return new TransactionDataSourceSupport(partition, propertyAssignments);
				case 12: return new TransactionEnvironmentLayer(partition, propertyAssignments);
				case 13: return new TransactionEnvironmentSQLServerVariable(partition, propertyAssignments);
				case 14: return new TrnxDslDiagram(partition, propertyAssignments);
				case 15: return new TransactionHandlerForwardingLinkConnector(partition, propertyAssignments);
				case 16: return new OutputTransactionEngineReferencesTransactionHandlersLinkConnector(partition, propertyAssignments);
				case 17: return new TransactionHandlerMaintenanceLinkConnector(partition, propertyAssignments);
				case 18: return new TransactionSQLServerDataSourceLinkConnector(partition, propertyAssignments);
				case 19: return new InputTransactionEngineReferencesTransactionHandlersLinkConnector(partition, propertyAssignments);
				case 20: return new OutputTransactionWebServiceLinkConnector(partition, propertyAssignments);
				case 21: return new TimeTriggerLinkConnector(partition, propertyAssignments);
				case 22: return new TransactionDataSourceSupportForOutputEngineLink(partition, propertyAssignments);
				case 23: return new TransactionLayerSwimLane(partition, propertyAssignments);
				case 24: return new TransactionEnvironmentLayerSwimLane(partition, propertyAssignments);
				case 25: return new TransactionHandlerShape(partition, propertyAssignments);
				case 26: return new TransactionDataSourceShape(partition, propertyAssignments);
				case 27: return new OutputTransactionWebServiceShape(partition, propertyAssignments);
				case 28: return new TimeTriggerShape(partition, propertyAssignments);
				case 29: return new TransactionDataSourceSupportShape(partition, propertyAssignments);
				case 30: return new TransactionEnvironmentSQLServerVariableShape(partition, propertyAssignments);
				case 31: return new InputTransactionEngineShape(partition, propertyAssignments);
				case 32: return new OutputTransactionEngineShape(partition, propertyAssignments);
				case 33: return new TimeTriggerImageShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(18);
				createElementLinkMap.Add(typeof(TransactionHandlerReferencesForwarderTransactionHandlers), 0);
				createElementLinkMap.Add(typeof(TransactionModelHasTransactionLayers), 1);
				createElementLinkMap.Add(typeof(TransactionLayerHasTransactionHandlers), 2);
				createElementLinkMap.Add(typeof(TransactionHandlerReferencesMaintenanceTransactionHandler), 3);
				createElementLinkMap.Add(typeof(InputTransactionEngineReferencesTransactionHandlers), 4);
				createElementLinkMap.Add(typeof(TransactionHandlerReferencesOutputTransactionEngine), 5);
				createElementLinkMap.Add(typeof(TransactionLayerHasInputTransactionEngines), 6);
				createElementLinkMap.Add(typeof(TransactionLayerHasOutputTransactionEngines), 7);
				createElementLinkMap.Add(typeof(TransactionHandlerReferencesTransactionSQLServerDataSources), 8);
				createElementLinkMap.Add(typeof(TransactionLayerHasTransactionSQLServerDataSources), 9);
				createElementLinkMap.Add(typeof(TransactionLayerHasOutputTransactionWebServices), 10);
				createElementLinkMap.Add(typeof(TransactionHandlerReferencesOutputTransactionWebService), 11);
				createElementLinkMap.Add(typeof(TransactionLayerHasTimeTriggers), 12);
				createElementLinkMap.Add(typeof(InputTransactionEngineReferencesTimeTriggers), 13);
				createElementLinkMap.Add(typeof(OutputTransactionEngineReferencesTransactionDataSourceSupport), 14);
				createElementLinkMap.Add(typeof(TransactionLayerHasTransactionDataSourceSupports), 15);
				createElementLinkMap.Add(typeof(TransactionModelHasTransactionEnvironmentLayer), 16);
				createElementLinkMap.Add(typeof(TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables), 17);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new TransactionHandlerReferencesForwarderTransactionHandlers(partition, roleAssignments, propertyAssignments);
				case 1: return new TransactionModelHasTransactionLayers(partition, roleAssignments, propertyAssignments);
				case 2: return new TransactionLayerHasTransactionHandlers(partition, roleAssignments, propertyAssignments);
				case 3: return new TransactionHandlerReferencesMaintenanceTransactionHandler(partition, roleAssignments, propertyAssignments);
				case 4: return new InputTransactionEngineReferencesTransactionHandlers(partition, roleAssignments, propertyAssignments);
				case 5: return new TransactionHandlerReferencesOutputTransactionEngine(partition, roleAssignments, propertyAssignments);
				case 6: return new TransactionLayerHasInputTransactionEngines(partition, roleAssignments, propertyAssignments);
				case 7: return new TransactionLayerHasOutputTransactionEngines(partition, roleAssignments, propertyAssignments);
				case 8: return new TransactionHandlerReferencesTransactionSQLServerDataSources(partition, roleAssignments, propertyAssignments);
				case 9: return new TransactionLayerHasTransactionSQLServerDataSources(partition, roleAssignments, propertyAssignments);
				case 10: return new TransactionLayerHasOutputTransactionWebServices(partition, roleAssignments, propertyAssignments);
				case 11: return new TransactionHandlerReferencesOutputTransactionWebService(partition, roleAssignments, propertyAssignments);
				case 12: return new TransactionLayerHasTimeTriggers(partition, roleAssignments, propertyAssignments);
				case 13: return new InputTransactionEngineReferencesTimeTriggers(partition, roleAssignments, propertyAssignments);
				case 14: return new OutputTransactionEngineReferencesTransactionDataSourceSupport(partition, roleAssignments, propertyAssignments);
				case 15: return new TransactionLayerHasTransactionDataSourceSupports(partition, roleAssignments, propertyAssignments);
				case 16: return new TransactionModelHasTransactionEnvironmentLayer(partition, roleAssignments, propertyAssignments);
				case 17: return new TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TrnxDslDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (TrnxDslDomainModel.resourceManager == null)
				{
					TrnxDslDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(TrnxDslDomainModel).Assembly);
				}
				return TrnxDslDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return TrnxDslDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return TrnxDslDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (TrnxDslDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new TrnxDslCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					TrnxDslDomainModel.copyClosure = copyFilter;
				}
				return TrnxDslDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (TrnxDslDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new TrnxDslDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					TrnxDslDomainModel.removeClosure = removeFilter;
				}
				return TrnxDslDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::TransactionKernelDSL.Framework.Language.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class TrnxDslDeleteClosure : TrnxDslDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrnxDslDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class TrnxDslDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public TrnxDslDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId, true);
			DomainRoles.Add(global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class TrnxDslCopyClosure : TrnxDslCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrnxDslCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class TrnxDslCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public TrnxDslCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: InputEngineType
	/// Description for TransactionKernelDSL.Framework.Language.InputEngineType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum InputEngineType
	{
		/// <summary>
		/// InputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputEngineType.InputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputEngineType/InputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		InputEngine = 0,
		/// <summary>
		/// ThreadedInputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputEngineType.ThreadedInputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputEngineType/ThreadedInputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		ThreadedInputEngine = 2,
		/// <summary>
		/// TimeTriggeredInputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputEngineType.TimeTriggeredInputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputEngineType/TimeTriggeredInputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		TimeTriggeredInputEngine = 3,
		/// <summary>
		/// TcpTriggeredMultiThreadedInputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputEngineType.TcpTriggeredMultiThreadedInputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputEngineType/TcpTriggeredMultiThreadedInputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		TcpTriggeredMultiThreadedInputEngine = 1,
		/// <summary>
		/// TcpTriggeredSocketReusableMultiThreadedInputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputEngineType.TcpTriggeredSocketReusableMultiThreadedInputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputEngineType/TcpTriggeredSocketReusableMultiThreadedInputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		TcpTriggeredSocketReusableMultiThreadedInputEngine = 4,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: PersistableSourceType
	/// Description for TransactionKernelDSL.Framework.Language.PersistableSourceType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PersistableSourceType
	{
		/// <summary>
		/// SQLServerDatabase
		/// Description for
		/// TransactionKernelDSL.Framework.Language.PersistableSourceType.SQLServerDatabase
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.PersistableSourceType/SQLServerDatabase.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		SQLServerDatabase = 1,
		/// <summary>
		/// NotTyped
		/// Description for
		/// TransactionKernelDSL.Framework.Language.PersistableSourceType.NotTyped
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.PersistableSourceType/NotTyped.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		NotTyped = 0,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: OutputEngineType
	/// Description for TransactionKernelDSL.Framework.Language.OutputEngineType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum OutputEngineType
	{
		/// <summary>
		/// OutputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputEngineType.OutputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputEngineType/OutputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		OutputEngine = 0,
		/// <summary>
		/// FunneledOutputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputEngineType.FunneledOutputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputEngineType/FunneledOutputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		FunneledOutputEngine = 1,
		/// <summary>
		/// StraightOutputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputEngineType.StraightOutputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputEngineType/StraightOutputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		StraightOutputEngine = 2,
		/// <summary>
		/// TcpFunneledOutputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputEngineType.TcpFunneledOutputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputEngineType/TcpFunneledOutputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		TcpFunneledOutputEngine = 3,
		/// <summary>
		/// TcpStraightOutputEngine
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputEngineType.TcpStraightOutputEngine
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputEngineType/TcpStraightOutputEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		TcpStraightOutputEngine = 4,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: PersistableStage
	/// Description for TransactionKernelDSL.Framework.Language.PersistableStage
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PersistableStage
	{
		/// <summary>
		/// PreProcessStage
		/// It defines that the SP will be executed on PreProcessTransaction Method, after
		/// receiving a new requirement from the client
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.PersistableStage/PreProcessStage.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		PreProcessStage = 0,
		/// <summary>
		/// PostProcessStage
		/// It defines that the SP will be executed on PostProcessTransaction Method, after
		/// reply is sent
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.PersistableStage/PostProcessStage.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		PostProcessStage = 1,
		/// <summary>
		/// FinalProcessStage
		/// It defines that the SP will be executed on FinalProcessTransaction Method, after
		/// the reply is sent, and eventual maintenance is finished
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.PersistableStage/FinalProcessStage.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		FinalProcessStage = 2,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: ParserType
	/// Description for TransactionKernelDSL.Framework.Language.ParserType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ParserType
	{
		/// <summary>
		/// NotTyped
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.NotTyped
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/NotTyped.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		NotTyped = 0,
		/// <summary>
		/// Iso8583B24
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.Iso8583B24
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Iso8583B24.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Iso8583B24 = 1,
		/// <summary>
		/// Iso8583
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.Iso8583
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Iso8583.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Iso8583 = 2,
		/// <summary>
		/// Meflur
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.Meflur
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Meflur.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Meflur = 3,
		/// <summary>
		/// PrefixedMeflur
		/// Meflur parser with 2-byte long length prefixing both incoming and outcoming data
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/PrefixedMeflur.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		PrefixedMeflur = 4,
		/// <summary>
		/// PropietaryParser
		/// Description for
		/// TransactionKernelDSL.Framework.Language.ParserType.PropietaryParser
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/PropietaryParser.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		PropietaryParser = -1,
		/// <summary>
		/// Beltran
		/// Parser of Type Beltran
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Beltran.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Beltran = 5,
		/// <summary>
		/// BPosBrowser
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.BPosBrowser
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/BPosBrowser.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		BPosBrowser = 6,
		/// <summary>
		/// Json
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.Json
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Json.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Json = 7,
		/// <summary>
		/// Xml
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.Xml
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Xml.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Xml = 8,
		/// <summary>
		/// Iso8583_1993
		/// Description for TransactionKernelDSL.Framework.Language.ParserType.Iso8583_1993
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.ParserType/Iso8583_1993.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Iso8583_1993 = 9,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: DataSourceSupportType
	/// Description for TransactionKernelDSL.Framework.Language.DataSourceSupportType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DataSourceSupportType
	{
		/// <summary>
		/// NotTyped
		/// Description for
		/// TransactionKernelDSL.Framework.Language.DataSourceSupportType.NotTyped
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.DataSourceSupportType/NotTyped.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		NotTyped = 0,
		/// <summary>
		/// SQLServerSupport
		/// Description for
		/// TransactionKernelDSL.Framework.Language.DataSourceSupportType.SQLServerSupport
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.DataSourceSupportType/SQLServerSupport.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		SQLServerSupport = 1,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: WebServiceArchitecturalPattern
	/// The architectural pattern used for implementing the WS's proxies
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum WebServiceArchitecturalPattern
	{
		/// <summary>
		/// Singleton
		/// There will be just one instance of this output WS.
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.WebServiceArchitecturalPattern/Singleton.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		Singleton = 0,
		/// <summary>
		/// MultipleInstances
		/// There will as many instances as threads using this output WS
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.WebServiceArchitecturalPattern/MultipleInstances.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		MultipleInstances = 1,
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainEnumeration: WebServiceTechnology
	/// Technology used by the remote WS implementation.
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum WebServiceTechnology
	{
		/// <summary>
		/// SoapHttpClientProtocol
		/// Technology SoapHttpClientProtocol
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.WebServiceTechnology/SoapHttpClientProtocol.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		SoapHttpClientProtocol = 0,
		/// <summary>
		/// WCF
		/// Technology WCF
		/// </summary>
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.WebServiceTechnology/WCF.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		WCF = 1,
	}
}

