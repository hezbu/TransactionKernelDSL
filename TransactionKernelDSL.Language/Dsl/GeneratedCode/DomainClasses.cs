//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2b1c79a1-95d7-4cc7-b958-107b1d7029a7")]
	public partial class TransactionModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2b1c79a1, 0x95d7, 0x4cc7, 0xb9, 0x58, 0x10, 0x7b, 0x1d, 0x70, 0x29, 0xa7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x43282d0a, 0x1a82, 0x477d, 0xaa, 0x3e, 0x9e, 0x1d, 0x4d, 0xe9, 0x5f, 0xc1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Solution's name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/Name.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("43282d0a-1a82-477d-aa3e-9e1d4de95fc1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InstanceId domain property code
		
		/// <summary>
		/// InstanceId domain property Id.
		/// </summary>
		public static readonly global::System.Guid InstanceIdDomainPropertyId = new global::System.Guid(0xc982fae7, 0x3fd2, 0x4a1e, 0xbd, 0xbb, 0x9d, 0xdc, 0x30, 0x64, 0xef, 0x22);
		
		/// <summary>
		/// Storage for InstanceId
		/// </summary>
		private global::System.Int16 instanceIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of InstanceId domain property.
		/// Value to uniquely identify the solution within others
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/InstanceId.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/InstanceId.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/InstanceId.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c982fae7-3fd2-4a1e-bdbb-9ddc3064ef22")]
		public global::System.Int16 InstanceId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return instanceIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InstanceIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.InstanceId domain property.
		/// </summary>
		internal sealed partial class InstanceIdPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.Int16>
		{
			private InstanceIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.InstanceId domain property value handler.
			/// </summary>
			public static readonly InstanceIdPropertyHandler Instance = new InstanceIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.InstanceId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InstanceIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.instanceIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.instanceIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xece9338b, 0x6cf2, 0x408c, 0xb7, 0x53, 0xd4, 0x9a, 0x4d, 0xa1, 0x64, 0x08);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Base namespace that will be used in every generated code file
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/Namespace.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/Namespace.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/Namespace.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ece9338b-6cf2-408c-b753-d49a4da16408")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GetValueImplementationType domain property code
		
		/// <summary>
		/// GetValueImplementationType domain property Id.
		/// </summary>
		public static readonly global::System.Guid GetValueImplementationTypeDomainPropertyId = new global::System.Guid(0x5801b1e8, 0xf032, 0x407a, 0xb5, 0x36, 0x9d, 0x4c, 0x9f, 0xa6, 0xb4, 0xd4);
		
		/// <summary>
		/// Storage for GetValueImplementationType
		/// </summary>
		private PersistableSourceType getValueImplementationTypePropertyStorage = PersistableSourceType.NotTyped;
		
		/// <summary>
		/// Gets or sets the value of GetValueImplementationType domain property.
		/// GetValue() must be implemented somehow in order to catch initial parameters for
		/// the solution to work.
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/GetValueImplementationType.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/GetValueImplementationType.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/GetValueImplementationType.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PersistableSourceType.NotTyped)]
		[DslModeling::DomainObjectId("5801b1e8-f032-407a-b536-9d4c9fa6b4d4")]
		public PersistableSourceType GetValueImplementationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return getValueImplementationTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GetValueImplementationTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.GetValueImplementationType domain property.
		/// </summary>
		internal sealed partial class GetValueImplementationTypePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, PersistableSourceType>
		{
			private GetValueImplementationTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.GetValueImplementationType domain property value handler.
			/// </summary>
			public static readonly GetValueImplementationTypePropertyHandler Instance = new GetValueImplementationTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.GetValueImplementationType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GetValueImplementationTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PersistableSourceType GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.getValueImplementationTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, PersistableSourceType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PersistableSourceType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.getValueImplementationTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SequenceFactoryImplementationType domain property code
		
		/// <summary>
		/// SequenceFactoryImplementationType domain property Id.
		/// </summary>
		public static readonly global::System.Guid SequenceFactoryImplementationTypeDomainPropertyId = new global::System.Guid(0xb88fc4bb, 0xf518, 0x4178, 0x97, 0x4b, 0x02, 0x2d, 0xdd, 0xe5, 0x6f, 0x47);
		
		/// <summary>
		/// Storage for SequenceFactoryImplementationType
		/// </summary>
		private PersistableSourceType sequenceFactoryImplementationTypePropertyStorage = PersistableSourceType.NotTyped;
		
		/// <summary>
		/// Gets or sets the value of SequenceFactoryImplementationType domain property.
		/// SequenceFactory() must be implemented somehow in order to generate trace number
		/// for entrying transactions.
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/SequenceFactoryImplementationType.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/SequenceFactoryImplementationType.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/SequenceFactoryImplementationType.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PersistableSourceType.NotTyped)]
		[DslModeling::DomainObjectId("b88fc4bb-f518-4178-974b-022ddde56f47")]
		public PersistableSourceType SequenceFactoryImplementationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sequenceFactoryImplementationTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SequenceFactoryImplementationTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.SequenceFactoryImplementationType domain property.
		/// </summary>
		internal sealed partial class SequenceFactoryImplementationTypePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, PersistableSourceType>
		{
			private SequenceFactoryImplementationTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.SequenceFactoryImplementationType domain property value handler.
			/// </summary>
			public static readonly SequenceFactoryImplementationTypePropertyHandler Instance = new SequenceFactoryImplementationTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.SequenceFactoryImplementationType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SequenceFactoryImplementationTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PersistableSourceType GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sequenceFactoryImplementationTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, PersistableSourceType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PersistableSourceType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sequenceFactoryImplementationTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseServerInstance domain property code
		
		/// <summary>
		/// DatabaseServerInstance domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseServerInstanceDomainPropertyId = new global::System.Guid(0x30980775, 0x0bc6, 0x40c4, 0xb5, 0x3e, 0x0f, 0xa2, 0x35, 0x92, 0xc3, 0x93);
		
		/// <summary>
		/// Storage for DatabaseServerInstance
		/// </summary>
		private global::System.String databaseServerInstancePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabaseServerInstance domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModel.Database Server
		/// Instance
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseServerInstance.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseServerInstance.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseServerInstance.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("30980775-0bc6-40c4-b53e-0fa23592c393")]
		public global::System.String DatabaseServerInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseServerInstancePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseServerInstancePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.DatabaseServerInstance domain property.
		/// </summary>
		internal sealed partial class DatabaseServerInstancePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private DatabaseServerInstancePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.DatabaseServerInstance domain property value handler.
			/// </summary>
			public static readonly DatabaseServerInstancePropertyHandler Instance = new DatabaseServerInstancePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.DatabaseServerInstance domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseServerInstanceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseServerInstancePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseServerInstancePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseInitialCatalog domain property code
		
		/// <summary>
		/// DatabaseInitialCatalog domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseInitialCatalogDomainPropertyId = new global::System.Guid(0x9f6c2dbe, 0x90d9, 0x486e, 0x8b, 0xa2, 0x1d, 0x35, 0x4a, 0xb2, 0xef, 0x4e);
		
		/// <summary>
		/// Storage for DatabaseInitialCatalog
		/// </summary>
		private global::System.String databaseInitialCatalogPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabaseInitialCatalog domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModel.Database Initial
		/// Catalog
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseInitialCatalog.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseInitialCatalog.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseInitialCatalog.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9f6c2dbe-90d9-486e-8ba2-1d354ab2ef4e")]
		public global::System.String DatabaseInitialCatalog
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseInitialCatalogPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseInitialCatalogPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.DatabaseInitialCatalog domain property.
		/// </summary>
		internal sealed partial class DatabaseInitialCatalogPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private DatabaseInitialCatalogPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.DatabaseInitialCatalog domain property value handler.
			/// </summary>
			public static readonly DatabaseInitialCatalogPropertyHandler Instance = new DatabaseInitialCatalogPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.DatabaseInitialCatalog domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseInitialCatalogDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseInitialCatalogPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseInitialCatalogPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseUser domain property code
		
		/// <summary>
		/// DatabaseUser domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseUserDomainPropertyId = new global::System.Guid(0x6d6efdee, 0x1e43, 0x4f64, 0xa4, 0xde, 0x0a, 0x10, 0x40, 0x09, 0xe4, 0x7d);
		
		/// <summary>
		/// Storage for DatabaseUser
		/// </summary>
		private global::System.String databaseUserPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabaseUser domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModel.Database User
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseUser.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseUser.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabaseUser.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6d6efdee-1e43-4f64-a4de-0a104009e47d")]
		public global::System.String DatabaseUser
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseUserPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseUserPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.DatabaseUser domain property.
		/// </summary>
		internal sealed partial class DatabaseUserPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private DatabaseUserPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.DatabaseUser domain property value handler.
			/// </summary>
			public static readonly DatabaseUserPropertyHandler Instance = new DatabaseUserPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.DatabaseUser domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseUserDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseUserPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseUserPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabasePassword domain property code
		
		/// <summary>
		/// DatabasePassword domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabasePasswordDomainPropertyId = new global::System.Guid(0x29820332, 0xcb8c, 0x405d, 0x9b, 0x16, 0x18, 0xd0, 0xa6, 0xe5, 0x3b, 0xf1);
		
		/// <summary>
		/// Storage for DatabasePassword
		/// </summary>
		private global::System.String databasePasswordPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabasePassword domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModel.Database Password
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabasePassword.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabasePassword.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/DatabasePassword.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("29820332-cb8c-405d-9b16-18d0a6e53bf1")]
		public global::System.String DatabasePassword
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databasePasswordPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabasePasswordPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.DatabasePassword domain property.
		/// </summary>
		internal sealed partial class DatabasePasswordPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private DatabasePasswordPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.DatabasePassword domain property value handler.
			/// </summary>
			public static readonly DatabasePasswordPropertyHandler Instance = new DatabasePasswordPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.DatabasePassword domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabasePasswordDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databasePasswordPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databasePasswordPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SatelliteInstances domain property code
		
		/// <summary>
		/// SatelliteInstances domain property Id.
		/// </summary>
		public static readonly global::System.Guid SatelliteInstancesDomainPropertyId = new global::System.Guid(0x2e207304, 0x3670, 0x4c6b, 0x9d, 0xc2, 0x8f, 0x60, 0x7b, 0xa3, 0xda, 0x5e);
		
		/// <summary>
		/// Storage for SatelliteInstances
		/// </summary>
		private global::System.String satelliteInstancesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SatelliteInstances domain property.
		/// It is a pipe-separated array of instance numbers, which will be used to 
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/SatelliteInstances.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionModel/SatelliteInstances.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/SatelliteInstances.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2e207304-3670-4c6b-9dc2-8f607ba3da5e")]
		public global::System.String SatelliteInstances
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return satelliteInstancesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SatelliteInstancesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.SatelliteInstances domain property.
		/// </summary>
		internal sealed partial class SatelliteInstancesPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.String>
		{
			private SatelliteInstancesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.SatelliteInstances domain property value handler.
			/// </summary>
			public static readonly SatelliteInstancesPropertyHandler Instance = new SatelliteInstancesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.SatelliteInstances domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SatelliteInstancesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.satelliteInstancesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.satelliteInstancesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ScriptVersion domain property code
		
		/// <summary>
		/// ScriptVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScriptVersionDomainPropertyId = new global::System.Guid(0x894452f0, 0xef45, 0x4563, 0x93, 0x74, 0x5d, 0x51, 0xeb, 0x41, 0xa7, 0x77);
		
		/// <summary>
		/// Storage for ScriptVersion
		/// </summary>
		private global::System.Int16 scriptVersionPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of ScriptVersion domain property.
		/// Version associated with the script that will be generated automatically by the
		/// transformation tool
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionModel/ScriptVersion.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionModel/ScriptVersion.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("894452f0-ef45-4563-9374-5d51eb41a777")]
		public global::System.Int16 ScriptVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scriptVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScriptVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionModel.ScriptVersion domain property.
		/// </summary>
		internal sealed partial class ScriptVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionModel, global::System.Int16>
		{
			private ScriptVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionModel.ScriptVersion domain property value handler.
			/// </summary>
			public static readonly ScriptVersionPropertyHandler Instance = new ScriptVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionModel.ScriptVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScriptVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(TransactionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scriptVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionModel element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scriptVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionLayers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionLayers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionLayer> TransactionLayers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionLayer>, TransactionLayer>(global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModelDomainRoleId);
			}
		}
		#endregion
		#region TransactionEnvironmentLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionEnvironmentLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModel
		/// </summary>
		public virtual TransactionEnvironmentLayer TransactionEnvironmentLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId) as TransactionEnvironmentLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TransactionLayer.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayer
					if (this.TransactionEnvironmentLayer != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::TransactionKernelDSL.Framework.Language.TransactionLayer sourceTransactionLayer1 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionLayer;
			if (sourceTransactionLayer1 != null)
			{
				// Create link for path TransactionModelHasTransactionLayers.TransactionLayers
				this.TransactionLayers.Add(sourceTransactionLayer1);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer sourceTransactionEnvironmentLayer2 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer;
			if (sourceTransactionEnvironmentLayer2 != null)
			{
				// Create link for path TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayer
				this.TransactionEnvironmentLayer = sourceTransactionEnvironmentLayer2;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::TransactionKernelDSL.Framework.Language.TransactionLayer sourceTransactionLayer1 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionLayer;
			if (sourceTransactionLayer1 != null)
			{
				// Delete link for path TransactionModelHasTransactionLayers.TransactionLayers
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionModel)this, sourceTransactionLayer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionModelDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer sourceTransactionEnvironmentLayer2 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer;
			if (sourceTransactionEnvironmentLayer2 != null)
			{
				// Delete link for path TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayer
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionModel)this, sourceTransactionEnvironmentLayer2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionModelDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionHandler
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandler.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandler.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("1cdb00e4-ec80-43a4-8912-07403efeeaf5")]
	public partial class TransactionHandler : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionHandler domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1cdb00e4, 0xec80, 0x43a4, 0x89, 0x12, 0x07, 0x40, 0x3e, 0xfe, 0xea, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionHandler(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionHandler(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xbbcbe939, 0x4a13, 0x46fe, 0xa3, 0x7e, 0x1d, 0xb1, 0x27, 0xd2, 0x4f, 0xcf);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "TransactionName";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Handler's Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandler/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandler/Name.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandler/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("TransactionName")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("bbcbe939-4a13-46fe-a37e-1db127d24fcf")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandler.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandler, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandler.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandler.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionHandler element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandler element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionId domain property code
		
		/// <summary>
		/// TransactionId domain property Id.
		/// </summary>
		public static readonly global::System.Guid TransactionIdDomainPropertyId = new global::System.Guid(0x30725a1a, 0xc7dd, 0x467b, 0xa9, 0x4e, 0xc8, 0x8a, 0xa6, 0x29, 0xb4, 0xd3);
		
		/// <summary>
		/// Storage for TransactionId
		/// </summary>
		private global::System.String transactionIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TransactionId domain property.
		/// Transaction Id that will be the main identifier of the handler.
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandler/TransactionId.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandler/TransactionId.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandler/TransactionId.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("30725a1a-c7dd-467b-a94e-c88aa629b4d3")]
		public global::System.String TransactionId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return transactionIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TransactionIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandler.TransactionId domain property.
		/// </summary>
		internal sealed partial class TransactionIdPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandler, global::System.String>
		{
			private TransactionIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandler.TransactionId domain property value handler.
			/// </summary>
			public static readonly TransactionIdPropertyHandler Instance = new TransactionIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandler.TransactionId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TransactionIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionHandler element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.transactionIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandler element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.transactionIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LoggerName domain property code
		
		/// <summary>
		/// LoggerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid LoggerNameDomainPropertyId = new global::System.Guid(0x1a449a15, 0x8e57, 0x4417, 0x85, 0x9c, 0x1c, 0xcf, 0x23, 0xab, 0x23, 0x70);
		
		/// <summary>
		/// Storage for LoggerName
		/// </summary>
		private global::System.String loggerNamePropertyStorage = "MainLogger";
		
		/// <summary>
		/// Gets or sets the value of LoggerName domain property.
		/// Logger's name used within this transaction handler
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionHandler/LoggerName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionHandler/LoggerName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionHandler/LoggerName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("MainLogger")]
		[DslModeling::DomainObjectId("1a449a15-8e57-4417-859c-1ccf23ab2370")]
		public global::System.String LoggerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return loggerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LoggerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionHandler.LoggerName domain property.
		/// </summary>
		internal sealed partial class LoggerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionHandler, global::System.String>
		{
			private LoggerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionHandler.LoggerName domain property value handler.
			/// </summary>
			public static readonly LoggerNamePropertyHandler Instance = new LoggerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionHandler.LoggerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LoggerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionHandler element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.loggerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionHandler element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.loggerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ForwarderTransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ForwarderTransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> ForwarderTransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.SourceForwardingTransactionHandlerDomainRoleId);
			}
		}
		#endregion
		#region BackwardTransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of BackwardTransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> BackwardTransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesForwarderTransactionHandlers.TargetForwardingTransactionHandlerDomainRoleId);
			}
		}
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandler
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId, value);
			}
		}
		#endregion
		#region MaintenanceTransactionHandler opposite domain role accessor
		/// <summary>
		/// Gets or sets MaintenanceTransactionHandler.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandler
		/// </summary>
		public virtual TransactionHandler MaintenanceTransactionHandler
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId) as TransactionHandler;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.SourceMaintenanceTransactionHandlerDomainRoleId, value);
			}
		}
		#endregion
		#region CallerTransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CallerTransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.TargetMaintenanceTransactionHandler
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> CallerTransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesMaintenanceTransactionHandler.TargetMaintenanceTransactionHandlerDomainRoleId);
			}
		}
		#endregion
		#region InputTransactionEngine opposite domain role accessor
		/// <summary>
		/// Gets or sets InputTransactionEngine.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.TransactionHandler
		/// </summary>
		public virtual InputTransactionEngine InputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.TransactionHandlerDomainRoleId) as InputTransactionEngine;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.TransactionHandlerDomainRoleId, value);
			}
		}
		#endregion
		#region OutputTransactionEngine opposite domain role accessor
		/// <summary>
		/// Gets or sets OutputTransactionEngine.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngine
		/// </summary>
		public virtual OutputTransactionEngine OutputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId) as OutputTransactionEngine;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.SourceTransactionHandlerOutputEngineDomainRoleId, value);
			}
		}
		#endregion
		#region TransactionSQLServerDataSources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionSQLServerDataSources.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandler
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionSQLServerDataSource> TransactionSQLServerDataSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionSQLServerDataSource>, TransactionSQLServerDataSource>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionHandlerDomainRoleId);
			}
		}
		#endregion
		#region OutputTransactionWebService opposite domain role accessor
		/// <summary>
		/// Gets or sets OutputTransactionWebService.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandler
		/// </summary>
		public virtual OutputTransactionWebService OutputTransactionWebService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId) as OutputTransactionWebService;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.TransactionHandlerDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionLayer
	/// Description for TransactionKernelDSL.Framework.Language.TransactionLayer
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("e9b57f91-7da8-49b1-b917-7f43efffb581")]
	public partial class TransactionLayer : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe9b57f91, 0x7da8, 0x49b1, 0xb9, 0x17, 0x7f, 0x43, 0xef, 0xff, 0xb5, 0x81);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1890c134, 0x1751, 0x495f, 0x8f, 0x89, 0xf1, 0x0b, 0x20, 0xe5, 0x4e, 0xd9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Layer's name. It is only figurative.
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayer/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayer/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("1890c134-1751-495f-8f89-f10b20e54ed9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionLayer.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionLayer, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionLayer.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionLayer.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Level domain property code
		
		/// <summary>
		/// Level domain property Id.
		/// </summary>
		public static readonly global::System.Guid LevelDomainPropertyId = new global::System.Guid(0x2b765f2a, 0xb6c7, 0x42f4, 0xad, 0xea, 0xfd, 0x03, 0x53, 0xa7, 0x88, 0xa0);
		
		/// <summary>
		/// Storage for Level
		/// </summary>
		private global::System.Int16 levelPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Level domain property.
		/// Is a value that means the order of a layer. Lower levels mean layers involved
		/// catching a requirement, and higher levels mean layers involved in
		/// forwarding/resolving the transaction
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionLayer/Level.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionLayer/Level.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2b765f2a-b6c7-42f4-adea-fd0353a788a0")]
		public global::System.Int16 Level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return levelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LevelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionLayer.Level domain property.
		/// </summary>
		internal sealed partial class LevelPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionLayer, global::System.Int16>
		{
			private LevelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionLayer.Level domain property value handler.
			/// </summary>
			public static readonly LevelPropertyHandler Instance = new LevelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionLayer.Level domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LevelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(TransactionLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.levelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionLayer element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.levelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionModel.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayer
		/// </summary>
		public virtual TransactionModel TransactionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId) as TransactionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionLayers.TransactionLayerDomainRoleId, value);
			}
		}
		#endregion
		#region TransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> TransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region InputTransactionEngines opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InputTransactionEngines.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InputTransactionEngine> InputTransactionEngines
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InputTransactionEngine>, InputTransactionEngine>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region OutputTransactionEngines opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OutputTransactionEngines.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<OutputTransactionEngine> OutputTransactionEngines
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<OutputTransactionEngine>, OutputTransactionEngine>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region TransactionSQLServerDataSources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionSQLServerDataSources.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionSQLServerDataSource> TransactionSQLServerDataSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionSQLServerDataSource>, TransactionSQLServerDataSource>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region OutputTransactionWebServices opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OutputTransactionWebServices.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<OutputTransactionWebService> OutputTransactionWebServices
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<OutputTransactionWebService>, OutputTransactionWebService>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region TimeTriggers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TimeTriggers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TimeTrigger> TimeTriggers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TimeTrigger>, TimeTrigger>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region TransactionDataSourceSupports opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionDataSourceSupports.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionDataSourceSupport> TransactionDataSourceSupports
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionDataSourceSupport>, TransactionDataSourceSupport>(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.InputTransactionEngine.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TransactionHandler.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TimeTrigger.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::TransactionKernelDSL.Framework.Language.InputTransactionEngine sourceInputTransactionEngine1 = sourceElement as global::TransactionKernelDSL.Framework.Language.InputTransactionEngine;
			if (sourceInputTransactionEngine1 != null)
			{
				// Create link for path TransactionLayerHasInputTransactionEngines.InputTransactionEngines
				this.InputTransactionEngines.Add(sourceInputTransactionEngine1);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine sourceOutputTransactionEngine2 = sourceElement as global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine;
			if (sourceOutputTransactionEngine2 != null)
			{
				// Create link for path TransactionLayerHasOutputTransactionEngines.OutputTransactionEngines
				this.OutputTransactionEngines.Add(sourceOutputTransactionEngine2);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource sourceTransactionSQLServerDataSource3 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource;
			if (sourceTransactionSQLServerDataSource3 != null)
			{
				// Create link for path TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSources
				this.TransactionSQLServerDataSources.Add(sourceTransactionSQLServerDataSource3);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService sourceOutputTransactionWebService4 = sourceElement as global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService;
			if (sourceOutputTransactionWebService4 != null)
			{
				// Create link for path TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServices
				this.OutputTransactionWebServices.Add(sourceOutputTransactionWebService4);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionHandler sourceTransactionHandler5 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionHandler;
			if (sourceTransactionHandler5 != null)
			{
				// Create link for path TransactionLayerHasTransactionHandlers.TransactionHandlers
				this.TransactionHandlers.Add(sourceTransactionHandler5);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TimeTrigger sourceTimeTrigger6 = sourceElement as global::TransactionKernelDSL.Framework.Language.TimeTrigger;
			if (sourceTimeTrigger6 != null)
			{
				// Create link for path TransactionLayerHasTimeTriggers.TimeTriggers
				this.TimeTriggers.Add(sourceTimeTrigger6);

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport sourceTransactionDataSourceSupport7 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport;
			if (sourceTransactionDataSourceSupport7 != null)
			{
				// Create link for path TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupports
				this.TransactionDataSourceSupports.Add(sourceTransactionDataSourceSupport7);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::TransactionKernelDSL.Framework.Language.InputTransactionEngine sourceInputTransactionEngine1 = sourceElement as global::TransactionKernelDSL.Framework.Language.InputTransactionEngine;
			if (sourceInputTransactionEngine1 != null)
			{
				// Delete link for path TransactionLayerHasInputTransactionEngines.InputTransactionEngines
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceInputTransactionEngine1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine sourceOutputTransactionEngine2 = sourceElement as global::TransactionKernelDSL.Framework.Language.OutputTransactionEngine;
			if (sourceOutputTransactionEngine2 != null)
			{
				// Delete link for path TransactionLayerHasOutputTransactionEngines.OutputTransactionEngines
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceOutputTransactionEngine2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource sourceTransactionSQLServerDataSource3 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource;
			if (sourceTransactionSQLServerDataSource3 != null)
			{
				// Delete link for path TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSources
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceTransactionSQLServerDataSource3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService sourceOutputTransactionWebService4 = sourceElement as global::TransactionKernelDSL.Framework.Language.OutputTransactionWebService;
			if (sourceOutputTransactionWebService4 != null)
			{
				// Delete link for path TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServices
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceOutputTransactionWebService4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionHandler sourceTransactionHandler5 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionHandler;
			if (sourceTransactionHandler5 != null)
			{
				// Delete link for path TransactionLayerHasTransactionHandlers.TransactionHandlers
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceTransactionHandler5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionHandlers.TransactionHandlerDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TimeTrigger sourceTimeTrigger6 = sourceElement as global::TransactionKernelDSL.Framework.Language.TimeTrigger;
			if (sourceTimeTrigger6 != null)
			{
				// Delete link for path TransactionLayerHasTimeTriggers.TimeTriggers
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceTimeTrigger6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId);
				}

				return;
			}
				
			global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport sourceTransactionDataSourceSupport7 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport;
			if (sourceTransactionDataSourceSupport7 != null)
			{
				// Delete link for path TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupports
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionLayer)this, sourceTransactionDataSourceSupport7))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass InputTransactionEngine
	/// Description for TransactionKernelDSL.Framework.Language.InputTransactionEngine
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2d46088e-0b4e-43d2-8cac-17dfdd93f58b")]
	public partial class InputTransactionEngine : TransactionEngine
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InputTransactionEngine domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2d46088e, 0x0b4e, 0x43d2, 0x8c, 0xac, 0x17, 0xdf, 0xdd, 0x93, 0xf5, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InputTransactionEngine(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InputTransactionEngine(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region HasUnitTests domain property code
		
		/// <summary>
		/// HasUnitTests domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasUnitTestsDomainPropertyId = new global::System.Guid(0x0798c381, 0x96e7, 0x420f, 0xaf, 0xa2, 0x14, 0x28, 0x7b, 0xa8, 0x97, 0xea);
		
		/// <summary>
		/// Storage for HasUnitTests
		/// </summary>
		private global::System.Boolean hasUnitTestsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasUnitTests domain property.
		/// Generates unit testing supporting code for every transaction generated from it
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine/HasUnitTests.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine/HasUnitTests.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0798c381-96e7-420f-afa2-14287ba897ea")]
		public global::System.Boolean HasUnitTests
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasUnitTestsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasUnitTestsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InputTransactionEngine.HasUnitTests domain property.
		/// </summary>
		internal sealed partial class HasUnitTestsPropertyHandler : DslModeling::DomainPropertyValueHandler<InputTransactionEngine, global::System.Boolean>
		{
			private HasUnitTestsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InputTransactionEngine.HasUnitTests domain property value handler.
			/// </summary>
			public static readonly HasUnitTestsPropertyHandler Instance = new HasUnitTestsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InputTransactionEngine.HasUnitTests domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasUnitTestsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(InputTransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasUnitTestsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InputTransactionEngine element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasUnitTestsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x5b76ddce, 0x3f9a, 0x4ec2, 0xb3, 0x45, 0x38, 0x0d, 0x75, 0xc4, 0x8c, 0xce);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private InputEngineType typePropertyStorage = InputEngineType.InputEngine;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Input Transaction Engine's Type. The type will be associated with an abstract
		/// class from TransactionKernelDSL.Framework
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine/Type.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine/Type.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InputEngineType.InputEngine)]
		[DslModeling::DomainObjectId("5b76ddce-3f9a-4ec2-b345-380d75c48cce")]
		public InputEngineType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InputTransactionEngine.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<InputTransactionEngine, InputEngineType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InputTransactionEngine.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InputTransactionEngine.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InputEngineType GetValue(InputTransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InputTransactionEngine element, InputEngineType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InputEngineType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GeneratesSequenceNumber domain property code
		
		/// <summary>
		/// GeneratesSequenceNumber domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratesSequenceNumberDomainPropertyId = new global::System.Guid(0x08e1f725, 0x9205, 0x47dc, 0x8f, 0x27, 0xca, 0x8e, 0xde, 0xef, 0xab, 0xa1);
		
		/// <summary>
		/// Storage for GeneratesSequenceNumber
		/// </summary>
		private global::System.Boolean generatesSequenceNumberPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of GeneratesSequenceNumber domain property.
		/// If true, call SequenceFactory into constructor and saves the new trace number in
		/// a Context Value
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine/GeneratesSequenceNumber.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.InputTransactionEngine/GeneratesSequenceNumber.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("08e1f725-9205-47dc-8f27-ca8edeefaba1")]
		public global::System.Boolean GeneratesSequenceNumber
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generatesSequenceNumberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratesSequenceNumberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InputTransactionEngine.GeneratesSequenceNumber domain property.
		/// </summary>
		internal sealed partial class GeneratesSequenceNumberPropertyHandler : DslModeling::DomainPropertyValueHandler<InputTransactionEngine, global::System.Boolean>
		{
			private GeneratesSequenceNumberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InputTransactionEngine.GeneratesSequenceNumber domain property value handler.
			/// </summary>
			public static readonly GeneratesSequenceNumberPropertyHandler Instance = new GeneratesSequenceNumberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InputTransactionEngine.GeneratesSequenceNumber domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratesSequenceNumberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(InputTransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generatesSequenceNumberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InputTransactionEngine element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generatesSequenceNumberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngine
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> TransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTransactionHandlers.InputTransactionEngineDomainRoleId);
			}
		}
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngine
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasInputTransactionEngines.InputTransactionEngineDomainRoleId, value);
			}
		}
		#endregion
		#region TimeTriggers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TimeTriggers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.InputTransactionEngine
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TimeTrigger> TimeTriggers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TimeTrigger>, TimeTrigger>(global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.InputTransactionEngineDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass OutputTransactionEngine
	/// Description for TransactionKernelDSL.Framework.Language.OutputTransactionEngine
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7a60d2a-fabc-4674-915e-4b5973256959")]
	public partial class OutputTransactionEngine : TransactionEngine
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OutputTransactionEngine domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7a60d2a, 0xfabc, 0x4674, 0x91, 0x5e, 0x4b, 0x59, 0x73, 0x25, 0x69, 0x59);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutputTransactionEngine(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutputTransactionEngine(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x8820ceaf, 0x1ad0, 0x4865, 0xb8, 0xe7, 0x72, 0x22, 0xcd, 0xa2, 0x21, 0x7b);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private OutputEngineType typePropertyStorage = OutputEngineType.OutputEngine;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Output Transaction Engine's Type. The type is associated with an abstract class
		/// from TransactionKernelDSL.Framework with built-in functionalities
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine/Type.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine/Type.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(OutputEngineType.OutputEngine)]
		[DslModeling::DomainObjectId("8820ceaf-1ad0-4865-b8e7-7222cda2217b")]
		public OutputEngineType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OutputTransactionEngine.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<OutputTransactionEngine, OutputEngineType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OutputTransactionEngine.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OutputTransactionEngine.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed OutputEngineType GetValue(OutputTransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OutputTransactionEngine element, OutputEngineType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				OutputEngineType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EngineLoggerName domain property code
		
		/// <summary>
		/// EngineLoggerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EngineLoggerNameDomainPropertyId = new global::System.Guid(0x02a2fbab, 0x6580, 0x4776, 0x83, 0xa8, 0x4a, 0x49, 0x72, 0x01, 0x64, 0x91);
		
		/// <summary>
		/// Storage for EngineLoggerName
		/// </summary>
		private global::System.String engineLoggerNamePropertyStorage = "MainLogger";
		
		/// <summary>
		/// Gets or sets the value of EngineLoggerName domain property.
		/// Name of the logger used within the engine. Can be the same as MainLogger, but if
		/// intended, it can separetely log in another file.
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine/EngineLoggerName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine/EngineLoggerName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionEngine/EngineLoggerName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("MainLogger")]
		[DslModeling::DomainObjectId("02a2fbab-6580-4776-83a8-4a4972016491")]
		public global::System.String EngineLoggerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return engineLoggerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EngineLoggerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OutputTransactionEngine.EngineLoggerName domain property.
		/// </summary>
		internal sealed partial class EngineLoggerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<OutputTransactionEngine, global::System.String>
		{
			private EngineLoggerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OutputTransactionEngine.EngineLoggerName domain property value handler.
			/// </summary>
			public static readonly EngineLoggerNamePropertyHandler Instance = new EngineLoggerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OutputTransactionEngine.EngineLoggerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EngineLoggerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OutputTransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.engineLoggerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OutputTransactionEngine element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.engineLoggerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceTransactionHandlerOutputEngines opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceTransactionHandlerOutputEngines.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.OutputTransactionEngine
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> SourceTransactionHandlerOutputEngines
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionEngine.OutputTransactionEngineDomainRoleId);
			}
		}
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngine
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionEngines.OutputTransactionEngineDomainRoleId, value);
			}
		}
		#endregion
		#region TransactionDataSourceSupport opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionDataSourceSupport.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngine
		/// </summary>
		public virtual TransactionDataSourceSupport TransactionDataSourceSupport
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId) as TransactionDataSourceSupport;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.OutputTransactionEngineDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionEngine
	/// Description for TransactionKernelDSL.Framework.Language.TransactionEngine
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("8c02853b-6e81-4143-bb83-7d3fa3f82135")]
	public partial class TransactionEngine : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionEngine domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8c02853b, 0x6e81, 0x4143, 0xbb, 0x83, 0x7d, 0x3f, 0xa3, 0xf8, 0x21, 0x35);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionEngine(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionEngine(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1f4815c4, 0x8e5b, 0x4bd0, 0xb5, 0x61, 0xe2, 0x7b, 0xf2, 0xdb, 0xae, 0xef);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for TransactionKernelDSL.Framework.Language.TransactionEngine.Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("1f4815c4-8e5b-4bd0-b561-e27bf2dbaeef")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEngine.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEngine, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEngine.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEngine.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEngine element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutoStarts domain property code
		
		/// <summary>
		/// AutoStarts domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutoStartsDomainPropertyId = new global::System.Guid(0xabcd17b8, 0xc520, 0x4eab, 0xbc, 0x9e, 0x3b, 0x78, 0x59, 0x69, 0xab, 0xe4);
		
		/// <summary>
		/// Storage for AutoStarts
		/// </summary>
		private global::System.Boolean autoStartsPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AutoStarts domain property.
		/// If true, it starts within Facade's Start() method.
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine/AutoStarts.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine/AutoStarts.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("abcd17b8-c520-4eab-bc9e-3b785969abe4")]
		public global::System.Boolean AutoStarts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return autoStartsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutoStartsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEngine.AutoStarts domain property.
		/// </summary>
		internal sealed partial class AutoStartsPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEngine, global::System.Boolean>
		{
			private AutoStartsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEngine.AutoStarts domain property value handler.
			/// </summary>
			public static readonly AutoStartsPropertyHandler Instance = new AutoStartsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEngine.AutoStarts domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutoStartsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(TransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.autoStartsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEngine element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.autoStartsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Parser domain property code
		
		/// <summary>
		/// Parser domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParserDomainPropertyId = new global::System.Guid(0x7e7c94ef, 0x7626, 0x4989, 0xb8, 0x90, 0xed, 0x7c, 0xbf, 0x6b, 0x8f, 0xe2);
		
		/// <summary>
		/// Storage for Parser
		/// </summary>
		private ParserType parserPropertyStorage = ParserType.NotTyped;
		
		/// <summary>
		/// Gets or sets the value of Parser domain property.
		/// Type of the parser that will be used
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine/Parser.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionEngine/Parser.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine/Parser.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ParserType.NotTyped)]
		[DslModeling::DomainObjectId("7e7c94ef-7626-4989-b890-ed7cbf6b8fe2")]
		public ParserType Parser
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parserPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParserPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEngine.Parser domain property.
		/// </summary>
		internal sealed partial class ParserPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEngine, ParserType>
		{
			private ParserPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEngine.Parser domain property value handler.
			/// </summary>
			public static readonly ParserPropertyHandler Instance = new ParserPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEngine.Parser domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParserDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ParserType GetValue(TransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parserPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEngine element, ParserType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ParserType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parserPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParserSectionName domain property code
		
		/// <summary>
		/// ParserSectionName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParserSectionNameDomainPropertyId = new global::System.Guid(0x44220b01, 0x927e, 0x4a7a, 0xa2, 0xfa, 0xca, 0xc2, 0x4c, 0xe3, 0x64, 0xee);
		
		/// <summary>
		/// Storage for ParserSectionName
		/// </summary>
		private global::System.String parserSectionNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ParserSectionName domain property.
		/// Parser Section's name, that will be linked with a section in app.config with the
		/// same name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine/ParserSectionName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionEngine/ParserSectionName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine/ParserSectionName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("44220b01-927e-4a7a-a2fa-cac24ce364ee")]
		public global::System.String ParserSectionName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parserSectionNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParserSectionNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEngine.ParserSectionName domain property.
		/// </summary>
		internal sealed partial class ParserSectionNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEngine, global::System.String>
		{
			private ParserSectionNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEngine.ParserSectionName domain property value handler.
			/// </summary>
			public static readonly ParserSectionNamePropertyHandler Instance = new ParserSectionNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEngine.ParserSectionName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParserSectionNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parserSectionNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEngine element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parserSectionNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LoggerName domain property code
		
		/// <summary>
		/// LoggerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid LoggerNameDomainPropertyId = new global::System.Guid(0x5fee9d95, 0x044d, 0x4e6d, 0xab, 0x3e, 0x16, 0x0f, 0xe5, 0x6f, 0xc1, 0xfd);
		
		/// <summary>
		/// Storage for LoggerName
		/// </summary>
		private global::System.String loggerNamePropertyStorage = "MainLogger";
		
		/// <summary>
		/// Gets or sets the value of LoggerName domain property.
		/// MainLogger's name. By default is "MainLogger"
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine/LoggerName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionEngine/LoggerName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine/LoggerName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("MainLogger")]
		[DslModeling::DomainObjectId("5fee9d95-044d-4e6d-ab3e-160fe56fc1fd")]
		public global::System.String LoggerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return loggerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LoggerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEngine.LoggerName domain property.
		/// </summary>
		internal sealed partial class LoggerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEngine, global::System.String>
		{
			private LoggerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEngine.LoggerName domain property value handler.
			/// </summary>
			public static readonly LoggerNamePropertyHandler Instance = new LoggerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEngine.LoggerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LoggerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.loggerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEngine element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.loggerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParserLoggerName domain property code
		
		/// <summary>
		/// ParserLoggerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParserLoggerNameDomainPropertyId = new global::System.Guid(0xf2cfed51, 0x2909, 0x45e8, 0xb5, 0xdb, 0x8c, 0x1e, 0xbe, 0xe4, 0xbe, 0x20);
		
		/// <summary>
		/// Storage for ParserLoggerName
		/// </summary>
		private global::System.String parserLoggerNamePropertyStorage = "MainLogger";
		
		/// <summary>
		/// Gets or sets the value of ParserLoggerName domain property.
		/// Logger's name used within the parser
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEngine/ParserLoggerName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionEngine/ParserLoggerName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEngine/ParserLoggerName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("MainLogger")]
		[DslModeling::DomainObjectId("f2cfed51-2909-45e8-b5db-8c1ebee4be20")]
		public global::System.String ParserLoggerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parserLoggerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParserLoggerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEngine.ParserLoggerName domain property.
		/// </summary>
		internal sealed partial class ParserLoggerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEngine, global::System.String>
		{
			private ParserLoggerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEngine.ParserLoggerName domain property value handler.
			/// </summary>
			public static readonly ParserLoggerNamePropertyHandler Instance = new ParserLoggerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEngine.ParserLoggerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParserLoggerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEngine element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parserLoggerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEngine element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parserLoggerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionSQLServerDataSource
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("99be29ec-84a3-41e1-bd12-def751d6218d")]
	public partial class TransactionSQLServerDataSource : TransactionDataSource
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionSQLServerDataSource domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99be29ec, 0x84a3, 0x41e1, 0xbd, 0x12, 0xde, 0xf7, 0x51, 0xd6, 0x21, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionSQLServerDataSource(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionSQLServerDataSource(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InstanceName domain property code
		
		/// <summary>
		/// InstanceName domain property Id.
		/// </summary>
		public static readonly global::System.Guid InstanceNameDomainPropertyId = new global::System.Guid(0x8c1c1cc5, 0x5a06, 0x4330, 0xac, 0x33, 0x63, 0x8f, 0x9d, 0x99, 0xd9, 0x0a);
		
		/// <summary>
		/// Storage for InstanceName
		/// </summary>
		private global::System.String instanceNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InstanceName domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.Instance
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/InstanceName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/InstanceName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/InstanceName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8c1c1cc5-5a06-4330-ac33-638f9d99d90a")]
		public global::System.String InstanceName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return instanceNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InstanceNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionSQLServerDataSource.InstanceName domain property.
		/// </summary>
		internal sealed partial class InstanceNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionSQLServerDataSource, global::System.String>
		{
			private InstanceNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionSQLServerDataSource.InstanceName domain property value handler.
			/// </summary>
			public static readonly InstanceNamePropertyHandler Instance = new InstanceNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionSQLServerDataSource.InstanceName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InstanceNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionSQLServerDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.instanceNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionSQLServerDataSource element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.instanceNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseName domain property code
		
		/// <summary>
		/// DatabaseName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseNameDomainPropertyId = new global::System.Guid(0xdde512aa, 0x73d3, 0x4b63, 0xa0, 0x7a, 0x37, 0x1e, 0x40, 0x18, 0x8f, 0xca);
		
		/// <summary>
		/// Storage for DatabaseName
		/// </summary>
		private global::System.String databaseNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabaseName domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.Database
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/DatabaseName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/DatabaseName.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/DatabaseName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dde512aa-73d3-4b63-a07a-371e40188fca")]
		public global::System.String DatabaseName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionSQLServerDataSource.DatabaseName domain property.
		/// </summary>
		internal sealed partial class DatabaseNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionSQLServerDataSource, global::System.String>
		{
			private DatabaseNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionSQLServerDataSource.DatabaseName domain property value handler.
			/// </summary>
			public static readonly DatabaseNamePropertyHandler Instance = new DatabaseNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionSQLServerDataSource.DatabaseName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionSQLServerDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionSQLServerDataSource element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConnectionString domain property code
		
		/// <summary>
		/// ConnectionString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConnectionStringDomainPropertyId = new global::System.Guid(0x42d77b18, 0x62a0, 0x4bf6, 0x8b, 0x58, 0xa9, 0xe4, 0xa1, 0x07, 0xae, 0xea);
		
		/// <summary>
		/// Storage for ConnectionString
		/// </summary>
		private global::System.String connectionStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConnectionString domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.Connection String
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/ConnectionString.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/ConnectionString.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/ConnectionString.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("42d77b18-62a0-4bf6-8b58-a9e4a107aeea")]
		public global::System.String ConnectionString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return connectionStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConnectionStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionSQLServerDataSource.ConnectionString domain property.
		/// </summary>
		internal sealed partial class ConnectionStringPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionSQLServerDataSource, global::System.String>
		{
			private ConnectionStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionSQLServerDataSource.ConnectionString domain property value handler.
			/// </summary>
			public static readonly ConnectionStringPropertyHandler Instance = new ConnectionStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionSQLServerDataSource.ConnectionString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConnectionStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionSQLServerDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.connectionStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionSQLServerDataSource element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.connectionStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StoredProcedure domain property code
		
		/// <summary>
		/// StoredProcedure domain property Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureDomainPropertyId = new global::System.Guid(0x89681efa, 0x3012, 0x42c3, 0x90, 0xf1, 0x8f, 0x16, 0x58, 0xac, 0xf6, 0x06);
		
		/// <summary>
		/// Storage for StoredProcedure
		/// </summary>
		private global::System.String storedProcedurePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StoredProcedure domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.Stored
		/// Procedure
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/StoredProcedure.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/StoredProcedure.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/StoredProcedure.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("89681efa-3012-42c3-90f1-8f1658acf606")]
		public global::System.String StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return storedProcedurePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StoredProcedurePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionSQLServerDataSource.StoredProcedure domain property.
		/// </summary>
		internal sealed partial class StoredProcedurePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionSQLServerDataSource, global::System.String>
		{
			private StoredProcedurePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionSQLServerDataSource.StoredProcedure domain property value handler.
			/// </summary>
			public static readonly StoredProcedurePropertyHandler Instance = new StoredProcedurePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionSQLServerDataSource.StoredProcedure domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StoredProcedureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionSQLServerDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.storedProcedurePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionSQLServerDataSource element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.storedProcedurePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExecutedOnStage domain property code
		
		/// <summary>
		/// ExecutedOnStage domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExecutedOnStageDomainPropertyId = new global::System.Guid(0x7d2af7fe, 0xb89f, 0x489c, 0x8b, 0xc7, 0xf1, 0x71, 0xe0, 0x76, 0xdc, 0xd4);
		
		/// <summary>
		/// Storage for ExecutedOnStage
		/// </summary>
		private PersistableStage executedOnStagePropertyStorage = PersistableStage.PreProcessStage;
		
		/// <summary>
		/// Gets or sets the value of ExecutedOnStage domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource.Executed
		/// On Stage
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/ExecutedOnStage.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/ExecutedOnStage.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionSQLServerDataSource/ExecutedOnStage.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PersistableStage.PreProcessStage)]
		[DslModeling::DomainObjectId("7d2af7fe-b89f-489c-8bc7-f171e076dcd4")]
		public PersistableStage ExecutedOnStage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return executedOnStagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExecutedOnStagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionSQLServerDataSource.ExecutedOnStage domain property.
		/// </summary>
		internal sealed partial class ExecutedOnStagePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionSQLServerDataSource, PersistableStage>
		{
			private ExecutedOnStagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionSQLServerDataSource.ExecutedOnStage domain property value handler.
			/// </summary>
			public static readonly ExecutedOnStagePropertyHandler Instance = new ExecutedOnStagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionSQLServerDataSource.ExecutedOnStage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExecutedOnStageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PersistableStage GetValue(TransactionSQLServerDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.executedOnStagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionSQLServerDataSource element, PersistableStage newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PersistableStage oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.executedOnStagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionSQLServerDataSource
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> TransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId);
			}
		}
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSource
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionSQLServerDataSources.TransactionSQLServerDataSourceDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionDataSource
	/// Description for TransactionKernelDSL.Framework.Language.TransactionDataSource
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionDataSource.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionDataSource.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("148da126-f44a-4214-8710-7aae812bef32")]
	public partial class TransactionDataSource : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionDataSource domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x148da126, 0xf44a, 0x4214, 0x87, 0x10, 0x7a, 0xae, 0x81, 0x2b, 0xef, 0x32);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionDataSource(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionDataSource(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc7ffb06f, 0x9807, 0x4fbd, 0x9e, 0x51, 0x6c, 0x6f, 0xe9, 0x6c, 0x00, 0x9f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionDataSource.Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionDataSource/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionDataSource/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c7ffb06f-9807-4fbd-9e51-6c6fe96c009f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionDataSource.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionDataSource, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionDataSource.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionDataSource.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionDataSource element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StepOrder domain property code
		
		/// <summary>
		/// StepOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid StepOrderDomainPropertyId = new global::System.Guid(0xb38e96dc, 0x9237, 0x4794, 0xa1, 0x6b, 0x01, 0x49, 0x9a, 0x2d, 0x55, 0x04);
		
		/// <summary>
		/// Storage for StepOrder
		/// </summary>
		private global::System.Int16 stepOrderPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of StepOrder domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionDataSource.Step Order
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionDataSource/StepOrder.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionDataSource/StepOrder.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("b38e96dc-9237-4794-a16b-01499a2d5504")]
		public global::System.Int16 StepOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return stepOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StepOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionDataSource.StepOrder domain property.
		/// </summary>
		internal sealed partial class StepOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionDataSource, global::System.Int16>
		{
			private StepOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionDataSource.StepOrder domain property value handler.
			/// </summary>
			public static readonly StepOrderPropertyHandler Instance = new StepOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionDataSource.StepOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StepOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(TransactionDataSource element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.stepOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionDataSource element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.stepOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionWebService
	/// Description for TransactionKernelDSL.Framework.Language.TransactionWebService
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionWebService.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionWebService.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("db7b73cc-f2a8-4df1-be9c-7ae1220d270d")]
	public partial class TransactionWebService : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionWebService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb7b73cc, 0xf2a8, 0x4df1, 0xbe, 0x9c, 0x7a, 0xe1, 0x22, 0x0d, 0x27, 0x0d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionWebService(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionWebService(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2f9fff5b, 0x9434, 0x49bb, 0xa2, 0xea, 0xc6, 0xa1, 0x7e, 0xa8, 0x6c, 0xbb);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Web Service's Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("2f9fff5b-9434-49bb-a2ea-c6a17ea86cbb")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionWebService.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionWebService, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionWebService.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionWebService.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionWebService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionWebService element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region WebServiceClassName domain property code
		
		/// <summary>
		/// WebServiceClassName domain property Id.
		/// </summary>
		public static readonly global::System.Guid WebServiceClassNameDomainPropertyId = new global::System.Guid(0x3e058ce2, 0xbf79, 0x4439, 0xb6, 0x36, 0xec, 0x1f, 0x2c, 0x33, 0x46, 0xdf);
		
		/// <summary>
		/// Storage for WebServiceClassName
		/// </summary>
		private global::System.String webServiceClassNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of WebServiceClassName domain property.
		/// Name of the proxy class generated from the wsdl. The file with the class must be
		/// included in project
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionWebService/WebServiceClassName.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionWebService/WebServiceClassName.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3e058ce2-bf79-4439-b636-ec1f2c3346df")]
		public global::System.String WebServiceClassName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return webServiceClassNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				WebServiceClassNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionWebService.WebServiceClassName domain property.
		/// </summary>
		internal sealed partial class WebServiceClassNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionWebService, global::System.String>
		{
			private WebServiceClassNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionWebService.WebServiceClassName domain property value handler.
			/// </summary>
			public static readonly WebServiceClassNamePropertyHandler Instance = new WebServiceClassNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionWebService.WebServiceClassName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return WebServiceClassNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionWebService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.webServiceClassNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionWebService element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.webServiceClassNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Url domain property code
		
		/// <summary>
		/// Url domain property Id.
		/// </summary>
		public static readonly global::System.Guid UrlDomainPropertyId = new global::System.Guid(0xe6bce5d9, 0x5263, 0x4f84, 0xa3, 0x1b, 0x6c, 0x38, 0xd9, 0x2e, 0x30, 0xfe);
		
		/// <summary>
		/// Storage for Url
		/// </summary>
		private global::System.String urlPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Url domain property.
		/// Url of the referenced Web Service
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Url.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Url.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e6bce5d9-5263-4f84-a31b-6c38d92e30fe")]
		public global::System.String Url
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return urlPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UrlPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionWebService.Url domain property.
		/// </summary>
		internal sealed partial class UrlPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionWebService, global::System.String>
		{
			private UrlPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionWebService.Url domain property value handler.
			/// </summary>
			public static readonly UrlPropertyHandler Instance = new UrlPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionWebService.Url domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UrlDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionWebService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.urlPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionWebService element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.urlPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ArchitecturalPattern domain property code
		
		/// <summary>
		/// ArchitecturalPattern domain property Id.
		/// </summary>
		public static readonly global::System.Guid ArchitecturalPatternDomainPropertyId = new global::System.Guid(0x8bfc91f1, 0x0ac7, 0x4ccb, 0xa8, 0xe8, 0x5f, 0x8b, 0x0f, 0xbe, 0xe4, 0xdf);
		
		/// <summary>
		/// Storage for ArchitecturalPattern
		/// </summary>
		private WebServiceArchitecturalPattern architecturalPatternPropertyStorage = WebServiceArchitecturalPattern.MultipleInstances;
		
		/// <summary>
		/// Gets or sets the value of ArchitecturalPattern domain property.
		/// Type of architecture used to implement this outpue WS
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionWebService/ArchitecturalPattern.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionWebService/ArchitecturalPattern.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionWebService/ArchitecturalPattern.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(WebServiceArchitecturalPattern.MultipleInstances)]
		[DslModeling::DomainObjectId("8bfc91f1-0ac7-4ccb-a8e8-5f8b0fbee4df")]
		public WebServiceArchitecturalPattern ArchitecturalPattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return architecturalPatternPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ArchitecturalPatternPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionWebService.ArchitecturalPattern domain property.
		/// </summary>
		internal sealed partial class ArchitecturalPatternPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionWebService, WebServiceArchitecturalPattern>
		{
			private ArchitecturalPatternPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionWebService.ArchitecturalPattern domain property value handler.
			/// </summary>
			public static readonly ArchitecturalPatternPropertyHandler Instance = new ArchitecturalPatternPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionWebService.ArchitecturalPattern domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ArchitecturalPatternDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed WebServiceArchitecturalPattern GetValue(TransactionWebService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.architecturalPatternPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionWebService element, WebServiceArchitecturalPattern newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				WebServiceArchitecturalPattern oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.architecturalPatternPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Technology domain property code
		
		/// <summary>
		/// Technology domain property Id.
		/// </summary>
		public static readonly global::System.Guid TechnologyDomainPropertyId = new global::System.Guid(0xa21e5234, 0x0f88, 0x4728, 0xa8, 0x83, 0x03, 0x85, 0x89, 0xf4, 0xaa, 0xc3);
		
		/// <summary>
		/// Storage for Technology
		/// </summary>
		private WebServiceTechnology technologyPropertyStorage = WebServiceTechnology.SoapHttpClientProtocol;
		
		/// <summary>
		/// Gets or sets the value of Technology domain property.
		/// Technology used by remote WS implementation
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Technology.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Technology.Category", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionWebService/Technology.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(WebServiceTechnology.SoapHttpClientProtocol)]
		[DslModeling::DomainObjectId("a21e5234-0f88-4728-a883-038589f4aac3")]
		public WebServiceTechnology Technology
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return technologyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TechnologyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionWebService.Technology domain property.
		/// </summary>
		internal sealed partial class TechnologyPropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionWebService, WebServiceTechnology>
		{
			private TechnologyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionWebService.Technology domain property value handler.
			/// </summary>
			public static readonly TechnologyPropertyHandler Instance = new TechnologyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionWebService.Technology domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TechnologyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed WebServiceTechnology GetValue(TransactionWebService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.technologyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionWebService element, WebServiceTechnology newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				WebServiceTechnology oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.technologyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass OutputTransactionWebService
	/// Description for
	/// TransactionKernelDSL.Framework.Language.OutputTransactionWebService
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.OutputTransactionWebService.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.OutputTransactionWebService.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("407dac2b-f175-4575-a1c3-641bdec4cf8b")]
	public partial class OutputTransactionWebService : TransactionWebService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OutputTransactionWebService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x407dac2b, 0xf175, 0x4575, 0xa1, 0xc3, 0x64, 0x1b, 0xde, 0xc4, 0xcf, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutputTransactionWebService(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutputTransactionWebService(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebService
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasOutputTransactionWebServices.OutputTransactionWebServiceDomainRoleId, value);
			}
		}
		#endregion
		#region TransactionHandlers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionHandlers.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.OutputTransactionWebService
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionHandler> TransactionHandlers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionHandler>, TransactionHandler>(global::TransactionKernelDSL.Framework.Language.TransactionHandlerReferencesOutputTransactionWebService.OutputTransactionWebServiceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TimeTrigger
	/// Description for TransactionKernelDSL.Framework.Language.TimeTrigger
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TimeTrigger.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TimeTrigger.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("673b58bf-5573-4d87-9546-63d5b3508429")]
	public partial class TimeTrigger : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TimeTrigger domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x673b58bf, 0x5573, 0x4d87, 0x95, 0x46, 0x63, 0xd5, 0xb3, 0x50, 0x84, 0x29);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeTrigger(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeTrigger(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x33e24177, 0x1a05, 0x4ccd, 0xa3, 0x07, 0xd8, 0xcd, 0xe4, 0x94, 0x34, 0xda);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Trigger's Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TimeTrigger/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TimeTrigger/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("33e24177-1a05-4ccd-a307-d8cde49434da")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TimeTrigger.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TimeTrigger, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TimeTrigger.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TimeTrigger.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TimeTrigger element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TimeTrigger element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTrigger
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTimeTriggers.TimeTriggerDomainRoleId, value);
			}
		}
		#endregion
		#region InputTransactionEngine opposite domain role accessor
		/// <summary>
		/// Gets or sets InputTransactionEngine.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.TimeTrigger
		/// </summary>
		public virtual InputTransactionEngine InputTransactionEngine
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.TimeTriggerDomainRoleId) as InputTransactionEngine;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.InputTransactionEngineReferencesTimeTriggers.TimeTriggerDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionDataSourceSupport
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("fc4b337e-2ba0-40d4-b106-ca7f45780ba1")]
	public partial class TransactionDataSourceSupport : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionDataSourceSupport domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc4b337e, 0x2ba0, 0x40d4, 0xb1, 0x06, 0xca, 0x7f, 0x45, 0x78, 0x0b, 0xa1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionDataSourceSupport(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionDataSourceSupport(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x7235ea2b, 0xaf1b, 0x4abf, 0xa0, 0x45, 0x99, 0xc1, 0xf2, 0x13, 0x88, 0x09);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport.Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("7235ea2b-af1b-4abf-a045-99c1f2138809")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionDataSourceSupport.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionDataSourceSupport, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionDataSourceSupport.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionDataSourceSupport.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionDataSourceSupport element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionDataSourceSupport element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SupportType domain property code
		
		/// <summary>
		/// SupportType domain property Id.
		/// </summary>
		public static readonly global::System.Guid SupportTypeDomainPropertyId = new global::System.Guid(0x02637180, 0x8dcd, 0x492c, 0x8b, 0xf6, 0xb8, 0x4e, 0x4a, 0x46, 0xd8, 0x39);
		
		/// <summary>
		/// Storage for SupportType
		/// </summary>
		private DataSourceSupportType supportTypePropertyStorage = DataSourceSupportType.NotTyped;
		
		/// <summary>
		/// Gets or sets the value of SupportType domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport.Support
		/// Type
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport/SupportType.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionDataSourceSupport/SupportType.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataSourceSupportType.NotTyped)]
		[DslModeling::DomainObjectId("02637180-8dcd-492c-8bf6-b84e4a46d839")]
		public DataSourceSupportType SupportType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return supportTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SupportTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionDataSourceSupport.SupportType domain property.
		/// </summary>
		internal sealed partial class SupportTypePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionDataSourceSupport, DataSourceSupportType>
		{
			private SupportTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionDataSourceSupport.SupportType domain property value handler.
			/// </summary>
			public static readonly SupportTypePropertyHandler Instance = new SupportTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionDataSourceSupport.SupportType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SupportTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataSourceSupportType GetValue(TransactionDataSourceSupport element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.supportTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionDataSourceSupport element, DataSourceSupportType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataSourceSupportType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.supportTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OutputTransactionEngines opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OutputTransactionEngines.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.TransactionDataSourceSupport
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<OutputTransactionEngine> OutputTransactionEngines
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<OutputTransactionEngine>, OutputTransactionEngine>(global::TransactionKernelDSL.Framework.Language.OutputTransactionEngineReferencesTransactionDataSourceSupport.TransactionDataSourceSupportDomainRoleId);
			}
		}
		#endregion
		#region TransactionLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupport
		/// </summary>
		public virtual TransactionLayer TransactionLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId) as TransactionLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionLayerHasTransactionDataSourceSupports.TransactionDataSourceSupportDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionEnvironmentLayer
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("ca2b8d4e-d613-40cc-877a-a7b9aa62ab97")]
	public partial class TransactionEnvironmentLayer : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionEnvironmentLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca2b8d4e, 0xd613, 0x40cc, 0x87, 0x7a, 0xa7, 0xb9, 0xaa, 0x62, 0xab, 0x97);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionEnvironmentLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionEnvironmentLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x794a615e, 0x9c16, 0x419d, 0xa3, 0xd0, 0xba, 0x44, 0x30, 0xee, 0x78, 0x15);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer.Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("794a615e-9c16-419d-a3d0-ba4430ee7815")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEnvironmentLayer.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEnvironmentLayer, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEnvironmentLayer.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEnvironmentLayer.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEnvironmentLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEnvironmentLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionModel.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayer
		/// </summary>
		public virtual TransactionModel TransactionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId) as TransactionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionModelHasTransactionEnvironmentLayer.TransactionEnvironmentLayerDomainRoleId, value);
			}
		}
		#endregion
		#region TransactionEnvironmentSQLServerVariables opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TransactionEnvironmentSQLServerVariables.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TransactionEnvironmentSQLServerVariable> TransactionEnvironmentSQLServerVariables
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionEnvironmentSQLServerVariable>, TransactionEnvironmentSQLServerVariable>(global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable sourceTransactionEnvironmentSQLServerVariable1 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable;
			if (sourceTransactionEnvironmentSQLServerVariable1 != null)
			{
				// Create link for path TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariables
				this.TransactionEnvironmentSQLServerVariables.Add(sourceTransactionEnvironmentSQLServerVariable1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable sourceTransactionEnvironmentSQLServerVariable1 = sourceElement as global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable;
			if (sourceTransactionEnvironmentSQLServerVariable1 != null)
			{
				// Delete link for path TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariables
				
				foreach (DslModeling::ElementLink link in global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.GetLinks((global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayer)this, sourceTransactionEnvironmentSQLServerVariable1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentLayerDomainRoleId, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace TransactionKernelDSL.Framework.Language
{
	/// <summary>
	/// DomainClass TransactionEnvironmentSQLServerVariable
	/// Description for
	/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable
	/// </summary>
	[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9ed1d0fa-25c2-4ea5-8df7-b31d23263bb2")]
	public partial class TransactionEnvironmentSQLServerVariable : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TransactionEnvironmentSQLServerVariable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9ed1d0fa, 0x25c2, 0x4ea5, 0x8d, 0xf7, 0xb3, 0x1d, 0x23, 0x26, 0x3b, 0xb2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionEnvironmentSQLServerVariable(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TransactionEnvironmentSQLServerVariable(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3a1e9238, 0xc60c, 0x4558, 0xa4, 0x33, 0x57, 0xeb, 0x14, 0xbe, 0x41, 0xa9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable.Name
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable/Name.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable/Name.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3a1e9238-c60c-4558-a433-57eb14be41a9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEnvironmentSQLServerVariable.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEnvironmentSQLServerVariable, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEnvironmentSQLServerVariable.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEnvironmentSQLServerVariable.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEnvironmentSQLServerVariable element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEnvironmentSQLServerVariable element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultValue domain property code
		
		/// <summary>
		/// DefaultValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultValueDomainPropertyId = new global::System.Guid(0xaaba969c, 0xbc50, 0x46b3, 0x98, 0xc2, 0xae, 0x49, 0xe4, 0x5a, 0x0b, 0x54);
		
		/// <summary>
		/// Storage for DefaultValue
		/// </summary>
		private global::System.String defaultValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultValue domain property.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable.Default Value
		/// </summary>
		[DslDesign::DisplayNameResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable/DefaultValue.DisplayName", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TransactionKernelDSL.Framework.Language.TransactionEnvironmentSQLServerVariable/DefaultValue.Description", typeof(global::TransactionKernelDSL.Framework.Language.TrnxDslDomainModel), "TransactionKernelDSL.Framework.Language.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("aaba969c-bc50-46b3-98c2-ae49e45a0b54")]
		public global::System.String DefaultValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TransactionEnvironmentSQLServerVariable.DefaultValue domain property.
		/// </summary>
		internal sealed partial class DefaultValuePropertyHandler : DslModeling::DomainPropertyValueHandler<TransactionEnvironmentSQLServerVariable, global::System.String>
		{
			private DefaultValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TransactionEnvironmentSQLServerVariable.DefaultValue domain property value handler.
			/// </summary>
			public static readonly DefaultValuePropertyHandler Instance = new DefaultValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TransactionEnvironmentSQLServerVariable.DefaultValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TransactionEnvironmentSQLServerVariable element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TransactionEnvironmentSQLServerVariable element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransactionEnvironmentLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets TransactionEnvironmentLayer.
		/// Description for
		/// TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariable
		/// </summary>
		public virtual TransactionEnvironmentLayer TransactionEnvironmentLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId) as TransactionEnvironmentLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TransactionKernelDSL.Framework.Language.TransactionEnvironmentLayerHasTransactionEnvironmentSQLServerVariables.TransactionEnvironmentSQLServerVariableDomainRoleId, value);
			}
		}
		#endregion
	}
}
