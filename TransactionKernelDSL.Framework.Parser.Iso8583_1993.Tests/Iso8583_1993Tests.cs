using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens._Q1_AUTH_MODE_ID_TKN;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens._Q2_ACC_ID_TKN;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens._Q6_PART_CHGS_TKN;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens._C0_PS51_TKN;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens._04_PS50_TKN;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens._C4_PT_SRV_DATA_TKN;
using TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tokens;
using System.Collections.Generic;

namespace TransactionKernelDSL.Framework.Parser.Iso8583_1993.Tests
{
    [TestClass]
    public class Iso8583_1993Tests
    {
        [TestMethod]
        public void Disassemble_Assemble_EDENRED_0200_002000_Test()
        {
            byte[] inputArr = new byte[] {  0x01, 0xd4, 0x49, 0x53, 0x4F, 
                                            0x30, 0x32, 0x36, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
                                            0x30, 0x32, 0x30, 0x30, 
                                            //B238C40128A1901A
                                            0xB2, 0x38, 0xC4, 0x01, 0x28, 0xA1, 0x90, 0x1A,
                                            //00 00 00 00 10 00 00 9C
                                            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x9c,
                                            0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x32, 0x30, 0x33, 0x32, 0x35, 0x38, 0x30, 0x30, 0x33, 0x36, 0x35, 0x32, 0x31, 0x37, 0x33, 0x32, 0x35, 0x38, 0x31, 0x31, 0x32, 0x32, 0x31, 0x31, 0x32, 0x32, 0x35, 0x34, 0x31, 0x31, 0x39, 0x30, 0x32, 0x30, 0x31, 0x31, 0x33, 0x32, 0x36, 0x30, 0x33, 0x36, 0x30, 0x34, 0x31, 0x32, 0x31, 0x32, 0x35, 0x31, 0x36, 0x37, 0x30, 0x37, 0x3D, 0x31, 0x32, 0x31, 0x35, 0x35, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x33, 0x37, 0x31, 0x33, 0x30, 0x31, 0x35, 0x36, 0x33, 0x31, 0x32, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x45, 0x52, 0x4D, 0x49, 0x4E, 0x41, 0x4C, 0x20, 0x50, 0x52, 0x55, 0x45, 0x42, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x46, 0x20, 0x4D, 0x58, 0x30, 0x32, 0x37, 0x35, 0x36, 0x33, 0x31, 0x32, 0x31, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x34, 0x38, 0x34, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x31, 0x36, 0x46, 0x44, 0x4D, 0x53, 0x52, 0x45, 0x47, 0x35, 0x2B, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x39, 0x42, 0x30, 0x34, 0x34, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x38, 0x26, 0x20, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x37, 0x38, 0x21, 0x20, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x20, 0x21, 0x20, 0x43, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x36, 0x35, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x31, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x39, 0x31, 0x36, 0x33, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x50, 0x20, 0x42, 0x32, 0x34, 0x20, 0x42, 0x32, 0x34, 0x20, 0x31, 0x33, 0x30, 0x33, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x3F };

            Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            testObject.RequestStream.Set(inputArr);
            if (testObject.Disassemble() == false)
            {
                Assert.Fail("Error en Dissasemble() -> " + testObject.ErrorMessage);
            }

            var primaryBitmap = new byte[] { 0xb2, 0x38, 0xc4, 0x01, 0x28, 0xa1, 0x90, 0x1a};
            var secondaryBitmap = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x9c };
            Assert.AreEqual(testObject.RequestStructure["Base24Header"].ToString(), "026000010");
            Assert.AreEqual(testObject.RequestStructure["MessageType"].ToString(), "0200");
            for (int i = 0; i < 8; i++)
            {
                Assert.AreEqual(testObject.RequestStructure["PrimaryBitmap"].Content[i], primaryBitmap[i]);    
            }
            for (int i = 0; i < 8; i++)
            {
                Assert.AreEqual(testObject.RequestStructure["1"].Content[i], secondaryBitmap[i]);
            }
                        
            Assert.AreEqual(testObject.RequestStructure["3"].ToString(), "002000");
            Assert.AreEqual(testObject.RequestStructure["4"].ToString(), "000000000700");
            Assert.AreEqual(testObject.RequestStructure["7"].ToString(), "1122203258");
            Assert.AreEqual(testObject.RequestStructure["11"].ToString(), "003652");
            Assert.AreEqual(testObject.RequestStructure["12"].ToString(), "173258");
            Assert.AreEqual(testObject.RequestStructure["13"].ToString(), "1122");
            Assert.AreEqual(testObject.RequestStructure["17"].ToString(), "1122");
            Assert.AreEqual(testObject.RequestStructure["18"].ToString(), "5411");
            Assert.AreEqual(testObject.RequestStructure["22"].ToString(), "902");
            Assert.AreEqual(testObject.RequestStructure["32"].ToString(), "011");
            Assert.AreEqual(testObject.RequestStructure["35"].ToString(), "326036041212516707=121550100000000");
            Assert.AreEqual(testObject.RequestStructure["37"].ToString(), "000000143713");
            Assert.AreEqual(testObject.RequestStructure["41"].ToString(), "01563121        ");
            Assert.AreEqual(testObject.RequestStructure["43"].ToString(), "TERMINAL PRUEBA       DF           DF MX");
            Assert.AreEqual(testObject.RequestStructure["48"].ToString(), "0275631213            00010001");
            Assert.AreEqual(testObject.RequestStructure["49"].ToString(), "484");
            Assert.AreEqual(testObject.RequestStructure["52"].ToString(), "FFFFFFFFFFFFFFFF");
            Assert.AreEqual(testObject.RequestStructure["60"].ToString(), "016FDMSREG5+0000000");
            Assert.AreEqual(testObject.RequestStructure["61"].ToString(), "019B044    00000000000");
            Assert.AreEqual(testObject.RequestStructure["63"].ToString(), "078& 0000300078! 0400020                   Y ! C000026         06500             ");
            Assert.AreEqual(testObject.RequestStructure["100"].ToString(), "1150000000003");
            Assert.AreEqual(testObject.RequestStructure["121"].ToString(), "020                    ");
            Assert.AreEqual(testObject.RequestStructure["124"].ToString(), "009163001001");
            Assert.AreEqual(testObject.RequestStructure["125"].ToString(), "012P B24 B24 13");
            Assert.AreEqual(testObject.RequestStructure["126"].ToString(), "038000000000000000                    000");


            testObject.ResponseStructure = testObject.RequestStructure;
            Assert.AreEqual(true, testObject.Assemble());
            for (int i = 0; i < inputArr.Length; i++)
            {
                Assert.AreEqual(inputArr[i], testObject.ResponseStream.Get()[i]); 
            }            

        }
        [TestMethod]
        public void Disassemble_Assemble_EDENRED_0210_002000_Test()
        {
            byte[] inputArr = new byte[] { 0x01,0xde,
                                            0x49,0x53,0x4F,0x30,0x32,0x36,0x30,0x30,0x30,0x30,0x31,0x35,
                                            0x30,0x32,0x31,0x30,
                                            /*B2 38 84 01 2E 81 80 1A*/
                                            0xB2,0x38,0x84,0x01,0x2e,0x81,0x80,0x1a,
                                            /*00 00 00 00 14 00 00 DC*/
                                            0x00,0x00,0x00,0x00,0x14,0x00,0x00,0xDC,
                                            0x30,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x33,0x34,0x33,0x39,0x30,0x30,0x33,0x36,0x35,0x32,0x31,0x37,0x33,0x32,0x35,0x38,0x31,0x31,0x32,0x32,0x31,0x31,0x32,0x32,0x39,0x30,0x32,0x30,0x31,0x31,0x33,0x32,0x36,0x30,0x33,0x36,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x36,0x37,0x30,0x37,0x3D,0x39,0x38,0x37,0x36,0x35,0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x33,0x37,0x31,0x33,0x33,0x39,0x33,0x39,0x36,0x33,0x30,0x30,0x30,0x31,0x35,0x36,0x33,0x31,0x32,0x31,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x32,0x37,0x35,0x36,0x33,0x31,0x32,0x31,0x33,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x34,0x38,0x34,0x30,0x31,0x36,0x46,0x44,0x4D,0x53,0x52,0x45,0x47,0x35,0x2B,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x39,0x42,0x30,0x34,0x34,0x44,0x45,0x53,0x31,0x30,0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x32,0x36,0x26,0x20,0x30,0x30,0x30,0x30,0x34,0x30,0x30,0x31,0x32,0x36,0x21,0x20,0x30,0x34,0x30,0x30,0x30,0x32,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x59,0x20,0x21,0x20,0x43,0x30,0x30,0x30,0x30,0x32,0x36,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x36,0x35,0x30,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x21,0x20,0x55,0x31,0x30,0x30,0x30,0x33,0x38,0x20,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x36,0x37,0x30,0x30,0x34,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x34,0x34,0x30,0x38,0x30,0x39,0x39,0x31,0x39,0x35,0x30,0x37,0x30,0x32,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x50,0x30,0x30,0x31,0x31,0x20,0x20,0x20,0x20,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x31,0x36,0x33,0x30,0x30,0x31,0x30,0x30,0x31,0x30,0x31,0x32,0x50,0x39,0x42,0x32,0x34,0x20,0x42,0x32,0x34,0x20,0x31,0x33,0x30,0x33,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x33,0x32,0x35,0x33,0x30,0x38,0x32,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x30,0x30 };


       
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            testObject.RequestStream.Set(inputArr);
            Assert.AreEqual(true, testObject.Disassemble());

            var primaryBitmap = new byte[] { 0xb2, 0x38, 0x84, 0x01, 0x2e, 0x81, 0x80, 0x1a };
            var secondaryBitmap = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0xdc };

            Assert.AreEqual(testObject.RequestStructure["Base24Header"].ToString(), "026000015");
            Assert.AreEqual(testObject.RequestStructure["MessageType"].ToString(), "0210");
            for (int i = 0; i < 8; i++)
            {
                Assert.AreEqual(testObject.RequestStructure["PrimaryBitmap"].Content[i], primaryBitmap[i]);
            }
            for (int i = 0; i < 8; i++)
            {
                Assert.AreEqual(testObject.RequestStructure["1"].Content[i], secondaryBitmap[i]);
            }
            Assert.AreEqual(testObject.RequestStructure["3"].ToString(), "002000");
            Assert.AreEqual(testObject.RequestStructure["4"].ToString(), "000000000700");
            Assert.AreEqual(testObject.RequestStructure["7"].ToString(), "1122203439");
            Assert.AreEqual(testObject.RequestStructure["11"].ToString(), "003652");
            Assert.AreEqual(testObject.RequestStructure["12"].ToString(), "173258");
            Assert.AreEqual(testObject.RequestStructure["13"].ToString(), "1122");
            Assert.AreEqual(testObject.RequestStructure["17"].ToString(), "1122");
            Assert.AreEqual(testObject.RequestStructure["22"].ToString(), "902");
            Assert.AreEqual(testObject.RequestStructure["32"].ToString(), "011");
            Assert.AreEqual(testObject.RequestStructure["35"].ToString(), "326036123456786707=987650100000000");
            Assert.AreEqual(testObject.RequestStructure["37"].ToString(), "000000143713");
            Assert.AreEqual(testObject.RequestStructure["38"].ToString(), "393963");
            Assert.AreEqual(testObject.RequestStructure["39"].ToString(), "00");
            Assert.AreEqual(testObject.RequestStructure["41"].ToString(), "01563121        ");
            Assert.AreEqual(testObject.RequestStructure["48"].ToString(), "0275631213            00010001");
            Assert.AreEqual(testObject.RequestStructure["49"].ToString(), "484");
            Assert.AreEqual(testObject.RequestStructure["60"].ToString(), "016FDMSREG5+0000000");
            Assert.AreEqual(testObject.RequestStructure["61"].ToString(), "019B044DES100100000000");
            Assert.AreEqual(testObject.RequestStructure["63"].ToString(), "126& 0000400126! 0400020                   Y ! C000026         06500             ! U100038 10000000000006700420000000000000000000");
            Assert.AreEqual(testObject.RequestStructure["100"].ToString(), "0244");
            Assert.AreEqual(testObject.RequestStructure["102"].ToString(), "0809919507");
            Assert.AreEqual(testObject.RequestStructure["121"].ToString(), "020                  P0");
            Assert.AreEqual(testObject.RequestStructure["124"].ToString(), "009163001001");
            Assert.AreEqual(testObject.RequestStructure["125"].ToString(), "012P9B24 B24 13");
            Assert.AreEqual(testObject.RequestStructure["126"].ToString(), "03800000000000000053253082            000");

            testObject.ResponseStructure = testObject.RequestStructure;
            Assert.AreEqual(true, testObject.Assemble());
            for (int i = 0; i < inputArr.Length; i++)
            {
                Assert.AreEqual(inputArr[i], testObject.ResponseStream.Get()[i]);
            }    

        }
        [TestMethod]
        public void Disassemble_Assemble_EDENRED_0420_002000_Test()
        {
            byte[] inputArr = new byte[] { 0x01,0xf6,
                                            0x49,0x53,0x4F,
                                            0x30,0x32,0x36,0x30,0x30,0x30,0x30,0x31,0x30,
                                            0x30,0x34,0x32,0x30,
                                            0x42,0x32,0x33,0x41,0x38,0x34,0x30,0x31,0x32,0x45,0x41,0x31,0x38,0x30,0x31,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x30,0x31,0x34,0x30,0x30,0x30,0x31,0x42,0x43,0x30,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x33,0x33,0x31,0x36,0x30,0x30,0x33,0x36,0x35,0x33,0x31,0x37,0x33,0x32,0x35,0x38,0x31,0x31,0x32,0x32,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x39,0x30,0x32,0x30,0x31,0x31,0x33,0x32,0x36,0x30,0x33,0x36,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x36,0x37,0x30,0x37,0x3D,0x39,0x38,0x37,0x36,0x35,0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x33,0x37,0x31,0x33,0x33,0x39,0x33,0x39,0x36,0x33,0x52,0x39,0x30,0x31,0x35,0x36,0x33,0x31,0x32,0x31,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x54,0x45,0x52,0x4D,0x49,0x4E,0x41,0x4C,0x20,0x50,0x52,0x55,0x45,0x42,0x41,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x44,0x46,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x44,0x46,0x20,0x4D,0x58,0x30,0x32,0x37,0x35,0x36,0x33,0x31,0x32,0x31,0x33,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x34,0x38,0x34,0x30,0x31,0x36,0x46,0x44,0x4D,0x53,0x52,0x45,0x47,0x35,0x2B,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x39,0x42,0x30,0x34,0x34,0x44,0x45,0x53,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x33,0x37,0x31,0x33,0x31,0x31,0x32,0x32,0x31,0x37,0x33,0x32,0x35,0x38,0x39,0x39,0x31,0x31,0x32,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x33,0x30,0x38,0x30,0x39,0x39,0x31,0x39,0x35,0x30,0x37,0x30,0x32,0x39,0x50,0x4F,0x53,0x20,0x4D,0x45,0x58,0x49,0x43,0x4F,0x20,0x49,0x4E,0x54,0x45,0x52,0x4E,0x45,0x54,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x30,0x30,0x30,0x30,0x32,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x33,0x37,0x31,0x33,0x30,0x30,0x30,0x30,0x31,0x34,0x33,0x37,0x31,0x33,0x30,0x30,0x39,0x31,0x36,0x33,0x30,0x30,0x31,0x30,0x30,0x31,0x30,0x31,0x32,0x50,0x20,0x42,0x32,0x34,0x20,0x42,0x32,0x34,0x20,0x31,0x33,0x30,0x33,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x30,0x30,0x3F };


            string _0420_002000_input = "ISO0260000100420B23A84012EA1801800000040140001BC0020000000000007001122203316003653173258112200001122902011326036123456786707=987650100000000000000143713393963R901563121        TERMINAL PRUEBA       DF           DF MX0275631213            00010001484016FDMSREG5+0000000019B044DES10000000000002000000001437131122173258991122000000000011500000000030809919507029POS MEXICO INTERNET      0000020                    02000001437130000143713009163001001012P B24 B24 13038000000000000000                    000?";
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            testObject.RequestStream.Set(inputArr);
            Assert.AreEqual(true, testObject.Disassemble());

            var primaryBitmap = new byte[] { 0xb2, 0x38, 0x84, 0x01, 0x2e, 0x81, 0x80, 0x1a };
            var secondaryBitmap = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0xdc };

            Assert.AreEqual(testObject.RequestStructure["Base24Header"].ToString(), "026000010");
            Assert.AreEqual(testObject.RequestStructure["MessageType"].ToString(), "0420");
            for (int i = 0; i < 8; i++)
            {
                Assert.AreEqual(testObject.RequestStructure["PrimaryBitmap"].Content[i], primaryBitmap[i]);
            }
            for (int i = 0; i < 8; i++)
            {
                Assert.AreEqual(testObject.RequestStructure["1"].Content[i], secondaryBitmap[i]);
            }
            Assert.AreEqual(testObject.RequestStructure["3"].ToString(), "002000");
            Assert.AreEqual(testObject.RequestStructure["4"].ToString(), "000000000700");
            Assert.AreEqual(testObject.RequestStructure["7"].ToString(), "1122203316");
            Assert.AreEqual(testObject.RequestStructure["11"].ToString(), "003653");
            Assert.AreEqual(testObject.RequestStructure["12"].ToString(), "173258");
            Assert.AreEqual(testObject.RequestStructure["13"].ToString(), "1122");
            Assert.AreEqual(testObject.RequestStructure["15"].ToString(), "0000");
            Assert.AreEqual(testObject.RequestStructure["17"].ToString(), "1122");
            Assert.AreEqual(testObject.RequestStructure["22"].ToString(), "902");
            Assert.AreEqual(testObject.RequestStructure["32"].ToString(), "011");
            Assert.AreEqual(testObject.RequestStructure["35"].ToString(), "326036123456786707=987650100000000");
            Assert.AreEqual(testObject.RequestStructure["37"].ToString(), "000000143713");
            Assert.AreEqual(testObject.RequestStructure["38"].ToString(), "393963");
            Assert.AreEqual(testObject.RequestStructure["39"].ToString(), "R9");
            Assert.AreEqual(testObject.RequestStructure["41"].ToString(), "01563121        ");
            Assert.AreEqual(testObject.RequestStructure["43"].ToString(), "TERMINAL PRUEBA       DF           DF MX");
            Assert.AreEqual(testObject.RequestStructure["48"].ToString(), "0275631213            00010001");
            Assert.AreEqual(testObject.RequestStructure["49"].ToString(), "484");
            Assert.AreEqual(testObject.RequestStructure["60"].ToString(), "016FDMSREG5+0000000");
            Assert.AreEqual(testObject.RequestStructure["61"].ToString(), "019B044DES100000000000");
            Assert.AreEqual(testObject.RequestStructure["90"].ToString(), "020000000014371311221732589911220000000000");
            Assert.AreEqual(testObject.RequestStructure["100"].ToString(), "1150000000003");
            Assert.AreEqual(testObject.RequestStructure["102"].ToString(), "0809919507");
            Assert.AreEqual(testObject.RequestStructure["120"].ToString(), "029POS MEXICO INTERNET      0000");
            Assert.AreEqual(testObject.RequestStructure["121"].ToString(), "020                    ");
            Assert.AreEqual(testObject.RequestStructure["123"].ToString(), "02000001437130000143713");
            Assert.AreEqual(testObject.RequestStructure["124"].ToString(), "009163001001");
            Assert.AreEqual(testObject.RequestStructure["125"].ToString(), "012P B24 B24 13");
            Assert.AreEqual(testObject.RequestStructure["126"].ToString(), "038000000000000000                    000");




            testObject.ResponseStructure = testObject.RequestStructure;
            Assert.AreEqual(true, testObject.Assemble());
            Assert.AreEqual(_0420_002000_input, (testObject.ResponseStream as Iso8583_1993Stream).ToString(false));

        }
        [TestMethod]
        public void Disassemble_Assemble_EDENRED_0430_002000_Test()
        {
            //string _0430_002000_input = "ISO0260000100430B22004012A80800800000040040001840020000000000007001122203457003653902011326036123456786707=9876501000000000000001437130001563121        484019B044DES1000000000000200000000143713112217325899112200000000000809919507029POS MEXICO INTERNET      0000020                    038000000000000000                    000";
            //Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            //(testObject.RequestStream as Iso8583_1993Stream).Set(_0430_002000_input);
            //Assert.AreEqual(true, testObject.Disassemble());


            //Assert.AreEqual(testObject.RequestStructure["Base24Header"].ToString(), "026000010");
            //Assert.AreEqual(testObject.RequestStructure["MessageType"].ToString(), "0430");
            //Assert.AreEqual(testObject.RequestStructure["PrimaryBitmap"].ToString(), "B22004012A808008");
            //Assert.AreEqual(testObject.RequestStructure["1"].ToString(), "0000004004000184");
            //Assert.AreEqual(testObject.RequestStructure["3"].ToString(), "002000");
            //Assert.AreEqual(testObject.RequestStructure["4"].ToString(), "000000000700");
            //Assert.AreEqual(testObject.RequestStructure["7"].ToString(), "1122203457");
            //Assert.AreEqual(testObject.RequestStructure["11"].ToString(), "003653");
            //Assert.AreEqual(testObject.RequestStructure["22"].ToString(), "902");
            //Assert.AreEqual(testObject.RequestStructure["32"].ToString(), "011");
            //Assert.AreEqual(testObject.RequestStructure["35"].ToString(), "326036123456786707=987650100000000");
            //Assert.AreEqual(testObject.RequestStructure["37"].ToString(), "000000143713");
            //Assert.AreEqual(testObject.RequestStructure["39"].ToString(), "00");
            //Assert.AreEqual(testObject.RequestStructure["41"].ToString(), "01563121        ");
            //Assert.AreEqual(testObject.RequestStructure["49"].ToString(), "484");
            //Assert.AreEqual(testObject.RequestStructure["61"].ToString(), "019B044DES100000000000");
            //Assert.AreEqual(testObject.RequestStructure["90"].ToString(), "020000000014371311221732589911220000000000");
            //Assert.AreEqual(testObject.RequestStructure["102"].ToString(), "0809919507");
            //Assert.AreEqual(testObject.RequestStructure["120"].ToString(), "029POS MEXICO INTERNET      0000");
            //Assert.AreEqual(testObject.RequestStructure["121"].ToString(), "020                    ");
            //Assert.AreEqual(testObject.RequestStructure["126"].ToString(), "038000000000000000                    000");


            //testObject.ResponseStructure = testObject.RequestStructure;
            //Assert.AreEqual(true, testObject.Assemble());
            //Assert.AreEqual(_0430_002000_input, (testObject.ResponseStream as Iso8583_1993Stream).ToString(false));

        }
        [TestMethod]
        public void DisassemblePos0200_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();

            testObject.RequestStream.Set(new byte[] {   0x02,0x34,0x49, 0x53, 0x4F,                                       //ISO
                                                            0x30, 0x32, 0x36, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,   //HEADER
                                                            0x30, 0x32, 0x30, 0x30,                                 //MSG ID
                                                            0x42, 0x41, 0x42, 0x43, 0x43, 0x34, 0x41, 0x31, 0x32, 0x38, 0x45, 0x31, 0x43, 0x30, 0x31, 0x45,   //BMP
                                                            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x30,   //F1   
                                                            0x30, 0x30, 0x30, 0x30, 0x33, 0x30,                     //F3
                                                            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30,  //F4
                                                            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x38, 0x30,  //F5
                                                            0x30, 0x32, 0x31, 0x34, 0x30, 0x37, 0x31, 0x39, 0x34, 0x36, 
                                                            0x36, 0x30, 0x32, 0x38, 0x39, 0x37, 0x37, 0x31, 
                                                            0x30, 0x32, 0x34, 0x31, 0x35, 0x33,
                                                            0x30, 0x34, 0x31, 0x39, 0x34, 0x36, 
                                                            0x30, 0x32, 0x31, 0x34, 
                                                            0x30, 0x39, 0x30, 0x37, 
                                                            0x30, 0x32, 0x31, 0x34, 
                                                            0x35, 0x39, 0x36, 0x39, 
                                                            0x30, 0x31, 0x31,
                                                            0x30, 0x30, 
                                                            0x36,
                                                            0x30, 0x39, 0x39, 0x30, 0x33, 0x32, 0x39, 0x34, 0x30, 0x31, 0x30, 
                                                            0x32, 0x31, 0x35, 0x33, 0x32, 0x33, 0x36, 0x39, 0x30, 0x30, 0x37, 0x35, 0x33, 0x36, 0x34, 0x30, 0x30, 0x37, 0x3D, 0x30, 0x39, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x39, 0x34, 0x34, 0x31, 0x35, 0x30, 0x39, 0x30, 0x31, 0x31, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x38, 0x35, 0x35, 0x37, 0x30, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x45, 0x52, 0x53, 0x4F, 0x4E, 0x41, 0x4C, 0x20, 0x4C, 0x49, 0x47, 0x48, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4C, 0x20, 0x46, 0x45, 0x44, 0x45, 0x52, 0x30, 0x30, 0x20, 0x41, 0x52, 0x30, 0x32, 0x37, 0x35, 0x31, 0x38, 0x32, 0x34, 0x30, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x36, 0x30, 0x33, 0x32, 0x38, 0x34, 0x30, 0x30, 0x31, 0x36, 0x50, 0x52, 0x4F, 0x50, 0x50, 0x52, 0x4F, 0x32, 0x2B, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x39, 0x4D, 0x43, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x30, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x35, 0x36, 0x26, 0x20, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x31, 0x35, 0x36, 0x21, 0x20, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x20, 0x21, 0x20, 0x43, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x20, 0x33, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x20, 0x31, 0x20, 0x30, 0x30, 0x20, 0x21, 0x20, 0x43, 0x34, 0x30, 0x30, 0x30, 0x31, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x32, 0x21, 0x20, 0x52, 0x32, 0x30, 0x30, 0x30, 0x34, 0x36, 0x20, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x20, 0x20, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x39, 0x4C, 0x20, 0x4E, 0x20, 0x41, 0x4C, 0x45, 0x4D, 0x20, 0x31, 0x31, 0x31, 0x30, 0x20, 0x34, 0x54, 0x4F, 0x20, 0x50, 0x49, 0x53, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x39, 0x31, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x39, 0x30, 0x38, 0x37, 0x30, 0x30, 0x31, 0x3F }, 566);

            Assert.AreEqual(true, testObject.Disassemble());


        }
        [TestMethod]
        public void DissasembleField60WithLength000_Test()
        {
            Iso8583_1993Parser testParser = new Iso8583_1993Parser();
            //

            testParser.RequestStream.Set(new byte[] { 0x01, 0x6B, 0x49, 0x53, 0x4F, 0x30, 0x32, 0x34, 0x30, 0x30, 0x30, 0x30, 0x31, 0x36, 0x30, 0x32, 0x30, 0x30, 0x32, 0x32, 0x33, 0x41, 0x30, 0x31, 0x30, 0x31, 0x41, 0x30, 0x43, 0x38, 0x39, 0x30, 0x35, 0x38, 0x33, 0x30, 0x32, 0x32, 0x30, 0x30, 0x31, 0x31, 0x30, 0x35, 0x31, 0x35, 0x33, 0x34, 0x30, 0x36, 0x30, 0x30, 0x30, 0x31, 0x31, 0x34, 0x31, 0x35, 0x33, 0x34, 0x30, 0x36, 0x31, 0x31, 0x30, 0x35, 0x31, 0x31, 0x30, 0x35, 0x30, 0x30, 0x34, 0x31, 0x31, 0x30, 0x30, 0x39, 0x30, 0x34, 0x33, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x31, 0x30, 0x30, 0x39, 0x37, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x34, 0x46, 0x33, 0x45, 0x31, 0x35, 0x32, 0x35, 0x42, 0x44, 0x42, 0x37, 0x35, 0x37, 0x33, 0x45, 0x35, 0x42, 0x41, 0x45, 0x44, 0x38, 0x35, 0x39, 0x31, 0x38, 0x44, 0x42, 0x34, 0x42, 0x39, 0x42, 0x38, 0x45, 0x36, 0x31, 0x42, 0x44, 0x43, 0x43, 0x38, 0x31, 0x45, 0x38, 0x32, 0x37, 0x30, 0x31, 0x32, 0x44, 0x33, 0x34, 0x30, 0x45, 0x43, 0x42, 0x44, 0x35, 0x46, 0x35, 0x38, 0x33, 0x36, 0x34, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x39, 0x36, 0x32, 0x35, 0x31, 0x32, 0x44, 0x37, 0x35, 0x44, 0x42, 0x44, 0x33, 0x31, 0x38, 0x43, 0x43, 0x36, 0x44, 0x33, 0x38, 0x46, 0x36, 0x45, 0x46, 0x36, 0x35, 0x39, 0x34, 0x41, 0x33, 0x32, 0x43, 0x42, 0x30, 0x42, 0x34, 0x46, 0x44, 0x37, 0x38, 0x45, 0x31, 0x36, 0x37, 0x31, 0x44, 0x38, 0x35, 0x32, 0x34, 0x41, 0x42, 0x45, 0x38, 0x32, 0x31, 0x35, 0x31, 0x44, 0x46, 0x42, 0x44, 0x36, 0x34, 0x45, 0x31, 0x36, 0x39, 0x33, 0x41, 0x38, 0x41, 0x45, 0x37, 0x41, 0x41, 0x46, 0x31, 0x33, 0x34, 0x46, 0x34, 0x34, 0x37, 0x38, 0x46, 0x42, 0x30, 0x44, 0x37, 0x37, 0x38, 0x33, 0x45, 0x42, 0x37, 0x36, 0x31, 0x35, 0x32, 0x33, 0x36, 0x38, 0x46, 0x43, 0x31, 0x32, 0x42, 0x32, 0x31, 0x37, 0x38, 0x38, 0x32, 0x35, 0x37, 0x30, 0x31, 0x31, 0x30, 0x30, 0x39, 0x37, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x35, 0x36, 0x30, 0x31, 0x32, 0x30, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x36, 0x30, 0x30, 0x30, 0x41, 0x32, 0x42, 0x42, 0x33, 0x44, 0x34, 0x46, 0x43, 0x41, 0x36, 0x41, 0x32, 0x35, 0x38, 0x46 });
            Assert.AreEqual(testParser.Disassemble(), true);

        }

        [TestMethod]
        public void AssemblePos0200_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            Iso8583_1993Structure testStructure = testObject.RequestStructure as Iso8583_1993Structure;

            ((Iso8583_1993Field)testStructure["Base24Header"]).CopyContentFrom("026000010");
            ((Iso8583_1993Field)testStructure["MessageType"]).CopyContentFrom("0200");
            ((Iso8583_1993Field)testStructure["PrimaryBitmap"]).CopyContentFrom("BABCC4A128E1C01E");
            ((Iso8583_1993Field)testStructure["1"]).CopyContentFrom("0000000000000130");
            ((Iso8583_1993Field)testStructure["3"]).CopyContentFrom("000030");
            ((Iso8583_1993Field)testStructure["4"]).CopyContentFrom("000000002000");
            ((Iso8583_1993Field)testStructure["5"]).CopyContentFrom("000000000580");
            ((Iso8583_1993Field)testStructure["7"]).CopyContentFrom("0214071946");
            ((Iso8583_1993Field)testStructure["9"]).CopyContentFrom("60289771");
            ((Iso8583_1993Field)testStructure["11"]).CopyContentFrom("024153");
            ((Iso8583_1993Field)testStructure["12"]).CopyContentFrom("041946");
            ((Iso8583_1993Field)testStructure["13"]).CopyContentFrom("0214");
            ((Iso8583_1993Field)testStructure["14"]).CopyContentFrom("0907");
            ((Iso8583_1993Field)testStructure["17"]).CopyContentFrom("0214");
            ((Iso8583_1993Field)testStructure["18"]).CopyContentFrom("5969");
            ((Iso8583_1993Field)testStructure["22"]).CopyContentFrom("011");
            ((Iso8583_1993Field)testStructure["25"]).CopyContentFrom("00");
            ((Iso8583_1993Field)testStructure["27"]).CopyContentFrom("6");
            ((Iso8583_1993Field)testStructure["32"]).CopyContentFrom("09903294010");
            ((Iso8583_1993Field)testStructure["35"]).CopyContentFrom("215323690075364007=0907");
            ((Iso8583_1993Field)testStructure["37"]).CopyContentFrom("000000039441");
            ((Iso8583_1993Field)testStructure["41"]).CopyContentFrom("50901120        ");
            ((Iso8583_1993Field)testStructure["42"]).CopyContentFrom("08557001        ");
            ((Iso8583_1993Field)testStructure["43"]).CopyContentFrom("PERSONAL LIGHT        CAPITAL FEDER00 AR");
            ((Iso8583_1993Field)testStructure["48"]).CopyContentFrom("02751824001           00060006");
            ((Iso8583_1993Field)testStructure["49"]).CopyContentFrom("032");
            ((Iso8583_1993Field)testStructure["50"]).CopyContentFrom("840");
            ((Iso8583_1993Field)testStructure["60"]).CopyContentFrom("016PROPPRO2+0000000");
            ((Iso8583_1993Field)testStructure["61"]).CopyContentFrom("019MCAR    03100000000");
            ((Iso8583_1993Field)testStructure["62"]).CopyContentFrom("01001003     ");
            ((Iso8583_1993Field)testStructure["63"]).CopyContentFrom("156& 0000500156! 0400020  00000000032      Y ! C000026 301     0000      00 1 00 ! C400012 000000000072! R200046 01    0                          T  0         ");
            ((Iso8583_1993Field)testStructure["120"]).CopyContentFrom("029L N ALEM 1110 4TO PISO       ");
            ((Iso8583_1993Field)testStructure["123"]).CopyContentFrom("02000000069160000000000");
            ((Iso8583_1993Field)testStructure["124"]).CopyContentFrom("009009087001");

            testObject.ResponseStructure = testStructure;

            Assert.AreEqual(true, testObject.Assemble());

            testObject.RequestStream.Set(testObject.ResponseStream.Get());
            Assert.AreEqual(true, testObject.Disassemble());



        }
        [TestMethod]
        public void DisassemblePos0100_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();

            testObject.RequestStream.Set(new byte[] { 0x02, 0x2F, 0x49, 0x53, 0x4F, 0x30, 0x32, 0x36, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x31, 0x30, 0x30, 0x42, 0x36, 0x37, 0x43, 0x43, 0x34, 0x41, 0x31, 0x32, 0x38, 0x45, 0x31, 0x41, 0x30, 0x31, 0x45, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x39, 0x30, 0x30, 0x32, 0x31, 0x34, 0x30, 0x37, 0x31, 0x39, 0x35, 0x31, 0x36, 0x33, 0x34, 0x35, 0x31, 0x30, 0x30, 0x30, 0x30, 0x32, 0x34, 0x34, 0x38, 0x31, 0x30, 0x30, 0x35, 0x37, 0x33, 0x31, 0x30, 0x32, 0x31, 0x34, 0x30, 0x39, 0x31, 0x30, 0x30, 0x32, 0x31, 0x34, 0x33, 0x33, 0x36, 0x36, 0x30, 0x31, 0x30, 0x30, 0x31, 0x36, 0x30, 0x34, 0x37, 0x39, 0x33, 0x31, 0x32, 0x31, 0x35, 0x33, 0x32, 0x33, 0x37, 0x39, 0x31, 0x37, 0x33, 0x35, 0x37, 0x38, 0x39, 0x30, 0x30, 0x33, 0x3D, 0x30, 0x39, 0x31, 0x30, 0x30, 0x33, 0x31, 0x37, 0x38, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x36, 0x35, 0x35, 0x30, 0x31, 0x39, 0x39, 0x32, 0x42, 0x55, 0x44, 0x47, 0x45, 0x54, 0x20, 0x52, 0x45, 0x4E, 0x54, 0x2D, 0x41, 0x2D, 0x43, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x49, 0x52, 0x47, 0x49, 0x4E, 0x49, 0x41, 0x20, 0x42, 0x45, 0x41, 0x43, 0x56, 0x41, 0x20, 0x55, 0x53, 0x30, 0x32, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x36, 0x35, 0x35, 0x30, 0x31, 0x39, 0x39, 0x32, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x34, 0x30, 0x30, 0x33, 0x32, 0x30, 0x31, 0x36, 0x42, 0x4E, 0x45, 0x54, 0x42, 0x4E, 0x45, 0x54, 0x2B, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x39, 0x4D, 0x43, 0x41, 0x52, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x35, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x31, 0x35, 0x36, 0x26, 0x20, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x31, 0x35, 0x36, 0x21, 0x20, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x43, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x31, 0x35, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x43, 0x34, 0x30, 0x30, 0x30, 0x31, 0x32, 0x20, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x21, 0x20, 0x52, 0x32, 0x30, 0x30, 0x30, 0x34, 0x36, 0x20, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x39, 0x42, 0x55, 0x44, 0x47, 0x45, 0x54, 0x20, 0x52, 0x45, 0x4E, 0x54, 0x2D, 0x41, 0x2D, 0x43, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F }, 561);

            Assert.AreEqual(true, testObject.Disassemble());


        }
        [TestMethod]
        public void BadDisassemblePos0100_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();

            testObject.RequestStream.Set(new byte[] { 0x02, 0x2F, 0x49, 0x53, 0x4F, 0x30, 0x32, 0x36, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x31, 0x30, 0x30, 0x42, 0x30, 0x37, 0x43, 0x43, 0x34, 0x41, 0x31, 0x32, 0x38, 0x45, 0x31, 0x41, 0x30, 0x31, 0x45, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x39, 0x30, 0x30, 0x32, 0x31, 0x34, 0x30, 0x37, 0x31, 0x39, 0x35, 0x31, 0x36, 0x33, 0x34, 0x35, 0x31, 0x30, 0x30, 0x30, 0x30, 0x32, 0x34, 0x34, 0x38, 0x31, 0x30, 0x30, 0x35, 0x37, 0x33, 0x31, 0x30, 0x32, 0x31, 0x34, 0x30, 0x39, 0x31, 0x30, 0x30, 0x32, 0x31, 0x34, 0x33, 0x33, 0x36, 0x36, 0x30, 0x31, 0x30, 0x30, 0x31, 0x36, 0x30, 0x34, 0x37, 0x39, 0x33, 0x31, 0x32, 0x31, 0x35, 0x33, 0x32, 0x33, 0x37, 0x39, 0x31, 0x37, 0x33, 0x35, 0x37, 0x38, 0x39, 0x30, 0x30, 0x33, 0x3D, 0x30, 0x39, 0x31, 0x30, 0x30, 0x33, 0x31, 0x37, 0x38, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x36, 0x35, 0x35, 0x30, 0x31, 0x39, 0x39, 0x32, 0x42, 0x55, 0x44, 0x47, 0x45, 0x54, 0x20, 0x52, 0x45, 0x4E, 0x54, 0x2D, 0x41, 0x2D, 0x43, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x49, 0x52, 0x47, 0x49, 0x4E, 0x49, 0x41, 0x20, 0x42, 0x45, 0x41, 0x43, 0x56, 0x41, 0x20, 0x55, 0x53, 0x30, 0x32, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x36, 0x35, 0x35, 0x30, 0x31, 0x39, 0x39, 0x32, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x34, 0x30, 0x30, 0x33, 0x32, 0x30, 0x31, 0x36, 0x42, 0x4E, 0x45, 0x54, 0x42, 0x4E, 0x45, 0x54, 0x2B, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x39, 0x4D, 0x43, 0x41, 0x52, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x35, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x31, 0x35, 0x36, 0x26, 0x20, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x31, 0x35, 0x36, 0x21, 0x20, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x43, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x31, 0x35, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x43, 0x34, 0x30, 0x30, 0x30, 0x31, 0x32, 0x20, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x21, 0x20, 0x52, 0x32, 0x30, 0x30, 0x30, 0x34, 0x36, 0x20, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x39, 0x42, 0x55, 0x44, 0x47, 0x45, 0x54, 0x20, 0x52, 0x45, 0x4E, 0x54, 0x2D, 0x41, 0x2D, 0x43, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F }, 561);

            Assert.AreEqual(false, testObject.Disassemble());
            Debug.WriteLine(testObject.ErrorMessage + " ->" + testObject.ResponseStream.ToString());
        }
        [TestMethod]
        public void DisassemblePos0210_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();

            testObject.RequestStream.Set(new byte[] { 0x01, 0x62, 0x49, 0x53, 0x4F, 0x30, 0x32, 0x36, 0x30, 0x30, 0x30, 0x30, 0x31, 0x35, 0x30, 0x32, 0x31, 0x30, 0x42, 0x41, 0x33, 0x41, 0x30, 0x34, 0x30, 0x30, 0x32, 0x45, 0x38, 0x31, 0x38, 0x30, 0x31, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x38, 0x30, 0x30, 0x32, 0x31, 0x34, 0x30, 0x37, 0x31, 0x39, 0x34, 0x36, 0x30, 0x32, 0x34, 0x31, 0x35, 0x33, 0x30, 0x34, 0x31, 0x39, 0x34, 0x36, 0x30, 0x32, 0x31, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x32, 0x31, 0x35, 0x33, 0x32, 0x33, 0x36, 0x39, 0x30, 0x30, 0x37, 0x35, 0x33, 0x36, 0x34, 0x30, 0x30, 0x37, 0x3D, 0x30, 0x39, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x39, 0x34, 0x34, 0x31, 0x36, 0x33, 0x32, 0x34, 0x37, 0x36, 0x30, 0x30, 0x35, 0x30, 0x39, 0x30, 0x31, 0x31, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x37, 0x35, 0x31, 0x38, 0x32, 0x34, 0x30, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x36, 0x30, 0x33, 0x32, 0x30, 0x31, 0x36, 0x50, 0x52, 0x4F, 0x50, 0x50, 0x52, 0x4F, 0x32, 0x2B, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x39, 0x4D, 0x43, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x30, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x38, 0x26, 0x20, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x39, 0x38, 0x21, 0x20, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x20, 0x20, 0x20, 0x59, 0x20, 0x21, 0x20, 0x52, 0x32, 0x30, 0x30, 0x30, 0x34, 0x36, 0x20, 0x30, 0x31, 0x20, 0x20, 0x20, 0x20, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x20, 0x20, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x37, 0x30, 0x30, 0x37, 0x35, 0x33, 0x36, 0x34 }, 356);

            Assert.AreEqual(true, testObject.Disassemble());
        }

        [TestMethod]
        public void TokenAssemble_Test()
        {
            try
            {

                string field63 = "& 0000700140! Q100002 4 ! Q200002 04! Q600006 000303! 0400020  00000000484      Y ! C000026         45080             ! C400012 002000000021";

                _Q1_AUTH_MODE_ID_TKN _Q1_Token = new _Q1_AUTH_MODE_ID_TKN();
                _Q2_ACC_ID_TKN _Q2_Token = new _Q2_ACC_ID_TKN();
                _Q6_PART_CHGS_TKN _Q6_Token = new _Q6_PART_CHGS_TKN();
                _C0_PS51_TKN _C0_Token = new _C0_PS51_TKN();
                _04_PS50_TKN _04_Token = new _04_PS50_TKN();
                _C4_PT_SRV_DATA_TKN _C4_Token = new _C4_PT_SRV_DATA_TKN();


                _04_Token.RTE_GRP = "484".PadLeft(11, '0');
                _04_Token.COMPLETE_TRACK2_DATA = "Y";


                _C0_Token.TERM_POSTAL_CDE = "45080";

                _C4_Token.TERM_LOC_IND = "2";
                _C4_Token.TERM_INPUT_CAP_IND = "2";
                _C4_Token.CRDHLDR_ID_METHOD = "1";

                _Q1_Token.AUTH_MODE_ID = "4";
                _Q2_Token.ACC_ID = "04";

                _Q6_Token.DLY = "00";
                _Q6_Token.INST = "03";
                _Q6_Token.PLAN = "03";


                Iso8583_1993TokenBuilder test = new Iso8583_1993TokenBuilder(new List<Iso8583_1993AbstractToken> 
                    { 
                        _Q1_Token,
                        _Q2_Token,
                        _Q6_Token,
                        _04_Token,
                        _C0_Token,
                        _C4_Token                        
                    }
                );

                Assert.AreEqual(test.ToString(), field63);
                test.Dump();
            }
            catch (Exception ex)
            {
                Assert.Fail("Test falló: " + ex.Message);
            }

        }

        [TestMethod]
        public void TokenDisassemble_Test()
        {
            string field63 = "& 0000700140! Q100002 4 ! Q200002 04! Q600006 000303! 0400020  00000000484      Y ! C000026         45080             ! C400012 002000000021";
            try
            {
                Iso8583_1993TokenBuilder test = new Iso8583_1993TokenBuilder(field63);
                Assert.AreEqual(test.ToString(), field63);
                test.Dump();
            }
            catch (Exception ex)
            {
                Assert.Fail("Test falló: " + ex.Message);
            }

        }

        [TestMethod]
        public void TokenDisassemble2_Test()
        {
            string field63 = "& 0000400118! C000026         45080             ! C400012 002000000021! U100038 10000000000001715000000000000000000000";
            try
            {
                Iso8583_1993TokenBuilder test = new Iso8583_1993TokenBuilder(field63);
                Assert.AreEqual(test.ToString(), field63);
                test.Dump();
            }
            catch (Exception ex)
            {
                Assert.Fail("Test falló: " + ex.Message);
            }

        }

        [TestMethod]
        public void TurnOnField_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            Iso8583_1993Structure testStructure = testObject.RequestStructure as Iso8583_1993Structure;
            testStructure.TurnOnField(2);
            testStructure.TurnOnField(3);
            testStructure.TurnOnField(39);
            testStructure.TurnOnField(123);
            testStructure.TurnOnField(125);
            Assert.AreEqual("6000000002000000", testStructure["PrimaryBitmap"].ToString());
            Debug.WriteLine("Primary Bitmap is " + testStructure["PrimaryBitmap"].ToString());
            Assert.AreEqual("0000000000000028", testStructure["1"].ToString());
            Debug.WriteLine("Secondary Bitmap is " + testStructure["1"].ToString());
        }

        [TestMethod]
        public void TurnOffField_Test()
        {
            Iso8583_1993Parser testObject = new Iso8583_1993Parser();
            Iso8583_1993Structure testStructure = testObject.RequestStructure as Iso8583_1993Structure;

            ((Iso8583_1993Field)testStructure["PrimaryBitmap"]).CopyContentFrom("FFFFFFFFFFFFFFFF");
            ((Iso8583_1993Field)testStructure["1"]).CopyContentFrom("FFFFFFFFFFFFFFFF");

            testStructure.TurnOffField(2);
            testStructure.TurnOffField(3);
            testStructure.TurnOffField(39);
            testStructure.TurnOffField(123);
            testStructure.TurnOffField(125);
            Assert.AreEqual("9FFFFFFFFDFFFFFF", testStructure["PrimaryBitmap"].ToString());
            Debug.WriteLine("Primary Bitmap is " + testStructure["PrimaryBitmap"].ToString());
            Assert.AreEqual("FFFFFFFFFFFFFFD7", testStructure["1"].ToString());
            Debug.WriteLine("Secondary Bitmap is " + testStructure["1"].ToString());
        }
    }
}
